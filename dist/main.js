webpackJsonp([0,1],[
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Created by pc on 2016/9/8.
	 */
	
	var VueResource = __webpack_require__(/*! vue-resource */ 1);
	var Common = __webpack_require__(/*! ./js/rock */ 2);
	var VueRouter = __webpack_require__(/*! vue-router */ 132);
	var Vue = __webpack_require__(/*! vue */ 133);
	var App = __webpack_require__(/*! ./views/App.vue */ 134);
	
	Common.autoSize(); //自适应
	
	//注册两个插件
	Vue.use(VueResource);
	Vue.use(VueRouter);
	var router = new VueRouter();
	__webpack_require__(/*! ./routers */ 176)(router);
	router.start(App, '#app');

/***/ },
/* 1 */
/*!****************************************************!*\
  !*** ./~/vue-resource/dist/vue-resource.common.js ***!
  \****************************************************/
/***/ function(module, exports) {

	/*!
	 * vue-resource v1.0.1
	 * https://github.com/vuejs/vue-resource
	 * Released under the MIT License.
	 */
	
	'use strict';
	
	/**
	 * Promise adapter.
	 */
	
	var PromiseObj = window.Promise;
	
	function Promise$1(executor, context) {
	
	    if (executor instanceof PromiseObj) {
	        this.promise = executor;
	    } else {
	        this.promise = new PromiseObj(executor.bind(context));
	    }
	
	    this.context = context;
	}
	
	Promise$1.all = function (iterable, context) {
	    return new Promise$1(PromiseObj.all(iterable), context);
	};
	
	Promise$1.resolve = function (value, context) {
	    return new Promise$1(PromiseObj.resolve(value), context);
	};
	
	Promise$1.reject = function (reason, context) {
	    return new Promise$1(PromiseObj.reject(reason), context);
	};
	
	Promise$1.race = function (iterable, context) {
	    return new Promise$1(PromiseObj.race(iterable), context);
	};
	
	var p = Promise$1.prototype;
	
	p.bind = function (context) {
	    this.context = context;
	    return this;
	};
	
	p.then = function (fulfilled, rejected) {
	
	    if (fulfilled && fulfilled.bind && this.context) {
	        fulfilled = fulfilled.bind(this.context);
	    }
	
	    if (rejected && rejected.bind && this.context) {
	        rejected = rejected.bind(this.context);
	    }
	
	    return new Promise$1(this.promise.then(fulfilled, rejected), this.context);
	};
	
	p.catch = function (rejected) {
	
	    if (rejected && rejected.bind && this.context) {
	        rejected = rejected.bind(this.context);
	    }
	
	    return new Promise$1(this.promise.catch(rejected), this.context);
	};
	
	p.finally = function (callback) {
	
	    return this.then(function (value) {
	        callback.call(this);
	        return value;
	    }, function (reason) {
	        callback.call(this);
	        return PromiseObj.reject(reason);
	    });
	};
	
	/**
	 * Utility functions.
	 */
	
	var debug = false;var util = {};var slice = [].slice;
	
	
	function Util (Vue) {
	    util = Vue.util;
	    debug = Vue.config.debug || !Vue.config.silent;
	}
	
	function warn(msg) {
	    if (typeof console !== 'undefined' && debug) {
	        console.warn('[VueResource warn]: ' + msg);
	    }
	}
	
	function error(msg) {
	    if (typeof console !== 'undefined') {
	        console.error(msg);
	    }
	}
	
	function nextTick(cb, ctx) {
	    return util.nextTick(cb, ctx);
	}
	
	function trim(str) {
	    return str.replace(/^\s*|\s*$/g, '');
	}
	
	function toLower(str) {
	    return str ? str.toLowerCase() : '';
	}
	
	function toUpper(str) {
	    return str ? str.toUpperCase() : '';
	}
	
	var isArray = Array.isArray;
	
	function isString(val) {
	    return typeof val === 'string';
	}
	
	function isBoolean(val) {
	    return val === true || val === false;
	}
	
	function isFunction(val) {
	    return typeof val === 'function';
	}
	
	function isObject(obj) {
	    return obj !== null && typeof obj === 'object';
	}
	
	function isPlainObject(obj) {
	    return isObject(obj) && Object.getPrototypeOf(obj) == Object.prototype;
	}
	
	function isBlob(obj) {
	    return typeof Blob !== 'undefined' && obj instanceof Blob;
	}
	
	function isFormData(obj) {
	    return typeof FormData !== 'undefined' && obj instanceof FormData;
	}
	
	function when(value, fulfilled, rejected) {
	
	    var promise = Promise$1.resolve(value);
	
	    if (arguments.length < 2) {
	        return promise;
	    }
	
	    return promise.then(fulfilled, rejected);
	}
	
	function options(fn, obj, opts) {
	
	    opts = opts || {};
	
	    if (isFunction(opts)) {
	        opts = opts.call(obj);
	    }
	
	    return merge(fn.bind({ $vm: obj, $options: opts }), fn, { $options: opts });
	}
	
	function each(obj, iterator) {
	
	    var i, key;
	
	    if (obj && typeof obj.length == 'number') {
	        for (i = 0; i < obj.length; i++) {
	            iterator.call(obj[i], obj[i], i);
	        }
	    } else if (isObject(obj)) {
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                iterator.call(obj[key], obj[key], key);
	            }
	        }
	    }
	
	    return obj;
	}
	
	var assign = Object.assign || _assign;
	
	function merge(target) {
	
	    var args = slice.call(arguments, 1);
	
	    args.forEach(function (source) {
	        _merge(target, source, true);
	    });
	
	    return target;
	}
	
	function defaults(target) {
	
	    var args = slice.call(arguments, 1);
	
	    args.forEach(function (source) {
	
	        for (var key in source) {
	            if (target[key] === undefined) {
	                target[key] = source[key];
	            }
	        }
	    });
	
	    return target;
	}
	
	function _assign(target) {
	
	    var args = slice.call(arguments, 1);
	
	    args.forEach(function (source) {
	        _merge(target, source);
	    });
	
	    return target;
	}
	
	function _merge(target, source, deep) {
	    for (var key in source) {
	        if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
	            if (isPlainObject(source[key]) && !isPlainObject(target[key])) {
	                target[key] = {};
	            }
	            if (isArray(source[key]) && !isArray(target[key])) {
	                target[key] = [];
	            }
	            _merge(target[key], source[key], deep);
	        } else if (source[key] !== undefined) {
	            target[key] = source[key];
	        }
	    }
	}
	
	/**
	 * Root Prefix Transform.
	 */
	
	function root (options, next) {
	
	    var url = next(options);
	
	    if (isString(options.root) && !url.match(/^(https?:)?\//)) {
	        url = options.root + '/' + url;
	    }
	
	    return url;
	}
	
	/**
	 * Query Parameter Transform.
	 */
	
	function query (options, next) {
	
	    var urlParams = Object.keys(Url.options.params),
	        query = {},
	        url = next(options);
	
	    each(options.params, function (value, key) {
	        if (urlParams.indexOf(key) === -1) {
	            query[key] = value;
	        }
	    });
	
	    query = Url.params(query);
	
	    if (query) {
	        url += (url.indexOf('?') == -1 ? '?' : '&') + query;
	    }
	
	    return url;
	}
	
	/**
	 * URL Template v2.0.6 (https://github.com/bramstein/url-template)
	 */
	
	function expand(url, params, variables) {
	
	    var tmpl = parse(url),
	        expanded = tmpl.expand(params);
	
	    if (variables) {
	        variables.push.apply(variables, tmpl.vars);
	    }
	
	    return expanded;
	}
	
	function parse(template) {
	
	    var operators = ['+', '#', '.', '/', ';', '?', '&'],
	        variables = [];
	
	    return {
	        vars: variables,
	        expand: function (context) {
	            return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
	                if (expression) {
	
	                    var operator = null,
	                        values = [];
	
	                    if (operators.indexOf(expression.charAt(0)) !== -1) {
	                        operator = expression.charAt(0);
	                        expression = expression.substr(1);
	                    }
	
	                    expression.split(/,/g).forEach(function (variable) {
	                        var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
	                        values.push.apply(values, getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
	                        variables.push(tmp[1]);
	                    });
	
	                    if (operator && operator !== '+') {
	
	                        var separator = ',';
	
	                        if (operator === '?') {
	                            separator = '&';
	                        } else if (operator !== '#') {
	                            separator = operator;
	                        }
	
	                        return (values.length !== 0 ? operator : '') + values.join(separator);
	                    } else {
	                        return values.join(',');
	                    }
	                } else {
	                    return encodeReserved(literal);
	                }
	            });
	        }
	    };
	}
	
	function getValues(context, operator, key, modifier) {
	
	    var value = context[key],
	        result = [];
	
	    if (isDefined(value) && value !== '') {
	        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
	            value = value.toString();
	
	            if (modifier && modifier !== '*') {
	                value = value.substring(0, parseInt(modifier, 10));
	            }
	
	            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));
	        } else {
	            if (modifier === '*') {
	                if (Array.isArray(value)) {
	                    value.filter(isDefined).forEach(function (value) {
	                        result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));
	                    });
	                } else {
	                    Object.keys(value).forEach(function (k) {
	                        if (isDefined(value[k])) {
	                            result.push(encodeValue(operator, value[k], k));
	                        }
	                    });
	                }
	            } else {
	                var tmp = [];
	
	                if (Array.isArray(value)) {
	                    value.filter(isDefined).forEach(function (value) {
	                        tmp.push(encodeValue(operator, value));
	                    });
	                } else {
	                    Object.keys(value).forEach(function (k) {
	                        if (isDefined(value[k])) {
	                            tmp.push(encodeURIComponent(k));
	                            tmp.push(encodeValue(operator, value[k].toString()));
	                        }
	                    });
	                }
	
	                if (isKeyOperator(operator)) {
	                    result.push(encodeURIComponent(key) + '=' + tmp.join(','));
	                } else if (tmp.length !== 0) {
	                    result.push(tmp.join(','));
	                }
	            }
	        }
	    } else {
	        if (operator === ';') {
	            result.push(encodeURIComponent(key));
	        } else if (value === '' && (operator === '&' || operator === '?')) {
	            result.push(encodeURIComponent(key) + '=');
	        } else if (value === '') {
	            result.push('');
	        }
	    }
	
	    return result;
	}
	
	function isDefined(value) {
	    return value !== undefined && value !== null;
	}
	
	function isKeyOperator(operator) {
	    return operator === ';' || operator === '&' || operator === '?';
	}
	
	function encodeValue(operator, value, key) {
	
	    value = operator === '+' || operator === '#' ? encodeReserved(value) : encodeURIComponent(value);
	
	    if (key) {
	        return encodeURIComponent(key) + '=' + value;
	    } else {
	        return value;
	    }
	}
	
	function encodeReserved(str) {
	    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {
	        if (!/%[0-9A-Fa-f]/.test(part)) {
	            part = encodeURI(part);
	        }
	        return part;
	    }).join('');
	}
	
	/**
	 * URL Template (RFC 6570) Transform.
	 */
	
	function template (options) {
	
	    var variables = [],
	        url = expand(options.url, options.params, variables);
	
	    variables.forEach(function (key) {
	        delete options.params[key];
	    });
	
	    return url;
	}
	
	/**
	 * Service for URL templating.
	 */
	
	var ie = document.documentMode;
	var el = document.createElement('a');
	
	function Url(url, params) {
	
	    var self = this || {},
	        options = url,
	        transform;
	
	    if (isString(url)) {
	        options = { url: url, params: params };
	    }
	
	    options = merge({}, Url.options, self.$options, options);
	
	    Url.transforms.forEach(function (handler) {
	        transform = factory(handler, transform, self.$vm);
	    });
	
	    return transform(options);
	}
	
	/**
	 * Url options.
	 */
	
	Url.options = {
	    url: '',
	    root: null,
	    params: {}
	};
	
	/**
	 * Url transforms.
	 */
	
	Url.transforms = [template, query, root];
	
	/**
	 * Encodes a Url parameter string.
	 *
	 * @param {Object} obj
	 */
	
	Url.params = function (obj) {
	
	    var params = [],
	        escape = encodeURIComponent;
	
	    params.add = function (key, value) {
	
	        if (isFunction(value)) {
	            value = value();
	        }
	
	        if (value === null) {
	            value = '';
	        }
	
	        this.push(escape(key) + '=' + escape(value));
	    };
	
	    serialize(params, obj);
	
	    return params.join('&').replace(/%20/g, '+');
	};
	
	/**
	 * Parse a URL and return its components.
	 *
	 * @param {String} url
	 */
	
	Url.parse = function (url) {
	
	    if (ie) {
	        el.href = url;
	        url = el.href;
	    }
	
	    el.href = url;
	
	    return {
	        href: el.href,
	        protocol: el.protocol ? el.protocol.replace(/:$/, '') : '',
	        port: el.port,
	        host: el.host,
	        hostname: el.hostname,
	        pathname: el.pathname.charAt(0) === '/' ? el.pathname : '/' + el.pathname,
	        search: el.search ? el.search.replace(/^\?/, '') : '',
	        hash: el.hash ? el.hash.replace(/^#/, '') : ''
	    };
	};
	
	function factory(handler, next, vm) {
	    return function (options) {
	        return handler.call(vm, options, next);
	    };
	}
	
	function serialize(params, obj, scope) {
	
	    var array = isArray(obj),
	        plain = isPlainObject(obj),
	        hash;
	
	    each(obj, function (value, key) {
	
	        hash = isObject(value) || isArray(value);
	
	        if (scope) {
	            key = scope + '[' + (plain || hash ? key : '') + ']';
	        }
	
	        if (!scope && array) {
	            params.add(value.name, value.value);
	        } else if (hash) {
	            serialize(params, value, key);
	        } else {
	            params.add(key, value);
	        }
	    });
	}
	
	/**
	 * XDomain client (Internet Explorer).
	 */
	
	function xdrClient (request) {
	    return new Promise$1(function (resolve) {
	
	        var xdr = new XDomainRequest(),
	            handler = function (event) {
	
	            var response = request.respondWith(xdr.responseText, {
	                status: xdr.status,
	                statusText: xdr.statusText
	            });
	
	            resolve(response);
	        };
	
	        request.abort = function () {
	            return xdr.abort();
	        };
	
	        xdr.open(request.method, request.getUrl(), true);
	        xdr.timeout = 0;
	        xdr.onload = handler;
	        xdr.onerror = handler;
	        xdr.ontimeout = function () {};
	        xdr.onprogress = function () {};
	        xdr.send(request.getBody());
	    });
	}
	
	/**
	 * CORS Interceptor.
	 */
	
	var ORIGIN_URL = Url.parse(location.href);
	var SUPPORTS_CORS = 'withCredentials' in new XMLHttpRequest();
	
	function cors (request, next) {
	
	    if (!isBoolean(request.crossOrigin) && crossOrigin(request)) {
	        request.crossOrigin = true;
	    }
	
	    if (request.crossOrigin) {
	
	        if (!SUPPORTS_CORS) {
	            request.client = xdrClient;
	        }
	
	        delete request.emulateHTTP;
	    }
	
	    next();
	}
	
	function crossOrigin(request) {
	
	    var requestUrl = Url.parse(Url(request));
	
	    return requestUrl.protocol !== ORIGIN_URL.protocol || requestUrl.host !== ORIGIN_URL.host;
	}
	
	/**
	 * Body Interceptor.
	 */
	
	function body (request, next) {
	
	    if (isFormData(request.body)) {
	
	        request.headers.delete('Content-Type');
	    } else if (isObject(request.body) || isArray(request.body)) {
	
	        if (request.emulateJSON) {
	            request.body = Url.params(request.body);
	            request.headers.set('Content-Type', 'application/x-www-form-urlencoded');
	        } else {
	            request.body = JSON.stringify(request.body);
	        }
	    }
	
	    next(function (response) {
	
	        Object.defineProperty(response, 'data', {
	            get: function () {
	                return this.body;
	            },
	            set: function (body) {
	                this.body = body;
	            }
	        });
	
	        return response.bodyText ? when(response.text(), function (text) {
	
	            var type = response.headers.get('Content-Type');
	
	            if (isString(type) && type.indexOf('application/json') === 0) {
	
	                try {
	                    response.body = JSON.parse(text);
	                } catch (e) {
	                    response.body = null;
	                }
	            } else {
	                response.body = text;
	            }
	
	            return response;
	        }) : response;
	    });
	}
	
	/**
	 * JSONP client.
	 */
	
	function jsonpClient (request) {
	    return new Promise$1(function (resolve) {
	
	        var name = request.jsonp || 'callback',
	            callback = '_jsonp' + Math.random().toString(36).substr(2),
	            body = null,
	            handler,
	            script;
	
	        handler = function (event) {
	
	            var status = 0;
	
	            if (event.type === 'load' && body !== null) {
	                status = 200;
	            } else if (event.type === 'error') {
	                status = 404;
	            }
	
	            resolve(request.respondWith(body, { status: status }));
	
	            delete window[callback];
	            document.body.removeChild(script);
	        };
	
	        request.params[name] = callback;
	
	        window[callback] = function (result) {
	            body = JSON.stringify(result);
	        };
	
	        script = document.createElement('script');
	        script.src = request.getUrl();
	        script.type = 'text/javascript';
	        script.async = true;
	        script.onload = handler;
	        script.onerror = handler;
	
	        document.body.appendChild(script);
	    });
	}
	
	/**
	 * JSONP Interceptor.
	 */
	
	function jsonp (request, next) {
	
	    if (request.method == 'JSONP') {
	        request.client = jsonpClient;
	    }
	
	    next(function (response) {
	
	        if (request.method == 'JSONP') {
	
	            return when(response.json(), function (json) {
	
	                response.body = json;
	
	                return response;
	            });
	        }
	    });
	}
	
	/**
	 * Before Interceptor.
	 */
	
	function before (request, next) {
	
	    if (isFunction(request.before)) {
	        request.before.call(this, request);
	    }
	
	    next();
	}
	
	/**
	 * HTTP method override Interceptor.
	 */
	
	function method (request, next) {
	
	    if (request.emulateHTTP && /^(PUT|PATCH|DELETE)$/i.test(request.method)) {
	        request.headers.set('X-HTTP-Method-Override', request.method);
	        request.method = 'POST';
	    }
	
	    next();
	}
	
	/**
	 * Header Interceptor.
	 */
	
	function header (request, next) {
	
	    var headers = assign({}, Http.headers.common, !request.crossOrigin ? Http.headers.custom : {}, Http.headers[toLower(request.method)]);
	
	    each(headers, function (value, name) {
	        if (!request.headers.has(name)) {
	            request.headers.set(name, value);
	        }
	    });
	
	    next();
	}
	
	/**
	 * Timeout Interceptor.
	 */
	
	function timeout (request, next) {
	
	    var timeout;
	
	    if (request.timeout) {
	        timeout = setTimeout(function () {
	            request.abort();
	        }, request.timeout);
	    }
	
	    next(function (response) {
	
	        clearTimeout(timeout);
	    });
	}
	
	/**
	 * XMLHttp client.
	 */
	
	function xhrClient (request) {
	    return new Promise$1(function (resolve) {
	
	        var xhr = new XMLHttpRequest(),
	            handler = function (event) {
	
	            var response = request.respondWith('response' in xhr ? xhr.response : xhr.responseText, {
	                status: xhr.status === 1223 ? 204 : xhr.status, // IE9 status bug
	                statusText: xhr.status === 1223 ? 'No Content' : trim(xhr.statusText)
	            });
	
	            each(trim(xhr.getAllResponseHeaders()).split('\n'), function (row) {
	                response.headers.append(row.slice(0, row.indexOf(':')), row.slice(row.indexOf(':') + 1));
	            });
	
	            resolve(response);
	        };
	
	        request.abort = function () {
	            return xhr.abort();
	        };
	
	        if (request.progress) {
	            if (request.method === 'GET') {
	                xhr.addEventListener('progress', request.progress);
	            } else if (/^(POST|PUT)$/i.test(request.method)) {
	                xhr.upload.addEventListener('progress', request.progress);
	            }
	        }
	
	        xhr.open(request.method, request.getUrl(), true);
	
	        if ('responseType' in xhr) {
	            xhr.responseType = 'blob';
	        }
	
	        if (request.credentials === true) {
	            xhr.withCredentials = true;
	        }
	
	        request.headers.forEach(function (value, name) {
	            xhr.setRequestHeader(name, value);
	        });
	
	        xhr.timeout = 0;
	        xhr.onload = handler;
	        xhr.onerror = handler;
	        xhr.send(request.getBody());
	    });
	}
	
	/**
	 * Base client.
	 */
	
	function Client (context) {
	
	    var reqHandlers = [sendRequest],
	        resHandlers = [],
	        handler;
	
	    if (!isObject(context)) {
	        context = null;
	    }
	
	    function Client(request) {
	        return new Promise$1(function (resolve) {
	
	            function exec() {
	
	                handler = reqHandlers.pop();
	
	                if (isFunction(handler)) {
	                    handler.call(context, request, next);
	                } else {
	                    warn('Invalid interceptor of type ' + typeof handler + ', must be a function');
	                    next();
	                }
	            }
	
	            function next(response) {
	
	                if (isFunction(response)) {
	
	                    resHandlers.unshift(response);
	                } else if (isObject(response)) {
	
	                    resHandlers.forEach(function (handler) {
	                        response = when(response, function (response) {
	                            return handler.call(context, response) || response;
	                        });
	                    });
	
	                    when(response, resolve);
	
	                    return;
	                }
	
	                exec();
	            }
	
	            exec();
	        }, context);
	    }
	
	    Client.use = function (handler) {
	        reqHandlers.push(handler);
	    };
	
	    return Client;
	}
	
	function sendRequest(request, resolve) {
	
	    var client = request.client || xhrClient;
	
	    resolve(client(request));
	}
	
	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	/**
	 * HTTP Headers.
	 */
	
	var Headers = function () {
	    function Headers(headers) {
	        var _this = this;
	
	        classCallCheck(this, Headers);
	
	
	        this.map = {};
	
	        each(headers, function (value, name) {
	            return _this.append(name, value);
	        });
	    }
	
	    Headers.prototype.has = function has(name) {
	        return getName(this.map, name) !== null;
	    };
	
	    Headers.prototype.get = function get(name) {
	
	        var list = this.map[getName(this.map, name)];
	
	        return list ? list[0] : null;
	    };
	
	    Headers.prototype.getAll = function getAll(name) {
	        return this.map[getName(this.map, name)] || [];
	    };
	
	    Headers.prototype.set = function set(name, value) {
	        this.map[normalizeName(getName(this.map, name) || name)] = [trim(value)];
	    };
	
	    Headers.prototype.append = function append(name, value) {
	
	        var list = this.getAll(name);
	
	        if (list.length) {
	            list.push(trim(value));
	        } else {
	            this.set(name, value);
	        }
	    };
	
	    Headers.prototype.delete = function _delete(name) {
	        delete this.map[getName(name)];
	    };
	
	    Headers.prototype.forEach = function forEach(callback, thisArg) {
	        var _this2 = this;
	
	        each(this.map, function (list, name) {
	            each(list, function (value) {
	                return callback.call(thisArg, value, name, _this2);
	            });
	        });
	    };
	
	    return Headers;
	}();
	
	function getName(map, name) {
	    return Object.keys(map).reduce(function (prev, curr) {
	        return toLower(name) === toLower(curr) ? curr : prev;
	    }, null);
	}
	
	function normalizeName(name) {
	
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	        throw new TypeError('Invalid character in header field name');
	    }
	
	    return trim(name);
	}
	
	/**
	 * HTTP Response.
	 */
	
	var Response = function () {
	    function Response(body, _ref) {
	        var url = _ref.url;
	        var headers = _ref.headers;
	        var status = _ref.status;
	        var statusText = _ref.statusText;
	        classCallCheck(this, Response);
	
	
	        this.url = url;
	        this.ok = status >= 200 && status < 300;
	        this.status = status || 0;
	        this.statusText = statusText || '';
	        this.headers = new Headers(headers);
	        this.body = body;
	
	        if (isString(body)) {
	
	            this.bodyText = body;
	        } else if (isBlob(body)) {
	
	            this.bodyBlob = body;
	
	            if (isBlobText(body)) {
	                this.bodyText = blobText(body);
	            }
	        }
	    }
	
	    Response.prototype.blob = function blob() {
	        return when(this.bodyBlob);
	    };
	
	    Response.prototype.text = function text() {
	        return when(this.bodyText);
	    };
	
	    Response.prototype.json = function json() {
	        return when(this.text(), function (text) {
	            return JSON.parse(text);
	        });
	    };
	
	    return Response;
	}();
	
	function blobText(body) {
	    return new Promise$1(function (resolve) {
	
	        var reader = new FileReader();
	
	        reader.readAsText(body);
	        reader.onload = function () {
	            resolve(reader.result);
	        };
	    });
	}
	
	function isBlobText(body) {
	    return body.type.indexOf('text') === 0 || body.type.indexOf('json') !== -1;
	}
	
	/**
	 * HTTP Request.
	 */
	
	var Request = function () {
	    function Request(options) {
	        classCallCheck(this, Request);
	
	
	        this.body = null;
	        this.params = {};
	
	        assign(this, options, {
	            method: toUpper(options.method || 'GET'),
	            headers: new Headers(options.headers)
	        });
	    }
	
	    Request.prototype.getUrl = function getUrl() {
	        return Url(this);
	    };
	
	    Request.prototype.getBody = function getBody() {
	        return this.body;
	    };
	
	    Request.prototype.respondWith = function respondWith(body, options) {
	        return new Response(body, assign(options || {}, { url: this.getUrl() }));
	    };
	
	    return Request;
	}();
	
	/**
	 * Service for sending network requests.
	 */
	
	var CUSTOM_HEADERS = { 'X-Requested-With': 'XMLHttpRequest' };
	var COMMON_HEADERS = { 'Accept': 'application/json, text/plain, */*' };
	var JSON_CONTENT_TYPE = { 'Content-Type': 'application/json;charset=utf-8' };
	
	function Http(options) {
	
	    var self = this || {},
	        client = Client(self.$vm);
	
	    defaults(options || {}, self.$options, Http.options);
	
	    Http.interceptors.forEach(function (handler) {
	        client.use(handler);
	    });
	
	    return client(new Request(options)).then(function (response) {
	
	        return response.ok ? response : Promise$1.reject(response);
	    }, function (response) {
	
	        if (response instanceof Error) {
	            error(response);
	        }
	
	        return Promise$1.reject(response);
	    });
	}
	
	Http.options = {};
	
	Http.headers = {
	    put: JSON_CONTENT_TYPE,
	    post: JSON_CONTENT_TYPE,
	    patch: JSON_CONTENT_TYPE,
	    delete: JSON_CONTENT_TYPE,
	    custom: CUSTOM_HEADERS,
	    common: COMMON_HEADERS
	};
	
	Http.interceptors = [before, timeout, method, body, jsonp, header, cors];
	
	['get', 'delete', 'head', 'jsonp'].forEach(function (method) {
	
	    Http[method] = function (url, options) {
	        return this(assign(options || {}, { url: url, method: method }));
	    };
	});
	
	['post', 'put', 'patch'].forEach(function (method) {
	
	    Http[method] = function (url, body, options) {
	        return this(assign(options || {}, { url: url, method: method, body: body }));
	    };
	});
	
	/**
	 * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)
	 */
	
	var RESOLVED = 0;
	var REJECTED = 1;
	var PENDING = 2;
	
	function Promise$2(executor) {
	
	    this.state = PENDING;
	    this.value = undefined;
	    this.deferred = [];
	
	    var promise = this;
	
	    try {
	        executor(function (x) {
	            promise.resolve(x);
	        }, function (r) {
	            promise.reject(r);
	        });
	    } catch (e) {
	        promise.reject(e);
	    }
	}
	
	Promise$2.reject = function (r) {
	    return new Promise$2(function (resolve, reject) {
	        reject(r);
	    });
	};
	
	Promise$2.resolve = function (x) {
	    return new Promise$2(function (resolve, reject) {
	        resolve(x);
	    });
	};
	
	Promise$2.all = function all(iterable) {
	    return new Promise$2(function (resolve, reject) {
	        var count = 0,
	            result = [];
	
	        if (iterable.length === 0) {
	            resolve(result);
	        }
	
	        function resolver(i) {
	            return function (x) {
	                result[i] = x;
	                count += 1;
	
	                if (count === iterable.length) {
	                    resolve(result);
	                }
	            };
	        }
	
	        for (var i = 0; i < iterable.length; i += 1) {
	            Promise$2.resolve(iterable[i]).then(resolver(i), reject);
	        }
	    });
	};
	
	Promise$2.race = function race(iterable) {
	    return new Promise$2(function (resolve, reject) {
	        for (var i = 0; i < iterable.length; i += 1) {
	            Promise$2.resolve(iterable[i]).then(resolve, reject);
	        }
	    });
	};
	
	var p$1 = Promise$2.prototype;
	
	p$1.resolve = function resolve(x) {
	    var promise = this;
	
	    if (promise.state === PENDING) {
	        if (x === promise) {
	            throw new TypeError('Promise settled with itself.');
	        }
	
	        var called = false;
	
	        try {
	            var then = x && x['then'];
	
	            if (x !== null && typeof x === 'object' && typeof then === 'function') {
	                then.call(x, function (x) {
	                    if (!called) {
	                        promise.resolve(x);
	                    }
	                    called = true;
	                }, function (r) {
	                    if (!called) {
	                        promise.reject(r);
	                    }
	                    called = true;
	                });
	                return;
	            }
	        } catch (e) {
	            if (!called) {
	                promise.reject(e);
	            }
	            return;
	        }
	
	        promise.state = RESOLVED;
	        promise.value = x;
	        promise.notify();
	    }
	};
	
	p$1.reject = function reject(reason) {
	    var promise = this;
	
	    if (promise.state === PENDING) {
	        if (reason === promise) {
	            throw new TypeError('Promise settled with itself.');
	        }
	
	        promise.state = REJECTED;
	        promise.value = reason;
	        promise.notify();
	    }
	};
	
	p$1.notify = function notify() {
	    var promise = this;
	
	    nextTick(function () {
	        if (promise.state !== PENDING) {
	            while (promise.deferred.length) {
	                var deferred = promise.deferred.shift(),
	                    onResolved = deferred[0],
	                    onRejected = deferred[1],
	                    resolve = deferred[2],
	                    reject = deferred[3];
	
	                try {
	                    if (promise.state === RESOLVED) {
	                        if (typeof onResolved === 'function') {
	                            resolve(onResolved.call(undefined, promise.value));
	                        } else {
	                            resolve(promise.value);
	                        }
	                    } else if (promise.state === REJECTED) {
	                        if (typeof onRejected === 'function') {
	                            resolve(onRejected.call(undefined, promise.value));
	                        } else {
	                            reject(promise.value);
	                        }
	                    }
	                } catch (e) {
	                    reject(e);
	                }
	            }
	        }
	    });
	};
	
	p$1.then = function then(onResolved, onRejected) {
	    var promise = this;
	
	    return new Promise$2(function (resolve, reject) {
	        promise.deferred.push([onResolved, onRejected, resolve, reject]);
	        promise.notify();
	    });
	};
	
	p$1.catch = function (onRejected) {
	    return this.then(undefined, onRejected);
	};
	
	/**
	 * Service for interacting with RESTful services.
	 */
	
	function Resource(url, params, actions, options) {
	
	    var self = this || {},
	        resource = {};
	
	    actions = assign({}, Resource.actions, actions);
	
	    each(actions, function (action, name) {
	
	        action = merge({ url: url, params: assign({}, params) }, options, action);
	
	        resource[name] = function () {
	            return (self.$http || Http)(opts(action, arguments));
	        };
	    });
	
	    return resource;
	}
	
	function opts(action, args) {
	
	    var options = assign({}, action),
	        params = {},
	        body;
	
	    switch (args.length) {
	
	        case 2:
	
	            params = args[0];
	            body = args[1];
	
	            break;
	
	        case 1:
	
	            if (/^(POST|PUT|PATCH)$/i.test(options.method)) {
	                body = args[0];
	            } else {
	                params = args[0];
	            }
	
	            break;
	
	        case 0:
	
	            break;
	
	        default:
	
	            throw 'Expected up to 4 arguments [params, body], got ' + args.length + ' arguments';
	    }
	
	    options.body = body;
	    options.params = assign({}, options.params, params);
	
	    return options;
	}
	
	Resource.actions = {
	
	    get: { method: 'GET' },
	    save: { method: 'POST' },
	    query: { method: 'GET' },
	    update: { method: 'PUT' },
	    remove: { method: 'DELETE' },
	    delete: { method: 'DELETE' }
	
	};
	
	/**
	 * Install plugin.
	 */
	
	function plugin(Vue) {
	
	    if (plugin.installed) {
	        return;
	    }
	
	    Util(Vue);
	
	    Vue.url = Url;
	    Vue.http = Http;
	    Vue.resource = Resource;
	    Vue.Promise = Promise$1;
	
	    Object.defineProperties(Vue.prototype, {
	
	        $url: {
	            get: function () {
	                return options(Vue.url, this, this.$options.url);
	            }
	        },
	
	        $http: {
	            get: function () {
	                return options(Vue.http, this, this.$options.http);
	            }
	        },
	
	        $resource: {
	            get: function () {
	                return Vue.resource.bind(this);
	            }
	        },
	
	        $promise: {
	            get: function () {
	                var _this = this;
	
	                return function (executor) {
	                    return new Vue.Promise(executor, _this);
	                };
	            }
	        }
	
	    });
	}
	
	if (typeof window !== 'undefined') {
	
	    if (!window.Promise) {
	        window.Promise = Promise$2;
	    }
	
	    if (window.Vue) {
	        window.Vue.use(plugin);
	    }
	}
	
	module.exports = plugin;

/***/ },
/* 2 */
/*!************************!*\
  !*** ./src/js/rock.js ***!
  \************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	/**
	 * Created by pc on 2016/9/9.
	 */
	var AV = __webpack_require__(/*! leancloud-storage */ 4);
	var mui = __webpack_require__(/*! ../js/mui.min.js */ 49);
	
	/**
	 * leancloud 对象
	 */
	module.exports.mui = mui;
	
	/**
	 * app vue 主界面 根目录
	 */
	module.exports.appView = '';
	
	module.exports.init = function (view) {
	
	    this.appView = view;
	    Date.prototype.format = function (format) {
	        var o = {
	            "M+": this.getMonth() + 1, //month
	            "d+": this.getDate(), //day
	            "h+": this.getHours(), //hour
	            "m+": this.getMinutes(), //minute
	            "s+": this.getSeconds(), //second
	            "q+": Math.floor((this.getMonth() + 3) / 3), //quarter
	            "S": this.getMilliseconds() //millisecond
	        };
	
	        if (/(y+)/.test(format)) {
	            format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	        }
	
	        for (var k in o) {
	            if (new RegExp("(" + k + ")").test(format)) {
	                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
	            }
	        }
	        return format;
	    };
	};
	
	module.exports.wlConfig = function () {
	    return {
	        APP_ID: '27598',
	        APP_KEY: '32a7b9412fff4da0a5c688b77151b736'
	    };
	};
	
	module.exports.wlScreen = function () {
	    return {
	        minHeight: '',
	        currentHeight: '',
	        currentWidth: '',
	        landscape: true,
	        orientation: '0'
	    };
	};
	
	/**
	 * 保存进入页面是的宽度高度和方向
	 * @param {int} scale 比例
	 */
	module.exports.autoSize = function (scale) {
	    var _this = this;
	    this.wlScreen().currentHeight = window.innerHeight;
	    this.wlScreen().currentWidth = window.innerWidth;
	    this.wlScreen().minHeight = this.wlScreen().currentHeight - 150; //弹起软键盘之后的屏幕阈值  屏幕高度硬顶小于该值
	    this.wlScreen().landscape = window.orientation == '0';
	    this.wlScreen().orientation = window.orientation;
	    //屏幕旋转事件 重新获取方向和数值
	    window.addEventListener('orientationchange' in window ? 'orientationchange' : 'resize', function (e) {
	
	        //判断是否为旋转屏幕 只有屏幕旋转才重新记录
	        if (_this.wlScreen().orientation != window.orientation) {
	            _this.wlScreen().landscape = window.orientation == '0';
	            _this.wlScreen().orientation = window.orientation;
	            //由于安卓和ios 事件和数值更改的顺序不一样，有可能先触发事件后更改参数，所以增加延时保证新的数据正确
	            setTimeout(function () {
	                _this.wlScreen().currentHeight = window.innerHeight;
	                _this.wlScreen().currentWidth = window.innerWidth;
	                _this.wlScreen().minHeight = wlScreen().currentHeight - 150;
	            }, 1500);
	        }
	    }, false);
	
	    var docEle = document.documentElement;
	    var initWidth = 640,
	        initSize = 100;
	    if (!isNaN(scale) && scale > 0) initSize = scale;
	    var minWidth = window.screen.width < window.screen.height ? window.screen.width : window.screen.height;
	    var devicePixelRatio = window.devicePixelRatio;
	    //部分安卓手机 window.innerWidth的实际数值是   window.innerWidth*window.devicePixelRatio
	    if (window.screen.width / window.innerWidth >= 2) {
	        var actualWidth = window.screen.width / devicePixelRatio;
	        var actualHeight = window.screen.height / devicePixelRatio;
	        minWidth = actualWidth < actualHeight ? actualWidth : actualHeight;
	    }
	    var w = minWidth > 640 ? 640 : minWidth;
	    docEle.style.fontSize = w / initWidth * initSize + 'px';
	
	    //移除隐藏body 的hide class
	    var reg = new RegExp('(\\s|^)' + 'hide' + '(\\s|$)');
	    document.body.className = document.body.className.replace(reg, ' ');
	
	    console.log('autoSize');
	};
	
	/**
	 * @method GET 异步提交
	 * @param {string} url url
	 * @param {object} data 参数
	 * @param {function} callback 成功回调
	 * @param {function} error 错误回调
	 * @return {null}
	 */
	module.exports.showApiData = function (url, data, callback, _error) {
	
	    var url1 = url + "?showapi_appid=" + this.wlConfig().APP_ID + "&showapi_timestamp=" + this.showApiTimeTamp() + "&showapi_sign=" + this.wlConfig().APP_KEY;
	    for (var i in data) {
	        url1 += "&" + i + "=" + data[i];
	    }
	    $.ajax({
	        async: true,
	        url: url1,
	        type: 'GET',
	        success: function success(backData) {
	            callback(backData);
	        },
	        error: function error(x, y, z) {
	            console.log("error!");
	            if (typeof _error == 'function') {
	                _error(x, y, z);
	            }
	        }
	    });
	};
	
	module.exports.showApiTimeTamp = function () {
	    var d1 = new Date();
	    return d1.format('yyyyMMddhhmmss');
	};
	
	/**
	 * @method 获取页面url后面参数的值
	 * @param {String} name  参数名
	 */
	module.exports.getUrlParam = function (name) {
	    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
	    var r = window.location.search.substr(1).match(reg);
	    if (r != null) return unescape(r[2]);
	    return null;
	};
	
	/**
	 * @method 获取页面url后面参数的值
	 * @param {String} name  参数名
	 */
	module.exports.getUrlParamAfterHash = function (name) {
	    var reg = new RegExp("(^|&\?)" + name + "=([^&]*)(&|$)");
	    try {
	        var r = window.location.hash.match(reg);
	        if (r != null) return unescape(r[2]);
	    } catch (e) {}
	    return null;
	};
	
	/**
	 * @method 去掉字符串头尾空格
	 * @param {String} str  字符串
	 */
	module.exports.trim = function (str) {
	    if (str != undefined && str != null) return str.replace(/(^\s*)|(\s*$)/g, "");
	};
	
	/**
	 * 输入控制
	 * @property decimal 带小数点
	 * @property integer 纯数字
	 * @property andX 带大小写X 用于身份证
	 */
	module.exports.onlyNumber = {
	    decimal: function decimal(input) {
	        var number = $(input).val();
	        var lastChar = number.substr(number.length - 1, number.length);
	        if (!lastChar.match(/^[0-9.]+$/)) {
	            $(input).val(number.substr(0, number.length - 1));
	        }
	    },
	    integer: function integer(input) {
	        var number = $(input).val();
	        var lastChar = number.substr(number.length - 1, number.length);
	        if (!lastChar.match(/^[0-9]+$/)) {
	            $(input).val(number.substr(0, number.length - 1));
	        }
	    },
	    andX: function andX(input) {
	        var number = $(input).val();
	        var lastChar = number.substr(number.length - 1, number.length);
	        if (!lastChar.match(/^[0-9Xx]+$/)) {
	            $(input).val(number.substr(0, number.length - 1));
	        }
	    }
	};
	
	/**
	 *  滚动条相关函数
	 */
	module.exports.scroll = function () {
	    //获取滚动条当前的位置
	    return {
	        getScrollTop: function getScrollTop() {
	            var st = 0;
	            if (document.documentElement && document.documentElement.scrollTop) {
	                st = document.documentElement.scrollTop;
	            } else if (document.body) {
	                st = document.body.scrollTop;
	            }
	            return st;
	        },
	        //获取当前可视范围的高度
	        getClientHeight: function getClientHeight() {
	            var clientHeight = 0;
	            if (document.body.clientHeight && document.documentElement.clientHeight) {
	                clientHeight = Math.min(document.body.clientHeight, document.documentElement.clientHeight);
	            } else {
	                clientHeight = Math.max(document.body.clientHeight, document.documentElement.clientHeight);
	            }
	            return clientHeight;
	        },
	        //获取文档完整的高度
	        getScrollHeight: function getScrollHeight() {
	            return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
	        }
	    };
	};
	
	/**
	 *  @method 判断PC 或者是手机平板
	 *  @return {boolean}
	 */
	module.exports.isPC = function () {
	    var userAgentInfo = navigator.userAgent;
	    var Agents = ["Android", "iPhone", "SymbianOS", "Windows Phone", "iPad", "iPod"];
	    var flag = true;
	    for (var v = 0; v < Agents.length; v++) {
	        if (userAgentInfo.indexOf(Agents[v]) > 0) {
	            flag = false;
	            break;
	        }
	    }
	    return flag;
	};
	
	/**
	 * 字段 非undefined 非空 长度非0
	 * @param val
	 * @returns {boolean}
	 */
	module.exports.hasVal = function (val) {
	    return val != undefined && val != null && val.length != 0;
	};
	
	module.exports.getDate = function (date, offDay) {
	    if (typeof date == 'string') {
	        var arr = date.split('-');
	        date = new Date(arr[0], arr[1] - 1, arr[2]);
	    }
	    var targetday_milliseconds = date.getTime() + 1000 * 60 * 60 * 24 * offDay;
	    date.setTime(targetday_milliseconds); //注意，这行是关键代码
	    return date;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 3)))

/***/ },
/* 3 */
/*!*********************************!*\
  !*** ./~/jquery/dist/jquery.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*eslint-disable no-unused-vars*/
	/*!
	 * jQuery JavaScript Library v3.1.0
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-07-07T21:44Z
	 */
	( function( global, factory ) {
	
		"use strict";
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
	
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";
	
	var arr = [];
	
	var document = window.document;
	
	var getProto = Object.getPrototypeOf;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var fnToString = hasOwn.toString;
	
	var ObjectFunctionString = fnToString.call( Object );
	
	var support = {};
	
	
	
		function DOMEval( code, doc ) {
			doc = doc || document;
	
			var script = doc.createElement( "script" );
	
			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module
	
	
	
	var
		version = "3.1.0",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&
	
				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},
	
		isPlainObject: function( obj ) {
			var proto, Ctor;
	
			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}
	
			proto = getProto( obj );
	
			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}
	
			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},
	
		isEmptyObject: function( obj ) {
	
			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;
	
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.0
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-01-04
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
	
		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {
	
				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}
	
				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}
	
			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},
	
		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true;
			},
			{ dir: "parentNode", next: "legend" }
		);
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");
	
		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {
		// Known :disabled false positives:
		// IE: *[disabled]:not(button, input, select, textarea, optgroup, option, menuitem, fieldset)
		// not IE: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {
	
			// Check form elements and option elements for explicit disabling
			return "label" in elem && elem.disabled === disabled ||
				"form" in elem && elem.disabled === disabled ||
	
				// Check non-disabled form elements for fieldset[disabled] ancestors
				"form" in elem && elem.disabled === false && (
					// Support: IE6-11+
					// Ancestry is covered for us
					elem.isDisabled === disabled ||
	
					// Otherwise, assume any non-<option> under fieldset[disabled] is disabled
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						("label" in elem || !disabledAncestor( elem )) !== disabled
				);
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {
	
			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";
	
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	
	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;
	
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			ret = this.pushStack( [] );
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						if ( elem ) {
	
							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );
	
			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :
	
							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
							matched.push( cur );
							break;
						}
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}
	
	function adoptValue( value, resolve, reject ) {
		var method;
	
		try {
	
			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );
	
			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );
	
			// Other non-thenables
			} else {
	
				// Support: Android 4.0 only
				// Strict mode functions invoked without .call/.apply get global-object context
				resolve.call( undefined, value );
			}
	
		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {
	
			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.call( undefined, value );
		}
	}
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},
	
					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
	
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
	
								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];
	
								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;
	
										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}
	
										returned = handler.apply( that, args );
	
										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}
	
										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&
	
											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;
	
										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {
	
											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);
	
											// Normal processors (resolve) also hook into progress
											} else {
	
												// ...and disregard older resolution values
												maxDepth++;
	
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}
	
										// Handle all other returned values
										} else {
	
											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}
	
											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},
	
									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {
	
												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}
	
												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {
	
													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}
	
													deferred.rejectWith( that, args );
												}
											}
										};
	
								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {
	
									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}
	
						return jQuery.Deferred( function( newDefer ) {
	
							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);
	
							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);
	
							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];
	
				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add(
						function() {
	
							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},
	
						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,
	
						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}
	
				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );
	
				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};
	
				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( singleValue ) {
			var
	
				// count of uncompleted subordinates
				remaining = arguments.length,
	
				// count of unprocessed arguments
				i = remaining,
	
				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),
	
				// the master Deferred
				master = jQuery.Deferred(),
	
				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};
	
			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );
	
				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {
	
					return master.then();
				}
			}
	
			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}
	
			return master.promise();
		}
	} );
	
	
	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
	
	jQuery.Deferred.exceptionHook = function( error, stack ) {
	
		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};
	
	
	
	
	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};
	
	
	
	
	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();
	
	jQuery.fn.ready = function( fn ) {
	
		readyList
			.then( fn )
	
			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );
	
	jQuery.ready.then = readyList.then;
	
	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );
	
	} else {
	
		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );
	
		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		cache: function( owner ) {
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
	
				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				return this.get( owner, key );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key !== undefined ) {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );
	
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnotwhite ) || [] );
				}
	
				i = key.length;
	
				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? JSON.parse( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				this.each( function() {
	
					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHiddenWithinTree = function( elem, el ) {
	
			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
	
			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&
	
				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&
	
				jQuery.css( elem, "display" ) === "none";
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	
	
	var defaultDisplayMap = {};
	
	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];
	
		if ( display ) {
			return display;
		}
	
		temp = doc.body.appendChild( doc.createElement( nodeName ) ),
		display = jQuery.css( temp, "display" );
	
		temp.parentNode.removeChild( temp );
	
		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;
	
		return display;
	}
	
	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;
	
		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			display = elem.style.display;
			if ( show ) {
	
				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";
	
					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}
	
		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}
	
		return elements;
	}
	
	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;
	
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( nativeEvent ) {
	
			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );
	
			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
	
			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}
	
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support: IE <=9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox <=42
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,
	
				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},
	
				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},
	
		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;
	
			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,
	
		which: function( event ) {
			var button = event.button;
	
			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}
	
			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				return ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}
	
			return event.which;
		}
	}, jQuery.event.addProp );
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
	
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
	
		/* eslint-disable max-len */
	
		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
	
		/* eslint-enable */
	
		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {
	
			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}
	
		return elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	
	
	( function() {
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
	
			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}
	
			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
	
			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
	
			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}
	
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
	
		// Support: IE <=9 only
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
	
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var val,
			valueIsBorderBox = true,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Support: IE <=11 only
		// Running getBoundingClientRect on a disconnected node
		// in IE throws an error.
		if ( elem.getClientRects().length ) {
			val = elem.getBoundingClientRect()[ name ];
		}
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
	
						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	function raf() {
		if ( timerId ) {
			window.requestAnimationFrame( raf );
			jQuery.fx.tick();
		}
	}
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
	
					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}
	
		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}
	
		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {
	
			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {
	
					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}
	
			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {
	
					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {
	
			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}
	
				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}
	
				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}
	
				/* eslint-disable no-loop-func */
	
				anim.done( function() {
	
				/* eslint-enable no-loop-func */
	
					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}
	
			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
	
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		// Go to the end state if fx are off or if document is hidden
		if ( jQuery.fx.off || document.hidden ) {
			opt.duration = 0;
	
		} else {
			opt.duration = typeof opt.duration === "number" ?
				opt.duration : opt.duration in jQuery.fx.speeds ?
					jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
		}
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.requestAnimationFrame ?
				window.requestAnimationFrame( raf ) :
				window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		if ( window.cancelAnimationFrame ) {
			window.cancelAnimationFrame( timerId );
		} else {
			window.clearInterval( timerId );
		}
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();
	
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// Handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
	
						/* eslint-disable no-cond-assign */
	
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
	
						/* eslint-enable no-cond-assign */
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {
	
				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;
	
				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": JSON.parse,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// Request state (becomes false upon send and true upon completion)
				completed,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// uncached part of the url
				uncached,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {
	
								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR );
	
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in uncached url if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rts, "" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}
	
				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;
	
			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}
	
					// Propagate others as results
					done( -1, e );
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Ignore repeat invocations
				if ( completed ) {
					return;
				}
	
				completed = true;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );
	
	
	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};
	
	
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
	
		var base, parsed, scripts;
	
		if ( !context ) {
	
			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );
	
				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}
	
		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
	
			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win, rect, doc,
				elem = this[ 0 ];
	
			if ( !elem ) {
				return;
			}
	
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}
	
			rect = elem.getBoundingClientRect();
	
			// Make sure element is not hidden (display: none)
			if ( rect.width || rect.height ) {
				doc = elem.ownerDocument;
				win = getWindow( doc );
				docElem = doc.documentElement;
	
				return {
					top: rect.top + win.pageYOffset - docElem.clientTop,
					left: rect.left + win.pageXOffset - docElem.clientLeft
				};
			}
	
			// Return zeros for disconnected and hidden elements (gh-2310)
			return rect;
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );
	
	jQuery.parseJSON = JSON.parse;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	
	return jQuery;
	} );


/***/ },
/* 4 */
/*!************************************************!*\
  !*** ./~/leancloud-storage/dist/node/index.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*!
	 * LeanCloud JavaScript SDK
	 * https://leancloud.cn
	 *
	 * Copyright 2016 LeanCloud.cn, Inc.
	 * The LeanCloud JavaScript SDK is freely distributable under the MIT license.
	 */
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var AV = module.exports = __webpack_require__(/*! ./av */ 5);
	
	AV._ = __webpack_require__(/*! underscore */ 6);
	AV.version = __webpack_require__(/*! ./version */ 7);
	AV.Promise = __webpack_require__(/*! ./promise */ 8);
	AV.localStorage = __webpack_require__(/*! ./localstorage */ 10);
	AV.Cache = __webpack_require__(/*! ./cache */ 14);
	
	// All internal configuration items
	AV._config = AV._config || {};
	
	__webpack_require__(/*! ./utils */ 15).init(AV);
	
	__webpack_require__(/*! ./event */ 30)(AV);
	__webpack_require__(/*! ./geopoint */ 31)(AV);
	__webpack_require__(/*! ./acl */ 32)(AV);
	__webpack_require__(/*! ./op */ 33)(AV);
	__webpack_require__(/*! ./relation */ 34)(AV);
	__webpack_require__(/*! ./file */ 35)(AV);
	__webpack_require__(/*! ./object */ 40)(AV);
	__webpack_require__(/*! ./role */ 41)(AV);
	__webpack_require__(/*! ./user */ 42)(AV);
	__webpack_require__(/*! ./query */ 43)(AV);
	__webpack_require__(/*! ./cloudfunction */ 44)(AV);
	__webpack_require__(/*! ./push */ 45)(AV);
	__webpack_require__(/*! ./status */ 46)(AV);
	__webpack_require__(/*! ./search */ 47)(AV);
	__webpack_require__(/*! ./insight */ 48)(AV);
	
	// TODO: deprecated AV.Error()
	var AVError = __webpack_require__(/*! ./error */ 29);
	/**
	 * @deprecated AV.Error() is deprecated, and will be removed in next release.
	 */
	AV.Error = function () {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	
	  console.warn('AV.Error() is deprecated, and will be removed in next release.');
	  return new (Function.prototype.bind.apply(AVError, [null].concat(args)))();
	};

/***/ },
/* 5 */
/*!*********************************************!*\
  !*** ./~/leancloud-storage/dist/node/av.js ***!
  \*********************************************/
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	module.exports = global.AV || {};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 6 */
/*!********************************************************!*\
  !*** ./~/leancloud-storage/~/underscore/underscore.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.
	
	(function() {
	
	  // Baseline setup
	  // --------------
	
	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;
	
	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;
	
	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;
	
	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};
	
	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };
	
	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }
	
	  // Current version.
	  _.VERSION = '1.8.3';
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };
	
	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };
	
	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };
	
	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };
	
	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };
	
	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };
	
	  // Collection Functions
	  // --------------------
	
	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };
	
	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };
	
	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }
	
	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);
	
	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);
	
	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };
	
	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };
	
	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };
	
	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };
	
	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };
	
	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };
	
	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };
	
	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };
	
	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };
	
	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };
	
	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };
	
	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };
	
	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };
	
	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };
	
	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };
	
	  // Array Functions
	  // ---------------
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };
	
	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };
	
	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };
	
	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };
	
	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };
	
	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };
	
	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);
	
	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };
	
	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }
	
	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };
	
	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  };
	
	  // Function (ahem) Functions
	  // ------------------
	
	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };
	
	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };
	
	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;
	
	    var later = function() {
	      var last = _.now() - timestamp;
	
	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };
	
	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }
	
	      return result;
	    };
	  };
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };
	
	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };
	
	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };
	
	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);
	
	  // Object Functions
	  // ----------------
	
	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	
	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;
	
	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
	
	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }
	
	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };
	
	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };
	
	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };
	
	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };
	
	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };
	
	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);
	
	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);
	
	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };
	
	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };
	
	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };
	
	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);
	
	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };
	
	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };
	
	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };
	
	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };
	
	
	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }
	
	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;
	
	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };
	
	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };
	
	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };
	
	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };
	
	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });
	
	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }
	
	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };
	
	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };
	
	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };
	
	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };
	
	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };
	
	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };
	
	  // Utility Functions
	  // -----------------
	
	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };
	
	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };
	
	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };
	
	  _.noop = function(){};
	
	  _.property = property;
	
	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };
	
	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };
	
	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };
	
	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);
	
	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);
	
	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };
	
	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";
	
	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  };
	
	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };
	
	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.
	
	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };
	
	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };
	
	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);
	
	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });
	
	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });
	
	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
	
	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };
	
	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 7 */
/*!**************************************************!*\
  !*** ./~/leancloud-storage/dist/node/version.js ***!
  \**************************************************/
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	module.exports = 'js1.5.0';

/***/ },
/* 8 */
/*!**************************************************!*\
  !*** ./~/leancloud-storage/dist/node/promise.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	'use strict';
	
	var _ = __webpack_require__(/*! underscore */ 6);
	
	var Promise = module.exports = function Promise(fn) {
	  /**
	   * A Promise is returned by async methods as a hook to provide callbacks to be
	   * called when the async task is fulfilled.
	   *
	   * <p>Typical usage would be like:<pre>
	   *    query.find().then(function(results) {
	   *      results[0].set("foo", "bar");
	   *      return results[0].saveAsync();
	   *    }).then(function(result) {
	   *      console.log("Updated " + result.id);
	   *    });
	   * </pre></p>
	   * <p>Another example:<pre>
	   *    var promise = new AV.Promise(function(resolve, reject) {
	   *      resolve(42);
	   *    });
	   *    promise.then(function(value){
	   *      console.log(value);
	   *    }).catch(function(error){
	   *      console.error(error);
	   *    });
	   * </pre></p>
	   * @param {Function} fn An optional function with two arguments resolve
	   *                   and reject.The first argument fulfills the promise,
	   *                   the second argument rejects it. We can call these
	    *                  functions, once our operation is completed.
	   * @see AV.Promise.prototype.then
	   * @class
	   */
	  this._resolved = false;
	  this._rejected = false;
	  this._resolvedCallbacks = [];
	  this._rejectedCallbacks = [];
	
	  this.doResolve(fn);
	};
	
	var _isNullOrUndefined = function _isNullOrUndefined(x) {
	  return _.isNull(x) || _.isUndefined(x);
	};
	
	var _isNode = false;
	
	if (typeof process !== "undefined" && process.versions && process.versions.node) {
	  _isNode = true;
	}
	
	_.extend(Promise, /** @lends AV.Promise */{
	
	  _isPromisesAPlusCompliant: !_isNode,
	  _debugError: false,
	
	  setPromisesAPlusCompliant: function setPromisesAPlusCompliant(isCompliant) {
	    Promise._isPromisesAPlusCompliant = isCompliant;
	  },
	
	  setDebugError: function setDebugError(enable) {
	    Promise._debugError = enable;
	  },
	
	  /**
	   * Returns true iff the given object fulfils the Promise interface.
	   * @return {Boolean}
	   */
	  is: function is(promise) {
	    return promise && promise.then && _.isFunction(promise.then);
	  },
	
	  /**
	   * Returns a new promise that is resolved with a given value.
	   * @return {AV.Promise} the new promise.
	   */
	  as: function as() {
	    var promise = new Promise();
	    if (arguments[0] && _.isFunction(arguments[0].then)) {
	      arguments[0].then(function (data) {
	        promise.resolve.call(promise, data);
	      }, function (err) {
	        promise.reject.call(promise, err);
	      });
	    } else {
	      promise.resolve.apply(promise, arguments);
	    }
	    return promise;
	  },
	
	  /**
	   * Returns a new promise that is rejected with a given error.
	   * @return {AV.Promise} the new promise.
	   */
	  error: function error() {
	    var promise = new Promise();
	    promise.reject.apply(promise, arguments);
	    return promise;
	  },
	
	  /**
	   * Returns a new promise that is fulfilled when all of the input promises
	   * are resolved. If any promise in the list fails, then the returned promise
	   * will fail with the last error. If they all succeed, then the returned
	   * promise will succeed, with the results being the results of all the input
	   * promises. For example: <pre>
	   *   var p1 = AV.Promise.as(1);
	   *   var p2 = AV.Promise.as(2);
	   *   var p3 = AV.Promise.as(3);
	   *
	   *   AV.Promise.when(p1, p2, p3).then(function(r1, r2, r3) {
	   *     console.log(r1);  // prints 1
	   *     console.log(r2);  // prints 2
	   *     console.log(r3);  // prints 3
	   *   });</pre>
	   *
	   * The input promises can also be specified as an array: <pre>
	   *   var promises = [p1, p2, p3];
	   *   AV.Promise.when(promises).then(function(r1, r2, r3) {
	   *     console.log(r1);  // prints 1
	   *     console.log(r2);  // prints 2
	   *     console.log(r3);  // prints 3
	   *   });
	   * </pre>
	   * @param {Array} promises a list of promises to wait for.
	   * @return {AV.Promise} the new promise.
	   */
	  when: function when(promises) {
	    // Allow passing in Promises as separate arguments instead of an Array.
	    var objects;
	    if (promises && _isNullOrUndefined(promises.length)) {
	      objects = arguments;
	    } else {
	      objects = promises;
	    }
	    var isAll = _.last(arguments);
	    isAll = _.isBoolean(isAll) ? isAll : false;
	
	    var total = objects.length;
	    var hadError = false;
	    var results = [];
	    var errors = [];
	    results.length = objects.length;
	    errors.length = objects.length;
	
	    if (total === 0) {
	      if (isAll) {
	        return Promise.as.call(this, results);
	      } else {
	        return Promise.as.apply(this, results);
	      }
	    }
	
	    var promise = new Promise();
	
	    var resolveOne = function resolveOne(i) {
	      total = total - 1;
	      if (hadError && !promise._rejected && isAll) {
	        promise.reject.call(promise, errors[i]);
	        return;
	      }
	
	      if (total === 0) {
	        if (hadError && !promise._rejected) {
	          promise.reject.call(promise, errors);
	        } else {
	          if (isAll) {
	            if (!promise._rejected) {
	              promise.resolve.call(promise, results);
	            } else {
	              //It's rejected already, so we ignore it.
	            }
	          } else {
	            promise.resolve.apply(promise, results);
	          }
	        }
	      }
	    };
	
	    _.each(objects, function (object, i) {
	      if (Promise.is(object)) {
	        object.then(function (result) {
	          results[i] = result;
	          resolveOne(i);
	        }, function (error) {
	          errors[i] = error;
	          hadError = true;
	          resolveOne(i);
	        });
	      } else {
	        results[i] = object;
	        resolveOne(i);
	      }
	    });
	
	    return promise;
	  },
	
	  /**
	   * Returns a promise that resolves or rejects as soon as one
	   * of the promises in the iterable resolves or rejects, with
	   * the value or reason from that promise.Returns a new promise
	   * that is fulfilled when one of the input promises.
	   * For example: <pre>
	   *   var p1 = AV.Promise.as(1);
	   *   var p2 = AV.Promise.as(2);
	   *   var p3 = AV.Promise.as(3);
	   *
	   *   AV.Promise.race(p1, p2, p3).then(function(result) {
	   *     console.log(result);  // prints 1
	   *   });</pre>
	   *
	   * The input promises can also be specified as an array: <pre>
	   *   var promises = [p1, p2, p3];
	   *   AV.Promise.when(promises).then(function(result) {
	   *     console.log(result);  // prints 1
	   *   });
	   * </pre>
	   * @param {Array} promises a list of promises to wait for.
	   * @return {AV.Promise} the new promise.
	   */
	  race: function race(promises) {
	    // Allow passing in Promises as separate arguments instead of an Array.
	    var objects;
	    if (promises && _isNullOrUndefined(promises.length)) {
	      objects = arguments;
	    } else {
	      objects = promises;
	    }
	
	    var total = objects.length;
	    var hadError = false;
	    var results = [];
	    var errors = [];
	
	    results.length = errors.length = objects.length;
	
	    if (total === 0) {
	      return Promise.as.call(this);
	    }
	
	    var promise = new Promise();
	
	    var resolveOne = function resolveOne(i) {
	      if (!promise._resolved && !promise._rejected) {
	        if (hadError) {
	          promise.reject.call(promise, errors[i]);
	        } else {
	          promise.resolve.call(promise, results[i]);
	        }
	      }
	    };
	
	    _.each(objects, function (object, i) {
	      if (Promise.is(object)) {
	        object.then(function (result) {
	          results[i] = result;
	          resolveOne(i);
	        }, function (error) {
	          errors[i] = error;
	          hadError = true;
	          resolveOne(i);
	        });
	      } else {
	        results[i] = object;
	        resolveOne(i);
	      }
	    });
	
	    return promise;
	  },
	
	  /**
	   * Runs the given asyncFunction repeatedly, as long as the predicate
	   * function returns a truthy value. Stops repeating if asyncFunction returns
	   * a rejected promise.
	   * @param {Function} predicate should return false when ready to stop.
	   * @param {Function} asyncFunction should return a Promise.
	   */
	  _continueWhile: function _continueWhile(predicate, asyncFunction) {
	    if (predicate()) {
	      return asyncFunction().then(function () {
	        return Promise._continueWhile(predicate, asyncFunction);
	      });
	    }
	    return Promise.as();
	  }
	});
	
	/**
	 * Just like AV.Promise.when, but it calls resolveCallbck function
	 * with one results array and calls rejectCallback function as soon as any one
	 * of the input promises rejects.
	 * @see AV.Promise.when
	 */
	Promise.all = function (promises) {
	  return Promise.when(promises, true);
	};
	
	_.extend(Promise.prototype, /** @lends AV.Promise.prototype */{
	
	  /**
	   * Marks this promise as fulfilled, firing any callbacks waiting on it.
	   * @param {Object} result the result to pass to the callbacks.
	   */
	  resolve: function resolve(result) {
	    if (this._resolved || this._rejected) {
	      throw new Error("A promise was resolved even though it had already been " + (this._resolved ? "resolved" : "rejected") + ".");
	    }
	    this._resolved = true;
	    this._result = arguments;
	    var results = arguments;
	    _.each(this._resolvedCallbacks, function (resolvedCallback) {
	      resolvedCallback.apply(this, results);
	    });
	    this._resolvedCallbacks = [];
	    this._rejectedCallbacks = [];
	  },
	
	  doResolve: function doResolve(fn) {
	    if (!fn) return;
	    var done = false;
	    var self = this;
	    try {
	      fn(function (value) {
	        if (done) return;
	        done = true;
	        self.resolve.call(self, value);
	      }, function (reason) {
	        if (done) return;
	        done = true;
	        self.reject.call(self, reason);
	      });
	    } catch (ex) {
	      if (done) return;
	      done = true;
	      self.reject.call(self, ex);
	    }
	  },
	
	  /**
	   * Marks this promise as fulfilled, firing any callbacks waiting on it.
	   * @param {Object} error the error to pass to the callbacks.
	   */
	  reject: function reject(error) {
	    if (this._resolved || this._rejected) {
	      throw new Promise("A promise was rejected even though it had already been " + (this._resolved ? "resolved" : "rejected") + ".");
	    }
	    this._rejected = true;
	    this._error = error;
	    _.each(this._rejectedCallbacks, function (rejectedCallback) {
	      rejectedCallback(error);
	    });
	    this._resolvedCallbacks = [];
	    this._rejectedCallbacks = [];
	  },
	
	  /**
	   * Adds callbacks to be called when this promise is fulfilled. Returns a new
	   * Promise that will be fulfilled when the callback is complete. It allows
	   * chaining. If the callback itself returns a Promise, then the one returned
	   * by "then" will not be fulfilled until that one returned by the callback
	   * is fulfilled.
	   * @param {Function} resolvedCallback Function that is called when this
	   * Promise is resolved. Once the callback is complete, then the Promise
	   * returned by "then" will also be fulfilled.
	   * @param {Function} rejectedCallback Function that is called when this
	   * Promise is rejected with an error. Once the callback is complete, then
	   * the promise returned by "then" with be resolved successfully. If
	   * rejectedCallback is null, or it returns a rejected Promise, then the
	   * Promise returned by "then" will be rejected with that error.
	   * @return {AV.Promise} A new Promise that will be fulfilled after this
	   * Promise is fulfilled and either callback has completed. If the callback
	   * returned a Promise, then this Promise will not be fulfilled until that
	   * one is.
	   */
	  then: function then(resolvedCallback, rejectedCallback) {
	    var promise = new Promise();
	
	    var wrappedResolvedCallback = function wrappedResolvedCallback() {
	      var result = arguments;
	      if (resolvedCallback) {
	        if (Promise._isPromisesAPlusCompliant) {
	          try {
	            result = [resolvedCallback.apply(this, result)];
	          } catch (e) {
	            if (Promise._debugError && e) {
	              console.error('Error occurred in promise resolve callback.', e.stack || e);
	            }
	            result = [Promise.error(e)];
	          }
	        } else {
	          result = [resolvedCallback.apply(this, result)];
	        }
	      }
	      if (result.length === 1 && Promise.is(result[0])) {
	        result[0].then(function () {
	          promise.resolve.apply(promise, arguments);
	        }, function (error) {
	          promise.reject(error);
	        });
	      } else {
	        promise.resolve.apply(promise, result);
	      }
	    };
	
	    var wrappedRejectedCallback = function wrappedRejectedCallback(error) {
	      var result = [];
	      if (rejectedCallback) {
	        if (Promise._isPromisesAPlusCompliant) {
	          try {
	            result = [rejectedCallback(error)];
	          } catch (e) {
	            if (Promise._debugError && e) {
	              console.error('Error occurred in promise reject callback.', e.stack || e);
	            }
	            result = [Promise.error(e)];
	          }
	        } else {
	          result = [rejectedCallback(error)];
	        }
	        if (result.length === 1 && Promise.is(result[0])) {
	          result[0].then(function () {
	            promise.resolve.apply(promise, arguments);
	          }, function (error) {
	            promise.reject(error);
	          });
	        } else {
	          if (Promise._isPromisesAPlusCompliant) {
	            promise.resolve.apply(promise, result);
	          } else {
	            promise.reject(result[0]);
	          }
	        }
	      } else {
	        promise.reject(error);
	      }
	    };
	
	    var runLater = function runLater(func) {
	      func.call();
	    };
	    if (Promise._isPromisesAPlusCompliant) {
	      if (typeof window !== 'undefined' && _.isFunction(window.setImmediate)) {
	        runLater = function runLater(func) {
	          window.setImmediate(func);
	        };
	      } else if (typeof process !== 'undefined' && process.nextTick) {
	        runLater = function runLater(func) {
	          process.nextTick(func);
	        };
	      } else if (typeof setTimeout !== 'undefined' && _.isFunction(setTimeout)) {
	        runLater = function runLater(func) {
	          setTimeout(func, 0);
	        };
	      }
	    }
	
	    var self = this;
	    if (this._resolved) {
	      runLater(function () {
	        wrappedResolvedCallback.apply(self, self._result);
	      });
	    } else if (this._rejected) {
	      runLater(function () {
	        wrappedRejectedCallback.apply(self, [self._error]);
	      });
	    } else {
	      this._resolvedCallbacks.push(wrappedResolvedCallback);
	      this._rejectedCallbacks.push(wrappedRejectedCallback);
	    }
	
	    return promise;
	  },
	
	  /**
	   * Add handlers to be called when the Promise object is rejected.
	   *
	   * @param {Function} rejectedCallback Function that is called when this
	   *                   Promise is rejected with an error.
	   * @return {AV.Promise} A new Promise that will be fulfilled after this
	   *                   Promise is fulfilled and either callback has completed. If the callback
	   * returned a Promise, then this Promise will not be fulfilled until that
	   *                   one is.
	   * @function
	   */
	  catch: function _catch(onRejected) {
	    return this.then(undefined, onRejected);
	  },
	
	  /**
	   * Add handlers to be called when the promise
	   * is either resolved or rejected
	   */
	  always: function always(callback) {
	    return this.then(callback, callback);
	  },
	
	  /**
	   * Add handlers to be called when the Promise object is resolved
	   */
	  done: function done(callback) {
	    return this.then(callback);
	  },
	
	  /**
	   * Add handlers to be called when the Promise object is rejected
	   */
	  fail: function fail(callback) {
	    return this.then(null, callback);
	  },
	
	  /**
	   * Run the given callbacks after this promise is fulfilled.
	   * @param optionsOrCallback {} A Backbone-style options callback, or a
	   * callback function. If this is an options object and contains a "model"
	   * attributes, that will be passed to error callbacks as the first argument.
	   * @param model {} If truthy, this will be passed as the first result of
	   * error callbacks. This is for Backbone-compatability.
	   * @return {AV.Promise} A promise that will be resolved after the
	   * callbacks are run, with the same result as this.
	   */
	  _thenRunCallbacks: function _thenRunCallbacks(optionsOrCallback, model) {
	    var options;
	    if (_.isFunction(optionsOrCallback)) {
	      var callback = optionsOrCallback;
	      options = {
	        success: function success(result) {
	          callback(result, null);
	        },
	        error: function error(_error) {
	          callback(null, _error);
	        }
	      };
	    } else {
	      options = _.clone(optionsOrCallback);
	    }
	    options = options || {};
	
	    return this.then(function (result) {
	      if (options.success) {
	        options.success.apply(this, arguments);
	      } else if (model) {
	        // When there's no callback, a sync event should be triggered.
	        model.trigger('sync', model, result, options);
	      }
	      return Promise.as.apply(Promise, arguments);
	    }, function (error) {
	      if (options.error) {
	        if (!_.isUndefined(model)) {
	          options.error(model, error);
	        } else {
	          options.error(error);
	        }
	      } else if (model) {
	        // When there's no error callback, an error event should be triggered.
	        model.trigger('error', model, error, options);
	      }
	      // By explicitly returning a rejected Promise, this will work with
	      // either jQuery or Promises/A semantics.
	      return Promise.error(error);
	    });
	  },
	
	  /**
	   * Adds a callback function that should be called regardless of whether
	   * this promise failed or succeeded. The callback will be given either the
	   * array of results for its first argument, or the error as its second,
	   * depending on whether this Promise was rejected or resolved. Returns a
	   * new Promise, like "then" would.
	   * @param {Function} continuation the callback.
	   */
	  _continueWith: function _continueWith(continuation) {
	    return this.then(function () {
	      return continuation(arguments, null);
	    }, function (error) {
	      return continuation(null, error);
	    });
	  }
	
	});
	
	/**
	 * Alias of AV.Promise.prototype.always
	 * @function
	 * @see AV.Promise#always
	 */
	Promise.prototype.finally = Promise.prototype.always;
	
	/**
	 * Alias of AV.Promise.prototype.done
	 * @function
	 * @see AV.Promise#done
	 */
	Promise.prototype.try = Promise.prototype.done;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 9)))

/***/ },
/* 9 */
/*!**********************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/process/browser.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 10 */
/*!*******************************************************!*\
  !*** ./~/leancloud-storage/dist/node/localstorage.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	'use strict';
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var Promise = __webpack_require__(/*! ./promise */ 8);
	var localStorage = __webpack_require__(/*! ./browserify-wrapper/localStorage */ 11);
	
	var syncApiNames = ['getItem', 'setItem', 'removeItem', 'clear'];
	
	if (!localStorage.async) {
	  // wrap sync apis with async ones.
	  _(syncApiNames).each(function (apiName) {
	    if (typeof localStorage[apiName] === 'function') {
	      localStorage[apiName + 'Async'] = function () {
	        return Promise.as(localStorage[apiName].apply(localStorage, arguments));
	      };
	    }
	  });
	} else {
	  _(syncApiNames).each(function (apiName) {
	    if (typeof localStorage[apiName] !== 'function') {
	      localStorage[apiName] = function () {
	        var error = new Error('Synchronous API [' + apiName + '] is not available in this runtime.');
	        error.code = 'SYNC_API_NOT_AVAILABLE';
	        throw error;
	      };
	    }
	  });
	}
	
	module.exports = localStorage;

/***/ },
/* 11 */
/*!**********************************************************************************!*\
  !*** ./~/leancloud-storage/dist/node/browserify-wrapper/localstorage-browser.js ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	'use strict';
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var Promise = __webpack_require__(/*! ../promise */ 8);
	
	// interface Storage {
	//   readonly attribute boolean async;
	//   string getItem(string key);
	//   void setItem(string key, string value);
	//   void removeItem(string key);
	//   void clear();
	//   Promise getItemAsync(string key);
	//   Promise setItemAsync(string key, string value);
	//   Promise removeItemAsync(string key);
	//   Promise clearAsync();
	// }
	var Storage = {};
	var apiNames = ['getItem', 'setItem', 'removeItem', 'clear'];
	
	if (global.localStorage) {
	
	  var localStorage = global.localStorage;
	
	  try {
	    var testKey = '__storejs__';
	    localStorage.setItem(testKey, testKey);
	    if (localStorage.getItem(testKey) != testKey) {
	      throw new Error();
	    }
	    localStorage.removeItem(testKey);
	  } catch (e) {
	    localStorage = __webpack_require__(/*! localstorage-memory */ 12);
	  }
	
	  // in browser, `localStorage.async = false` will excute `localStorage.setItem('async', false)`
	  _(apiNames).each(function (apiName) {
	    Storage[apiName] = function () {
	      return global.localStorage[apiName].apply(global.localStorage, arguments);
	    };
	  });
	  Storage.async = false;
	} else {
	  var AsyncStorage = __webpack_require__(/*! react-native */ 13).AsyncStorage;
	  _(apiNames).each(function (apiName) {
	    Storage[apiName + 'Async'] = function () {
	      return Promise.as(AsyncStorage[apiName].apply(AsyncStorage, arguments));
	    };
	  });
	  Storage.async = true;
	}
	
	module.exports = Storage;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 12 */
/*!******************************************************************************!*\
  !*** ./~/leancloud-storage/~/localstorage-memory/lib/localstorage-memory.js ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	(function(root) {
	  var localStorageMemory = {};
	  var cache = {};
	
	  /**
	   * number of stored items.
	   */
	  localStorageMemory.length = 0;
	
	  /**
	   * returns item for passed key, or null
	   *
	   * @para {String} key
	   *       name of item to be returned
	   * @returns {String|null}
	   */
	  localStorageMemory.getItem = function(key) {
	    return cache[key] || null;
	  };
	
	  /**
	   * sets item for key to passed value, as String
	   *
	   * @para {String} key
	   *       name of item to be set
	   * @para {String} value
	   *       value, will always be turned into a String
	   * @returns {undefined}
	   */
	  localStorageMemory.setItem = function(key, value) {
	    if (typeof value === 'undefined') {
	      localStorageMemory.removeItem(key);
	    } else {
	      if (!(cache.hasOwnProperty(key))) {
	        localStorageMemory.length++;
	      }
	
	      cache[key] = '' + value;
	    }
	  };
	
	  /**
	   * removes item for passed key
	   *
	   * @para {String} key
	   *       name of item to be removed
	   * @returns {undefined}
	   */
	  localStorageMemory.removeItem = function(key) {
	    if (cache.hasOwnProperty(key)) {
	      delete cache[key];
	      localStorageMemory.length--;
	    }
	  };
	
	  /**
	   * returns name of key at passed index
	   *
	   * @para {Number} index
	   *       Position for key to be returned (starts at 0)
	   * @returns {String|null}
	   */
	  localStorageMemory.key = function(index) {
	    return Object.keys(cache)[index] || null;
	  };
	
	  /**
	   * removes all stored items and sets length to 0
	   *
	   * @returns {undefined}
	   */
	  localStorageMemory.clear = function() {
	    cache = {};
	    localStorageMemory.length = 0;
	  };
	
	  if (true) {
	    module.exports = localStorageMemory;
	  } else {
	    root.localStorageMemory = localStorageMemory;
	  }
	})(this);


/***/ },
/* 13 */
/*!******************************!*\
  !*** react-native (ignored) ***!
  \******************************/
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 14 */
/*!************************************************!*\
  !*** ./~/leancloud-storage/dist/node/cache.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var storage = __webpack_require__(/*! ./localstorage */ 10);
	var AV = __webpack_require__(/*! ./av */ 5);
	
	var removeAsync = exports.removeAsync = storage.removeItemAsync.bind(storage);
	
	var getCacheData = function getCacheData(cacheData, key) {
	  try {
	    cacheData = JSON.parse(cacheData);
	  } catch (e) {
	    return null;
	  }
	  if (cacheData) {
	    var expired = cacheData.expiredAt && cacheData.expiredAt < Date.now();
	    if (!expired) {
	      return cacheData.value;
	    }
	    return removeAsync(key).then(function () {
	      return null;
	    });
	  }
	  return null;
	};
	
	exports.getAsync = function (key) {
	  key = AV.applicationId + '/' + key;
	  return storage.getItemAsync(key).then(function (cache) {
	    return getCacheData(cache, key);
	  });
	};
	
	exports.setAsync = function (key, value, ttl) {
	  var cache = { value: value };
	  if (typeof ttl === 'number') {
	    cache.expiredAt = Date.now() + ttl;
	  }
	  return storage.setItemAsync(AV.applicationId + '/' + key, JSON.stringify(cache));
	};

/***/ },
/* 15 */
/*!************************************************!*\
  !*** ./~/leancloud-storage/dist/node/utils.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var request = __webpack_require__(/*! ./request */ 16);
	
	// Helper function to check null or undefined.
	var isNullOrUndefined = function isNullOrUndefined(x) {
	  return _.isNull(x) || _.isUndefined(x);
	};
	
	var ensureArray = function ensureArray(target) {
	  if (_.isArray(target)) {
	    return target;
	  }
	  if (target === undefined || target === null) {
	    return [];
	  }
	  return [target];
	};
	
	var init = function init(AV) {
	  // 挂载一些配置
	  var AVConfig = AV._config;
	
	  _.extend(AVConfig, {
	
	    // 服务器节点地区，默认中国大陆
	    region: 'cn',
	
	    // 服务器的 URL，默认初始化时被设置为大陆节点地址
	    APIServerURL: AVConfig.APIServerURL || '',
	
	    // 当前是否为 nodejs 环境
	    isNode: false,
	
	    // 禁用 currentUser，通常用于多用户环境
	    disableCurrentUser: false,
	
	    // Internal config can modifie the UserAgent
	    userAgent: null,
	
	    // set production environment or test environment
	    // 1: production environment, 0: test environment, null: default environment
	    applicationProduction: null
	  });
	
	  /**
	   * Contains all AV API classes and functions.
	   * @name AV
	   * @namespace
	   *
	   * Contains all AV API classes and functions.
	   */
	
	  // Check whether we are running in Node.js.
	  if (typeof process !== 'undefined' && process.versions && process.versions.node) {
	    AVConfig.isNode = true;
	  }
	
	  // Helpers
	  // -------
	
	  // Shared empty constructor function to aid in prototype-chain creation.
	  var EmptyConstructor = function EmptyConstructor() {};
	
	  // Helper function to correctly set up the prototype chain, for subclasses.
	  // Similar to `goog.inherits`, but uses a hash of prototype properties and
	  // class properties to be extended.
	  var inherits = function inherits(parent, protoProps, staticProps) {
	    var child;
	
	    // The constructor function for the new subclass is either defined by you
	    // (the "constructor" property in your `extend` definition), or defaulted
	    // by us to simply call the parent's constructor.
	    if (protoProps && protoProps.hasOwnProperty('constructor')) {
	      child = protoProps.constructor;
	    } else {
	      /** @ignore */
	      child = function child() {
	        parent.apply(this, arguments);
	      };
	    }
	
	    // Inherit class (static) properties from parent.
	    _.extend(child, parent);
	
	    // Set the prototype chain to inherit from `parent`, without calling
	    // `parent`'s constructor function.
	    EmptyConstructor.prototype = parent.prototype;
	    child.prototype = new EmptyConstructor();
	
	    // Add prototype properties (instance properties) to the subclass,
	    // if supplied.
	    if (protoProps) {
	      _.extend(child.prototype, protoProps);
	    }
	
	    // Add static properties to the constructor function, if supplied.
	    if (staticProps) {
	      _.extend(child, staticProps);
	    }
	
	    // Correctly set child's `prototype.constructor`.
	    child.prototype.constructor = child;
	
	    // Set a convenience property in case the parent's prototype is
	    // needed later.
	    child.__super__ = parent.prototype;
	
	    return child;
	  };
	
	  /**
	   * Call this method first to set up authentication tokens for AV.
	   * This method is for AV's own private use.
	   * @param {String} applicationId Your AV Application ID.
	   * @param {String} applicationKey Your AV Application Key
	   */
	  var initialize = function initialize(appId, appKey, masterKey) {
	    if (AV.applicationId && appId !== AV.applicationId && appKey !== AV.applicationKey && masterKey !== AV.masterKey) {
	      console.warn('LeanCloud SDK is already initialized, please do not reinitialize it.');
	    }
	    AV.applicationId = appId;
	    AV.applicationKey = appKey;
	    AV.masterKey = masterKey;
	    AV._useMasterKey = false;
	  };
	
	  /**
	    * Call this method first to set up your authentication tokens for AV.
	    * You can get your app keys from the LeanCloud dashboard on http://leancloud.cn .
	    * @function AV.init
	    * @param args initialize options.
	    * @param args.appId application id
	    * @param args.appKey application key
	    * @param args.masterKey application master key
	  */
	
	  AV.init = function () {
	    var masterKeyWarn = function masterKeyWarn() {
	      console.warn('MasterKey should not be used in the browser. ' + 'The permissions of MasterKey can be across all the server permissions,' + ' including the setting of ACL .');
	    };
	
	    switch (arguments.length) {
	      case 1:
	        var options = arguments.length <= 0 ? undefined : arguments[0];
	        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	          if (!AVConfig.isNode && options.masterKey) {
	            masterKeyWarn();
	          }
	          initialize(options.appId, options.appKey, options.masterKey);
	          request.setServerUrlByRegion(options.region);
	          AVConfig.disableCurrentUser = options.disableCurrentUser;
	        } else {
	          throw new Error('AV.init(): Parameter is not correct.');
	        }
	        break;
	      // 兼容旧版本的初始化方法
	      case 2:
	      case 3:
	        console.warn('Please use AV.init() to replace AV.initialize(), ' + 'AV.init() need an Object param, like { appId: \'YOUR_APP_ID\', appKey: \'YOUR_APP_KEY\' } . ' + 'Docs: https://leancloud.cn/docs/sdk_setup-js.html');
	        if (!AVConfig.isNode && arguments.length === 3) {
	          masterKeyWarn();
	        }
	        initialize.apply(undefined, arguments);
	        request.setServerUrlByRegion('cn');
	        break;
	    }
	  };
	
	  // If we're running in node.js, allow using the master key.
	  if (AVConfig.isNode) {
	    AV.Cloud = AV.Cloud || {};
	    /**
	     * Switches the LeanCloud SDK to using the Master key.  The Master key grants
	     * priveleged access to the data in LeanCloud and can be used to bypass ACLs and
	     * other restrictions that are applied to the client SDKs.
	     * <p><strong><em>Available in Cloud Code and Node.js only.</em></strong>
	     * </p>
	     */
	    AV.Cloud.useMasterKey = function () {
	      AV._useMasterKey = true;
	    };
	  }
	
	  // 兼容老版本的初始化方法
	  AV.initialize = AV.init;
	
	  /**
	   * Call this method to set production environment variable.
	   * @function AV.setProduction
	   * @param {Boolean} production True is production environment,and
	   *  it's true by default.
	   */
	  AV.setProduction = function (production) {
	    if (!isNullOrUndefined(production)) {
	      AVConfig.applicationProduction = production ? 1 : 0;
	    } else {
	      // change to default value
	      AVConfig.applicationProduction = null;
	    }
	  };
	
	  /**
	   * @deprecated Please use AV.init(), you can set the region of server .
	  **/
	  // TODO: 后续不再暴露此接口
	  AV.useAVCloudCN = function () {
	    request.setServerUrlByRegion('cn');
	    console.warn('Do not use AV.useAVCloudCN. Please use AV.init(), you can set the region of server.');
	  };
	
	  /**
	   * @deprecated Please use AV.init(), you can set the region of server .
	  **/
	  // TODO: 后续不再暴露此接口
	  AV.useAVCloudUS = function () {
	    request.setServerUrlByRegion('us');
	    console.warn('Do not use AV.useAVCloudUS. Please use AV.init(), you can set the region of server.');
	  };
	
	  /**
	   * Returns prefix for localStorage keys used by this instance of AV.
	   * @param {String} path The relative suffix to append to it.
	   *     null or undefined is treated as the empty string.
	   * @return {String} The full key name.
	   */
	  AV._getAVPath = function (path) {
	    if (!AV.applicationId) {
	      throw "You need to call AV.initialize before using AV.";
	    }
	    if (!path) {
	      path = "";
	    }
	    if (!_.isString(path)) {
	      throw "Tried to get a localStorage path that wasn't a String.";
	    }
	    if (path[0] === "/") {
	      path = path.substring(1);
	    }
	    return "AV/" + AV.applicationId + "/" + path;
	  };
	
	  /**
	   * Returns the unique string for this app on this machine.
	   * Gets reset when localStorage is cleared.
	   */
	  AV._installationId = null;
	  AV._getInstallationId = function () {
	    // See if it's cached in RAM.
	    if (AV._installationId) {
	      return AV.Promise.as(AV._installationId);
	    }
	
	    // Try to get it from localStorage.
	    var path = AV._getAVPath("installationId");
	    return AV.localStorage.getItemAsync(path).then(function (_installationId) {
	      AV._installationId = _installationId;
	      if (!AV._installationId) {
	        // It wasn't in localStorage, so create a new one.
	        var hexOctet = function hexOctet() {
	          return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	        };
	        AV._installationId = hexOctet() + hexOctet() + "-" + hexOctet() + "-" + hexOctet() + "-" + hexOctet() + "-" + hexOctet() + hexOctet() + hexOctet();
	        return AV.localStorage.setItemAsync(path, AV._installationId);
	      } else {
	        return _installationId;
	      }
	    });
	  };
	
	  AV._parseDate = function (iso8601) {
	    var regexp = new RegExp("^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,2})" + "T" + "([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})" + "(.([0-9]+))?" + "Z$");
	    var match = regexp.exec(iso8601);
	    if (!match) {
	      return null;
	    }
	
	    var year = match[1] || 0;
	    var month = (match[2] || 1) - 1;
	    var day = match[3] || 0;
	    var hour = match[4] || 0;
	    var minute = match[5] || 0;
	    var second = match[6] || 0;
	    var milli = match[8] || 0;
	
	    return new Date(Date.UTC(year, month, day, hour, minute, second, milli));
	  };
	
	  // TODO: Next version remove
	  AV._ajax = function () {
	    console.warn('AV._ajax is deprecated, and will be removed in next release.');
	    request.ajax.apply(request, arguments);
	  };
	
	  // TODO: Next version remove
	  AV._request = function () {
	    console.warn('AV._request is deprecated, and will be removed in next release.');
	    request.request.apply(request, arguments);
	  };
	
	  // A self-propagating extend function.
	  AV._extend = function (protoProps, classProps) {
	    var child = inherits(this, protoProps, classProps);
	    child.extend = this.extend;
	    return child;
	  };
	
	  // Helper function to get a value from a Backbone object as a property
	  // or as a function.
	  AV._getValue = function (object, prop) {
	    if (!(object && object[prop])) {
	      return null;
	    }
	    return _.isFunction(object[prop]) ? object[prop]() : object[prop];
	  };
	
	  /**
	   * Converts a value in a AV Object into the appropriate representation.
	   * This is the JS equivalent of Java's AV.maybeReferenceAndEncode(Object)
	   * if seenObjects is falsey. Otherwise any AV.Objects not in
	   * seenObjects will be fully embedded rather than encoded
	   * as a pointer.  This array will be used to prevent going into an infinite
	   * loop because we have circular references.  If <seenObjects>
	   * is set, then none of the AV Objects that are serialized can be dirty.
	   */
	  AV._encode = function (value, seenObjects, disallowObjects) {
	    if (value instanceof AV.Object) {
	      if (disallowObjects) {
	        throw "AV.Objects not allowed here";
	      }
	      if (!seenObjects || _.include(seenObjects, value) || !value._hasData) {
	        return value._toPointer();
	      }
	      if (!value.dirty()) {
	        seenObjects = seenObjects.concat(value);
	        return AV._encode(value._toFullJSON(seenObjects), seenObjects, disallowObjects);
	      }
	      throw "Tried to save an object with a pointer to a new, unsaved object.";
	    }
	    if (value instanceof AV.ACL) {
	      return value.toJSON();
	    }
	    if (_.isDate(value)) {
	      return { "__type": "Date", "iso": value.toJSON() };
	    }
	    if (value instanceof AV.GeoPoint) {
	      return value.toJSON();
	    }
	    if (_.isArray(value)) {
	      return _.map(value, function (x) {
	        return AV._encode(x, seenObjects, disallowObjects);
	      });
	    }
	    if (_.isRegExp(value)) {
	      return value.source;
	    }
	    if (value instanceof AV.Relation) {
	      return value.toJSON();
	    }
	    if (value instanceof AV.Op) {
	      return value.toJSON();
	    }
	    if (value instanceof AV.File) {
	      if (!value.url() && !value.id) {
	        throw "Tried to save an object containing an unsaved file.";
	      }
	      return {
	        __type: "File",
	        id: value.id,
	        name: value.name(),
	        url: value.url()
	      };
	    }
	    if (_.isObject(value)) {
	      var output = {};
	      AV._objectEach(value, function (v, k) {
	        output[k] = AV._encode(v, seenObjects, disallowObjects);
	      });
	      return output;
	    }
	    return value;
	  };
	
	  /**
	   * The inverse function of AV._encode.
	   * TODO: make decode not mutate value.
	   */
	  AV._decode = function (key, value) {
	    if (!_.isObject(value)) {
	      return value;
	    }
	    if (_.isArray(value)) {
	      AV._arrayEach(value, function (v, k) {
	        value[k] = AV._decode(k, v);
	      });
	      return value;
	    }
	    if (value instanceof AV.Object) {
	      return value;
	    }
	    if (value instanceof AV.File) {
	      return value;
	    }
	    if (value instanceof AV.Op) {
	      return value;
	    }
	    if (value.__op) {
	      return AV.Op._decode(value);
	    }
	    var className;
	    if (value.__type === "Pointer") {
	      className = value.className;
	      var pointer = AV.Object._create(className);
	      if (Object.keys(value).length > 3) {
	        delete value.__type;
	        delete value.className;
	        pointer._finishFetch(value, true);
	      } else {
	        pointer._finishFetch({ objectId: value.objectId }, false);
	      }
	      return pointer;
	    }
	    if (value.__type === "Object") {
	      // It's an Object included in a query result.
	      className = value.className;
	      delete value.__type;
	      delete value.className;
	      var object = AV.Object._create(className);
	      object._finishFetch(value, true);
	      return object;
	    }
	    if (value.__type === "Date") {
	      return AV._parseDate(value.iso);
	    }
	    if (value.__type === "GeoPoint") {
	      return new AV.GeoPoint({
	        latitude: value.latitude,
	        longitude: value.longitude
	      });
	    }
	    if (key === "ACL") {
	      if (value instanceof AV.ACL) {
	        return value;
	      }
	      return new AV.ACL(value);
	    }
	    if (value.__type === "Relation") {
	      var relation = new AV.Relation(null, key);
	      relation.targetClassName = value.className;
	      return relation;
	    }
	    if (value.__type === 'File') {
	      var file = new AV.File(value.name);
	      file.attributes.metaData = value.metaData || {};
	      file.attributes.url = value.url;
	      file.id = value.objectId;
	      return file;
	    }
	    AV._objectEach(value, function (v, k) {
	      value[k] = AV._decode(k, v);
	    });
	    return value;
	  };
	
	  AV._encodeObjectOrArray = function (value) {
	    var encodeAVObject = function encodeAVObject(object) {
	      if (object && object._toFullJSON) {
	        object = object._toFullJSON([]);
	      }
	
	      return _.mapObject(object, function (value) {
	        return AV._encode(value, []);
	      });
	    };
	
	    if (_.isArray(value)) {
	      return value.map(function (object) {
	        return encodeAVObject(object);
	      });
	    } else {
	      return encodeAVObject(value);
	    }
	  };
	
	  AV._arrayEach = _.each;
	
	  /**
	   * Does a deep traversal of every item in object, calling func on every one.
	   * @param {Object} object The object or array to traverse deeply.
	   * @param {Function} func The function to call for every item. It will
	   *     be passed the item as an argument. If it returns a truthy value, that
	   *     value will replace the item in its parent container.
	   * @returns {} the result of calling func on the top-level object itself.
	   */
	  AV._traverse = function (object, func, seen) {
	    if (object instanceof AV.Object) {
	      seen = seen || [];
	      if (_.indexOf(seen, object) >= 0) {
	        // We've already visited this object in this call.
	        return;
	      }
	      seen.push(object);
	      AV._traverse(object.attributes, func, seen);
	      return func(object);
	    }
	    if (object instanceof AV.Relation || object instanceof AV.File) {
	      // Nothing needs to be done, but we don't want to recurse into the
	      // object's parent infinitely, so we catch this case.
	      return func(object);
	    }
	    if (_.isArray(object)) {
	      _.each(object, function (child, index) {
	        var newChild = AV._traverse(child, func, seen);
	        if (newChild) {
	          object[index] = newChild;
	        }
	      });
	      return func(object);
	    }
	    if (_.isObject(object)) {
	      AV._each(object, function (child, key) {
	        var newChild = AV._traverse(child, func, seen);
	        if (newChild) {
	          object[key] = newChild;
	        }
	      });
	      return func(object);
	    }
	    return func(object);
	  };
	
	  /**
	   * This is like _.each, except:
	   * * it doesn't work for so-called array-like objects,
	   * * it does work for dictionaries with a "length" attribute.
	   */
	  AV._objectEach = AV._each = function (obj, callback) {
	    if (_.isObject(obj)) {
	      _.each(_.keys(obj), function (key) {
	        callback(obj[key], key);
	      });
	    } else {
	      _.each(obj, callback);
	    }
	  };
	};
	
	module.exports = {
	  init: init,
	  isNullOrUndefined: isNullOrUndefined,
	  ensureArray: ensureArray
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 9)))

/***/ },
/* 16 */
/*!**************************************************!*\
  !*** ./~/leancloud-storage/dist/node/request.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var request = __webpack_require__(/*! superagent */ 17);
	var debug = __webpack_require__(/*! debug */ 22)('leancloud:request');
	var md5 = __webpack_require__(/*! md5 */ 25);
	var AVPromise = __webpack_require__(/*! ./promise */ 8);
	var Cache = __webpack_require__(/*! ./cache */ 14);
	var AVError = __webpack_require__(/*! ./error */ 29);
	var AV = __webpack_require__(/*! ./av */ 5);
	var _ = __webpack_require__(/*! underscore */ 6);
	
	var getServerURLPromise = void 0;
	
	// 服务器请求的节点 host
	var API_HOST = {
	  cn: 'https://api.leancloud.cn',
	  us: 'https://us-api.leancloud.cn'
	};
	
	// 计算 X-LC-Sign 的签名方法
	var sign = function sign(key, isMasterKey) {
	  var now = new Date().getTime();
	  var signature = md5(now + key);
	  if (isMasterKey) {
	    return signature + ',' + now + ',master';
	  }
	  return signature + ',' + now;
	};
	
	var checkRouter = function checkRouter(router) {
	  var routerList = ['batch', 'classes', 'files', 'date', 'functions', 'call', 'login', 'push', 'search/select', 'requestPasswordReset', 'requestEmailVerify', 'requestPasswordResetBySmsCode', 'resetPasswordBySmsCode', 'requestMobilePhoneVerify', 'requestLoginSmsCode', 'verifyMobilePhone', 'requestSmsCode', 'verifySmsCode', 'users', 'usersByMobilePhone', 'cloudQuery', 'qiniu', 'fileTokens', 'statuses', 'bigquery', 'search/select', 'subscribe/statuses/count', 'subscribe/statuses', 'installations'];
	
	  if (routerList.indexOf(router) === -1 && !/users\/[^\/]+\/updatePassword/.test(router) && !/users\/[^\/]+\/friendship\/[^\/]+/.test(router)) {
	    throw new Error('Bad router: ' + router + '.');
	  }
	};
	
	var requestsCount = 0;
	
	var ajax = function ajax(method, resourceUrl, data) {
	  var headers = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	  var onprogress = arguments[4];
	
	  var count = requestsCount++;
	
	  debug('request(' + count + ')', method, resourceUrl, data, headers);
	
	  var promise = new AVPromise();
	  var req = request(method, resourceUrl).set(headers).send(data).end(function (err, res) {
	    if (res) {
	      debug('response(' + count + ')', res.status, res.body && res.text, res.header);
	    }
	    if (err) {
	      if (res) {
	        err.statusCode = res.status;
	        err.responseText = res.text;
	        err.response = res.body;
	      }
	      return promise.reject(err);
	    }
	    return promise.resolve(res.body, res.status, res);
	  });
	  if (onprogress) {
	    req.on('progress', onprogress);
	  }
	  return promise;
	};
	
	var setHeaders = function setHeaders(sessionToken) {
	  var headers = {
	    'X-LC-Id': AV.applicationId,
	    'Content-Type': 'application/json;charset=UTF-8'
	  };
	  if (AV.masterKey && AV._useMasterKey) {
	    headers['X-LC-Sign'] = sign(AV.masterKey, true);
	  } else {
	    headers['X-LC-Sign'] = sign(AV.applicationKey);
	  }
	  if (AV._config.applicationProduction !== null) {
	    headers['X-LC-Prod'] = AV._config.applicationProduction;
	  }
	  if (!AV._config.isNode) {
	    headers['X-LC-UA'] = 'AV/' + AV.version;
	  } else {
	    // LeanEngine need use AV._config.userAgent
	    headers['User-Agent'] = AV._config.userAgent || 'AV/' + AV.version + '; Node.js/' + process.version;
	  }
	
	  var promise = new AVPromise();
	
	  // Pass the session token
	  if (sessionToken) {
	    headers['X-LC-Session'] = sessionToken;
	    promise.resolve(headers);
	  } else if (!AV._config.disableCurrentUser) {
	    AV.User.currentAsync().then(function (currentUser) {
	      if (currentUser && currentUser._sessionToken) {
	        headers['X-LC-Session'] = currentUser._sessionToken;
	      }
	      promise.resolve(headers);
	    });
	  } else {
	    promise.resolve(headers);
	  }
	
	  return promise;
	};
	
	var createApiUrl = function createApiUrl(route, className, objectId, method, dataObject) {
	  // TODO: 兼容 AV.serverURL 旧方式设置 API Host，后续去掉
	  if (AV.serverURL) {
	    AV._config.APIServerURL = AV.serverURL;
	    console.warn('Please use AV._config.APIServerURL to replace AV.serverURL, and it is an internal interface.');
	  }
	
	  var apiURL = AV._config.APIServerURL || API_HOST.cn;
	
	  if (apiURL.charAt(apiURL.length - 1) !== '/') {
	    apiURL += '/';
	  }
	  apiURL += '1.1/' + route;
	  if (className) {
	    apiURL += '/' + className;
	  }
	  if (objectId) {
	    apiURL += '/' + objectId;
	  }
	  if ((route === 'users' || route === 'classes') && dataObject) {
	    apiURL += '?';
	    if (dataObject._fetchWhenSave) {
	      delete dataObject._fetchWhenSave;
	      apiURL += '&new=true';
	    }
	    if (dataObject._where) {
	      apiURL += '&where=' + encodeURIComponent(JSON.stringify(dataObject._where));
	      delete dataObject._where;
	    }
	  }
	
	  if (method.toLowerCase() === 'get') {
	    if (apiURL.indexOf('?') === -1) {
	      apiURL += '?';
	    }
	    for (var k in dataObject) {
	      if (_typeof(dataObject[k]) === 'object') {
	        dataObject[k] = JSON.stringify(dataObject[k]);
	      }
	      apiURL += '&' + k + '=' + encodeURIComponent(dataObject[k]);
	    }
	  }
	
	  return apiURL;
	};
	
	var cacheServerURL = function cacheServerURL(serverURL, ttl) {
	  if (typeof ttl !== 'number') {
	    ttl = 3600;
	  }
	  return Cache.setAsync('APIServerURL', serverURL, ttl * 1000);
	};
	
	// handle AV._request Error
	var handleError = function handleError(res) {
	  var promise = new AVPromise();
	  /**
	    When API request need to redirect to the right location,
	    can't use browser redirect by http status 307, as the reason of CORS,
	    so API server response http status 410 and the param "location" for this case.
	  */
	  if (res.statusCode === 410) {
	    cacheServerURL(res.response.api_server, res.response.ttl).then(function () {
	      promise.resolve(res.response.location);
	    }).catch(function (error) {
	      promise.reject(error);
	    });
	  } else {
	    var errorJSON = { code: -1, error: res.responseText };
	    if (res.response && res.response.code) {
	      errorJSON = res.response;
	    } else if (res.responseText) {
	      try {
	        errorJSON = JSON.parse(res.responseText);
	      } catch (e) {
	        // If we fail to parse the error text, that's okay.
	      }
	    }
	
	    // Transform the error into an instance of AVError by trying to parse
	    // the error string as JSON.
	    var error = new AVError(errorJSON.code, errorJSON.error);
	    promise.reject(error);
	  }
	  return promise;
	};
	
	var setServerUrl = function setServerUrl(serverURL) {
	  AV._config.APIServerURL = 'https://' + serverURL;
	
	  // 根据新 URL 重新设置区域
	  var newRegion = _.findKey(API_HOST, function (item) {
	    return item === AV._config.APIServerURL;
	  });
	  if (newRegion) {
	    AV._config.region = newRegion;
	  }
	};
	
	var refreshServerUrlByRouter = function refreshServerUrlByRouter() {
	  var url = 'https://app-router.leancloud.cn/1/route?appId=' + AV.applicationId;
	  return ajax('get', url).then(function (servers) {
	    if (servers.api_server) {
	      setServerUrl(servers.api_server);
	      return cacheServerURL(servers.api_server, servers.ttl);
	    }
	  }, function (error) {
	    // bypass all non-4XX errors
	    if (error.statusCode >= 400 && error.statusCode < 500) {
	      throw error;
	    }
	  });
	};
	
	var setServerUrlByRegion = function setServerUrlByRegion() {
	  var region = arguments.length <= 0 || arguments[0] === undefined ? 'cn' : arguments[0];
	
	  getServerURLPromise = new AVPromise();
	  var promise = getServerURLPromise;
	  // 如果用户在 init 之前设置了 APIServerURL，则跳过请求 router
	  if (AV._config.APIServerURL) {
	    promise.resolve();
	    return;
	  }
	  // if not china server region, do not use router
	  if (region === 'cn') {
	    Cache.getAsync('APIServerURL').then(function (serverURL) {
	      if (serverURL) {
	        setServerUrl(serverURL);
	      } else {
	        return refreshServerUrlByRouter();
	      }
	    }).then(function () {
	      promise.resolve();
	    }).catch(function (error) {
	      promise.reject(error);
	    });
	  } else {
	    AV._config.region = region;
	    AV._config.APIServerURL = API_HOST[region];
	    promise.resolve();
	  }
	};
	
	/**
	 * route is classes, users, login, etc.
	 * objectId is null if there is no associated objectId.
	 * method is the http method for the REST API.
	 * dataObject is the payload as an object, or null if there is none.
	 * @ignore
	 */
	var AVRequest = function AVRequest(route, className, objectId, method) {
	  var dataObject = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];
	  var sessionToken = arguments[5];
	
	  if (!AV.applicationId) {
	    throw new Error('You must specify your applicationId using AV.init()');
	  }
	
	  if (!AV.applicationKey && !AV.masterKey) {
	    throw new Error('You must specify a AppKey using AV.init()');
	  }
	
	  checkRouter(route);
	
	  if (!getServerURLPromise) {
	    return AVPromise.error(new Error('Not initialized'));
	  }
	  return getServerURLPromise.then(function () {
	    var apiURL = createApiUrl(route, className, objectId, method, dataObject);
	    return setHeaders(sessionToken).then(function (headers) {
	      return ajax(method, apiURL, dataObject, headers).then(null, function (res) {
	        return handleError(res).then(function (location) {
	          return ajax(method, location, dataObject, headers);
	        });
	      });
	    });
	  });
	};
	
	module.exports = {
	  ajax: ajax,
	  request: AVRequest,
	  setServerUrlByRegion: setServerUrlByRegion
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 9)))

/***/ },
/* 17 */
/*!********************************************************!*\
  !*** ./~/leancloud-storage/~/superagent/lib/client.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Root reference for iframes.
	 */
	
	var root;
	if (typeof window !== 'undefined') { // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') { // Web Worker
	  root = self;
	} else { // Other environments
	  console.warn("Using browser-only version of superagent in non-browser environment");
	  root = this;
	}
	
	var Emitter = __webpack_require__(/*! emitter */ 18);
	var requestBase = __webpack_require__(/*! ./request-base */ 19);
	var isObject = __webpack_require__(/*! ./is-object */ 20);
	
	/**
	 * Noop.
	 */
	
	function noop(){};
	
	/**
	 * Expose `request`.
	 */
	
	var request = module.exports = __webpack_require__(/*! ./request */ 21).bind(null, Request);
	
	/**
	 * Determine XHR.
	 */
	
	request.getXHR = function () {
	  if (root.XMLHttpRequest
	      && (!root.location || 'file:' != root.location.protocol
	          || !root.ActiveXObject)) {
	    return new XMLHttpRequest;
	  } else {
	    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
	  }
	  throw Error("Browser-only verison of superagent could not find XHR");
	};
	
	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */
	
	var trim = ''.trim
	  ? function(s) { return s.trim(); }
	  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };
	
	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */
	
	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    pushEncodedKeyValuePair(pairs, key, obj[key]);
	  }
	  return pairs.join('&');
	}
	
	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */
	
	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (val != null) {
	    if (Array.isArray(val)) {
	      val.forEach(function(v) {
	        pushEncodedKeyValuePair(pairs, key, v);
	      });
	    } else if (isObject(val)) {
	      for(var subkey in val) {
	        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
	      }
	    } else {
	      pairs.push(encodeURIComponent(key)
	        + '=' + encodeURIComponent(val));
	    }
	  } else if (val === null) {
	    pairs.push(encodeURIComponent(key));
	  }
	}
	
	/**
	 * Expose serialization method.
	 */
	
	 request.serializeObject = serialize;
	
	 /**
	  * Parse the given x-www-form-urlencoded `str`.
	  *
	  * @param {String} str
	  * @return {Object}
	  * @api private
	  */
	
	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var pair;
	  var pos;
	
	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    pos = pair.indexOf('=');
	    if (pos == -1) {
	      obj[decodeURIComponent(pair)] = '';
	    } else {
	      obj[decodeURIComponent(pair.slice(0, pos))] =
	        decodeURIComponent(pair.slice(pos + 1));
	    }
	  }
	
	  return obj;
	}
	
	/**
	 * Expose parser.
	 */
	
	request.parseString = parseString;
	
	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */
	
	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};
	
	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */
	
	 request.serialize = {
	   'application/x-www-form-urlencoded': serialize,
	   'application/json': JSON.stringify
	 };
	
	 /**
	  * Default parsers.
	  *
	  *     superagent.parse['application/xml'] = function(str){
	  *       return { object parsed from str };
	  *     };
	  *
	  */
	
	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};
	
	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;
	
	  lines.pop(); // trailing CRLF
	
	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }
	
	  return fields;
	}
	
	/**
	 * Check if `mime` is json or has +json structured syntax suffix.
	 *
	 * @param {String} mime
	 * @return {Boolean}
	 * @api private
	 */
	
	function isJSON(mime) {
	  return /[\/+]json\b/.test(mime);
	}
	
	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */
	
	function type(str){
	  return str.split(/ *; */).shift();
	};
	
	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function params(str){
	  return str.split(/ *; */).reduce(function(obj, str){
	    var parts = str.split(/ *= */),
	        key = parts.shift(),
	        val = parts.shift();
	
	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};
	
	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */
	
	function Response(req, options) {
	  options = options || {};
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
	     ? this.xhr.responseText
	     : null;
	  this.statusText = this.req.xhr.statusText;
	  this._setStatusProperties(this.xhr.status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this._setHeaderProperties(this.header);
	  this.body = this.req.method != 'HEAD'
	    ? this._parseBody(this.text ? this.text : this.xhr.response)
	    : null;
	}
	
	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	Response.prototype.get = function(field){
	  return this.header[field.toLowerCase()];
	};
	
	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */
	
	Response.prototype._setHeaderProperties = function(header){
	  // content-type
	  var ct = this.header['content-type'] || '';
	  this.type = type(ct);
	
	  // params
	  var obj = params(ct);
	  for (var key in obj) this[key] = obj[key];
	};
	
	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */
	
	Response.prototype._parseBody = function(str){
	  var parse = request.parse[this.type];
	  if (!parse && isJSON(this.type)) {
	    parse = request.parse['application/json'];
	  }
	  return parse && str && (str.length || str instanceof Object)
	    ? parse(str)
	    : null;
	};
	
	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */
	
	Response.prototype._setStatusProperties = function(status){
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }
	
	  var type = status / 100 | 0;
	
	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;
	
	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = (4 == type || 5 == type)
	    ? this.toError()
	    : false;
	
	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.notFound = 404 == status;
	  this.forbidden = 403 == status;
	};
	
	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */
	
	Response.prototype.toError = function(){
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;
	
	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;
	
	  return err;
	};
	
	/**
	 * Expose `Response`.
	 */
	
	request.Response = Response;
	
	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */
	
	function Request(method, url) {
	  var self = this;
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {}; // preserves header name case
	  this._header = {}; // coerces header names to lowercase
	  this.on('end', function(){
	    var err = null;
	    var res = null;
	
	    try {
	      res = new Response(self);
	    } catch(e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      // issue #675: return the raw response if the response parsing fails
	      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
	      // issue #876: return the http status code if the response parsing fails
	      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;
	      return self.callback(err);
	    }
	
	    self.emit('response', res);
	
	    var new_err;
	    try {
	      if (res.status < 200 || res.status >= 300) {
	        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	        new_err.original = err;
	        new_err.response = res;
	        new_err.status = res.status;
	      }
	    } catch(e) {
	      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android
	    }
	
	    // #1000 don't catch errors from the callback to avoid double calling it
	    if (new_err) {
	      self.callback(new_err, res);
	    } else {
	      self.callback(null, res);
	    }
	  });
	}
	
	/**
	 * Mixin `Emitter` and `requestBase`.
	 */
	
	Emitter(Request.prototype);
	for (var key in requestBase) {
	  Request.prototype[key] = requestBase[key];
	}
	
	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.type = function(type){
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set responseType to `val`. Presently valid responseTypes are 'blob' and
	 * 'arraybuffer'.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .responseType('blob')
	 *        .end(callback);
	 *
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.responseType = function(val){
	  this._responseType = val;
	  return this;
	};
	
	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.accept = function(type){
	  this.set('Accept', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} pass
	 * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.auth = function(user, pass, options){
	  if (!options) {
	    options = {
	      type: 'basic'
	    }
	  }
	
	  switch (options.type) {
	    case 'basic':
	      var str = btoa(user + ':' + pass);
	      this.set('Authorization', 'Basic ' + str);
	    break;
	
	    case 'auto':
	      this.username = user;
	      this.password = pass;
	    break;
	  }
	  return this;
	};
	
	/**
	* Add query-string `val`.
	*
	* Examples:
	*
	*   request.get('/shoes')
	*     .query('size=10')
	*     .query({ color: 'blue' })
	*
	* @param {Object|String} val
	* @return {Request} for chaining
	* @api public
	*/
	
	Request.prototype.query = function(val){
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};
	
	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `filename`.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String} filename
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.attach = function(field, file, filename){
	  this._getFormData().append(field, file, filename || file.name);
	  return this;
	};
	
	Request.prototype._getFormData = function(){
	  if (!this._formData) {
	    this._formData = new root.FormData();
	  }
	  return this._formData;
	};
	
	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */
	
	Request.prototype.callback = function(err, res){
	  var fn = this._callback;
	  this.clearTimeout();
	  fn(err, res);
	};
	
	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */
	
	Request.prototype.crossDomainError = function(){
	  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
	  err.crossDomain = true;
	
	  err.status = this.status;
	  err.method = this.method;
	  err.url = this.url;
	
	  this.callback(err);
	};
	
	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */
	
	Request.prototype._timeoutError = function(){
	  var timeout = this._timeout;
	  var err = new Error('timeout of ' + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  this.callback(err);
	};
	
	/**
	 * Compose querystring to append to req.url
	 *
	 * @api private
	 */
	
	Request.prototype._appendQueryString = function(){
	  var query = this._query.join('&');
	  if (query) {
	    this.url += ~this.url.indexOf('?')
	      ? '&' + query
	      : '?' + query;
	  }
	};
	
	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.end = function(fn){
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var timeout = this._timeout;
	  var data = this._formData || this._data;
	
	  // store callback
	  this._callback = fn || noop;
	
	  // state change
	  xhr.onreadystatechange = function(){
	    if (4 != xhr.readyState) return;
	
	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try { status = xhr.status } catch(e) { status = 0; }
	
	    if (0 == status) {
	      if (self.timedout) return self._timeoutError();
	      if (self._aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };
	
	  // progress
	  var handleProgress = function(direction, e) {
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    e.direction = direction;
	    self.emit('progress', e);
	  }
	  if (this.hasListeners('progress')) {
	    try {
	      xhr.onprogress = handleProgress.bind(null, 'download');
	      if (xhr.upload) {
	        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
	      }
	    } catch(e) {
	      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	      // Reported here:
	      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
	    }
	  }
	
	  // timeout
	  if (timeout && !this._timer) {
	    this._timer = setTimeout(function(){
	      self.timedout = true;
	      self.abort();
	    }, timeout);
	  }
	
	  // querystring
	  this._appendQueryString();
	
	  // initiate request
	  if (this.username && this.password) {
	    xhr.open(this.method, this.url, true, this.username, this.password);
	  } else {
	    xhr.open(this.method, this.url, true);
	  }
	
	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;
	
	  // body
	  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
	    // serialize stuff
	    var contentType = this._header['content-type'];
	    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
	    if (serialize) data = serialize(data);
	  }
	
	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	    xhr.setRequestHeader(field, this.header[field]);
	  }
	
	  if (this._responseType) {
	    xhr.responseType = this._responseType;
	  }
	
	  // send stuff
	  this.emit('request', this);
	
	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};
	
	
	/**
	 * Expose `Request`.
	 */
	
	request.Request = Request;
	
	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.get = function(url, data, fn){
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.head = function(url, data, fn){
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * OPTIONS query to `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.options = function(url, data, fn){
	  var req = request('OPTIONS', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * DELETE `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	function del(url, fn){
	  var req = request('DELETE', url);
	  if (fn) req.end(fn);
	  return req;
	};
	
	request['del'] = del;
	request['delete'] = del;
	
	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} [data]
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.patch = function(url, data, fn){
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} [data]
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.post = function(url, data, fn){
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.put = function(url, data, fn){
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};


/***/ },
/* 18 */
/*!***********************************************************************!*\
  !*** ./~/leancloud-storage/~/superagent/~/component-emitter/index.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */
	
	if (true) {
	  module.exports = Emitter;
	}
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }
	
	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 19 */
/*!**************************************************************!*\
  !*** ./~/leancloud-storage/~/superagent/lib/request-base.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module of mixed-in functions shared between node and client code
	 */
	var isObject = __webpack_require__(/*! ./is-object */ 20);
	
	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.clearTimeout = function _clearTimeout(){
	  this._timeout = 0;
	  clearTimeout(this._timer);
	  return this;
	};
	
	/**
	 * Override default response body parser
	 *
	 * This function will be called to convert incoming data into request.body
	 *
	 * @param {Function}
	 * @api public
	 */
	
	exports.parse = function parse(fn){
	  this._parser = fn;
	  return this;
	};
	
	/**
	 * Override default request body serializer
	 *
	 * This function will be called to convert data set via .send or .attach into payload to send
	 *
	 * @param {Function}
	 * @api public
	 */
	
	exports.serialize = function serialize(fn){
	  this._serializer = fn;
	  return this;
	};
	
	/**
	 * Set timeout to `ms`.
	 *
	 * @param {Number} ms
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.timeout = function timeout(ms){
	  this._timeout = ms;
	  return this;
	};
	
	/**
	 * Promise support
	 *
	 * @param {Function} resolve
	 * @param {Function} reject
	 * @return {Request}
	 */
	
	exports.then = function then(resolve, reject) {
	  if (!this._fullfilledPromise) {
	    var self = this;
	    this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
	      self.end(function(err, res){
	        if (err) innerReject(err); else innerResolve(res);
	      });
	    });
	  }
	  return this._fullfilledPromise.then(resolve, reject);
	}
	
	exports.catch = function(cb) {
	  return this.then(undefined, cb);
	};
	
	/**
	 * Allow for extension
	 */
	
	exports.use = function use(fn) {
	  fn(this);
	  return this;
	}
	
	
	/**
	 * Get request header `field`.
	 * Case-insensitive.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	exports.get = function(field){
	  return this._header[field.toLowerCase()];
	};
	
	/**
	 * Get case-insensitive header `field` value.
	 * This is a deprecated internal API. Use `.get(field)` instead.
	 *
	 * (getHeader is no longer used internally by the superagent code base)
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 * @deprecated
	 */
	
	exports.getHeader = exports.get;
	
	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 * Case-insensitive.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.set = function(field, val){
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};
	
	/**
	 * Remove header `field`.
	 * Case-insensitive.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 */
	exports.unset = function(field){
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};
	
	/**
	 * Write the field `name` and `val`, or multiple fields with one object
	 * for "multipart/form-data" request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 *
	 * request.post('/upload')
	 *   .field({ foo: 'bar', baz: 'qux' })
	 *   .end(callback);
	 * ```
	 *
	 * @param {String|Object} name
	 * @param {String|Blob|File|Buffer|fs.ReadStream} val
	 * @return {Request} for chaining
	 * @api public
	 */
	exports.field = function(name, val) {
	
	  // name should be either a string or an object.
	  if (null === name ||  undefined === name) {
	    throw new Error('.field(name, val) name can not be empty');
	  }
	
	  if (isObject(name)) {
	    for (var key in name) {
	      this.field(key, name[key]);
	    }
	    return this;
	  }
	
	  // val should be defined now
	  if (null === val || undefined === val) {
	    throw new Error('.field(name, val) val can not be empty');
	  }
	  this._getFormData().append(name, val);
	  return this;
	};
	
	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */
	exports.abort = function(){
	  if (this._aborted) {
	    return this;
	  }
	  this._aborted = true;
	  this.xhr && this.xhr.abort(); // browser
	  this.req && this.req.abort(); // node
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};
	
	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */
	
	exports.withCredentials = function(){
	  // This is browser-only functionality. Node side is no-op.
	  this._withCredentials = true;
	  return this;
	};
	
	/**
	 * Set the max redirects to `n`. Does noting in browser XHR implementation.
	 *
	 * @param {Number} n
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.redirects = function(n){
	  this._maxRedirects = n;
	  return this;
	};
	
	/**
	 * Convert to a plain javascript object (not JSON string) of scalar properties.
	 * Note as this method is designed to return a useful non-this value,
	 * it cannot be chained.
	 *
	 * @return {Object} describing method, url, and data of this request
	 * @api public
	 */
	
	exports.toJSON = function(){
	  return {
	    method: this.method,
	    url: this.url,
	    data: this._data,
	    headers: this._header
	  };
	};
	
	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * TODO: future proof, move to compoent land
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	
	exports._isHost = function _isHost(obj) {
	  var str = {}.toString.call(obj);
	
	  switch (str) {
	    case '[object File]':
	    case '[object Blob]':
	    case '[object FormData]':
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Send `data` as the request body, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	 *      request.post('/user')
	 *        .send('name=tobi')
	 *        .send('species=ferret')
	 *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.send = function(data){
	  var obj = isObject(data);
	  var type = this._header['content-type'];
	
	  // merge
	  if (obj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    // default to x-www-form-urlencoded
	    if (!type) this.type('form');
	    type = this._header['content-type'];
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data
	        ? this._data + '&' + data
	        : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }
	
	  if (!obj || this._isHost(data)) return this;
	
	  // default to json
	  if (!type) this.type('json');
	  return this;
	};


/***/ },
/* 20 */
/*!***********************************************************!*\
  !*** ./~/leancloud-storage/~/superagent/lib/is-object.js ***!
  \***********************************************************/
/***/ function(module, exports) {

	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	
	function isObject(obj) {
	  return null !== obj && 'object' === typeof obj;
	}
	
	module.exports = isObject;


/***/ },
/* 21 */
/*!*********************************************************!*\
  !*** ./~/leancloud-storage/~/superagent/lib/request.js ***!
  \*********************************************************/
/***/ function(module, exports) {

	// The node and browser modules expose versions of this with the
	// appropriate constructor function bound as first argument
	/**
	 * Issue a request:
	 *
	 * Examples:
	 *
	 *    request('GET', '/users').end(callback)
	 *    request('/users').end(callback)
	 *    request('/users', callback)
	 *
	 * @param {String} method
	 * @param {String|Function} url or callback
	 * @return {Request}
	 * @api public
	 */
	
	function request(RequestConstructor, method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new RequestConstructor('GET', method).end(url);
	  }
	
	  // url first
	  if (2 == arguments.length) {
	    return new RequestConstructor('GET', method);
	  }
	
	  return new RequestConstructor(method, url);
	}
	
	module.exports = request;


/***/ },
/* 22 */
/*!************************************************!*\
  !*** ./~/leancloud-storage/~/debug/browser.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(/*! ./debug */ 23);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 23 */
/*!**********************************************!*\
  !*** ./~/leancloud-storage/~/debug/debug.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(/*! ms */ 24);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 24 */
/*!***************************************************!*\
  !*** ./~/leancloud-storage/~/debug/~/ms/index.js ***!
  \***************************************************/
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 25 */
/*!******************************************!*\
  !*** ./~/leancloud-storage/~/md5/md5.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	(function(){
	  var crypt = __webpack_require__(/*! crypt */ 26),
	      utf8 = __webpack_require__(/*! charenc */ 27).utf8,
	      isBuffer = __webpack_require__(/*! is-buffer */ 28),
	      bin = __webpack_require__(/*! charenc */ 27).bin,
	
	  // The core
	  md5 = function (message, options) {
	    // Convert to byte array
	    if (message.constructor == String)
	      if (options && options.encoding === 'binary')
	        message = bin.stringToBytes(message);
	      else
	        message = utf8.stringToBytes(message);
	    else if (isBuffer(message))
	      message = Array.prototype.slice.call(message, 0);
	    else if (!Array.isArray(message))
	      message = message.toString();
	    // else, assume byte array already
	
	    var m = crypt.bytesToWords(message),
	        l = message.length * 8,
	        a =  1732584193,
	        b = -271733879,
	        c = -1732584194,
	        d =  271733878;
	
	    // Swap endian
	    for (var i = 0; i < m.length; i++) {
	      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
	             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
	    }
	
	    // Padding
	    m[l >>> 5] |= 0x80 << (l % 32);
	    m[(((l + 64) >>> 9) << 4) + 14] = l;
	
	    // Method shortcuts
	    var FF = md5._ff,
	        GG = md5._gg,
	        HH = md5._hh,
	        II = md5._ii;
	
	    for (var i = 0; i < m.length; i += 16) {
	
	      var aa = a,
	          bb = b,
	          cc = c,
	          dd = d;
	
	      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
	      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
	      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
	      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
	      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
	      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
	      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
	      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
	      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
	      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
	      c = FF(c, d, a, b, m[i+10], 17, -42063);
	      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
	      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
	      d = FF(d, a, b, c, m[i+13], 12, -40341101);
	      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
	      b = FF(b, c, d, a, m[i+15], 22,  1236535329);
	
	      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
	      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
	      c = GG(c, d, a, b, m[i+11], 14,  643717713);
	      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
	      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
	      d = GG(d, a, b, c, m[i+10],  9,  38016083);
	      c = GG(c, d, a, b, m[i+15], 14, -660478335);
	      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
	      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
	      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
	      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
	      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
	      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
	      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
	      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
	      b = GG(b, c, d, a, m[i+12], 20, -1926607734);
	
	      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
	      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
	      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
	      b = HH(b, c, d, a, m[i+14], 23, -35309556);
	      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
	      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
	      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
	      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
	      a = HH(a, b, c, d, m[i+13],  4,  681279174);
	      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
	      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
	      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
	      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
	      d = HH(d, a, b, c, m[i+12], 11, -421815835);
	      c = HH(c, d, a, b, m[i+15], 16,  530742520);
	      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);
	
	      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
	      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
	      c = II(c, d, a, b, m[i+14], 15, -1416354905);
	      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
	      a = II(a, b, c, d, m[i+12],  6,  1700485571);
	      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
	      c = II(c, d, a, b, m[i+10], 15, -1051523);
	      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
	      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
	      d = II(d, a, b, c, m[i+15], 10, -30611744);
	      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
	      b = II(b, c, d, a, m[i+13], 21,  1309151649);
	      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
	      d = II(d, a, b, c, m[i+11], 10, -1120210379);
	      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
	      b = II(b, c, d, a, m[i+ 9], 21, -343485551);
	
	      a = (a + aa) >>> 0;
	      b = (b + bb) >>> 0;
	      c = (c + cc) >>> 0;
	      d = (d + dd) >>> 0;
	    }
	
	    return crypt.endian([a, b, c, d]);
	  };
	
	  // Auxiliary functions
	  md5._ff  = function (a, b, c, d, x, s, t) {
	    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	  md5._gg  = function (a, b, c, d, x, s, t) {
	    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	  md5._hh  = function (a, b, c, d, x, s, t) {
	    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	  md5._ii  = function (a, b, c, d, x, s, t) {
	    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
	    return ((n << s) | (n >>> (32 - s))) + b;
	  };
	
	  // Package private blocksize
	  md5._blocksize = 16;
	  md5._digestsize = 16;
	
	  module.exports = function (message, options) {
	    if (message === undefined || message === null)
	      throw new Error('Illegal argument ' + message);
	
	    var digestbytes = crypt.wordsToBytes(md5(message, options));
	    return options && options.asBytes ? digestbytes :
	        options && options.asString ? bin.bytesToString(digestbytes) :
	        crypt.bytesToHex(digestbytes);
	  };
	
	})();


/***/ },
/* 26 */
/*!****************************************************!*\
  !*** ./~/leancloud-storage/~/md5/~/crypt/crypt.js ***!
  \****************************************************/
/***/ function(module, exports) {

	(function() {
	  var base64map
	      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
	
	  crypt = {
	    // Bit-wise rotation left
	    rotl: function(n, b) {
	      return (n << b) | (n >>> (32 - b));
	    },
	
	    // Bit-wise rotation right
	    rotr: function(n, b) {
	      return (n << (32 - b)) | (n >>> b);
	    },
	
	    // Swap big-endian to little-endian and vice versa
	    endian: function(n) {
	      // If number given, swap endian
	      if (n.constructor == Number) {
	        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
	      }
	
	      // Else, assume array and swap all items
	      for (var i = 0; i < n.length; i++)
	        n[i] = crypt.endian(n[i]);
	      return n;
	    },
	
	    // Generate an array of any length of random bytes
	    randomBytes: function(n) {
	      for (var bytes = []; n > 0; n--)
	        bytes.push(Math.floor(Math.random() * 256));
	      return bytes;
	    },
	
	    // Convert a byte array to big-endian 32-bit words
	    bytesToWords: function(bytes) {
	      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
	        words[b >>> 5] |= bytes[i] << (24 - b % 32);
	      return words;
	    },
	
	    // Convert big-endian 32-bit words to a byte array
	    wordsToBytes: function(words) {
	      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
	        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	      return bytes;
	    },
	
	    // Convert a byte array to a hex string
	    bytesToHex: function(bytes) {
	      for (var hex = [], i = 0; i < bytes.length; i++) {
	        hex.push((bytes[i] >>> 4).toString(16));
	        hex.push((bytes[i] & 0xF).toString(16));
	      }
	      return hex.join('');
	    },
	
	    // Convert a hex string to a byte array
	    hexToBytes: function(hex) {
	      for (var bytes = [], c = 0; c < hex.length; c += 2)
	        bytes.push(parseInt(hex.substr(c, 2), 16));
	      return bytes;
	    },
	
	    // Convert a byte array to a base-64 string
	    bytesToBase64: function(bytes) {
	      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
	        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
	        for (var j = 0; j < 4; j++)
	          if (i * 8 + j * 6 <= bytes.length * 8)
	            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
	          else
	            base64.push('=');
	      }
	      return base64.join('');
	    },
	
	    // Convert a base-64 string to a byte array
	    base64ToBytes: function(base64) {
	      // Remove non-base-64 characters
	      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');
	
	      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
	          imod4 = ++i % 4) {
	        if (imod4 == 0) continue;
	        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
	            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
	            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
	      }
	      return bytes;
	    }
	  };
	
	  module.exports = crypt;
	})();


/***/ },
/* 27 */
/*!********************************************************!*\
  !*** ./~/leancloud-storage/~/md5/~/charenc/charenc.js ***!
  \********************************************************/
/***/ function(module, exports) {

	var charenc = {
	  // UTF-8 encoding
	  utf8: {
	    // Convert a string to a byte array
	    stringToBytes: function(str) {
	      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
	    },
	
	    // Convert a byte array to a string
	    bytesToString: function(bytes) {
	      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
	    }
	  },
	
	  // Binary encoding
	  bin: {
	    // Convert a string to a byte array
	    stringToBytes: function(str) {
	      for (var bytes = [], i = 0; i < str.length; i++)
	        bytes.push(str.charCodeAt(i) & 0xFF);
	      return bytes;
	    },
	
	    // Convert a byte array to a string
	    bytesToString: function(bytes) {
	      for (var str = [], i = 0; i < bytes.length; i++)
	        str.push(String.fromCharCode(bytes[i]));
	      return str.join('');
	    }
	  }
	};
	
	module.exports = charenc;


/***/ },
/* 28 */
/*!********************************************************!*\
  !*** ./~/leancloud-storage/~/md5/~/is-buffer/index.js ***!
  \********************************************************/
/***/ function(module, exports) {

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	}
	
	function isBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}
	
	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
	}


/***/ },
/* 29 */
/*!************************************************!*\
  !*** ./~/leancloud-storage/dist/node/error.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	
	// Class used for all objects passed to error callbacks
	function AVError(code, message) {
	  var error = new Error(message);
	  error.code = code;
	  return error;
	}
	
	_.extend(AVError, {
	  /**
	   * Error code indicating some error other than those enumerated here.
	   * @constant
	   */
	  OTHER_CAUSE: -1,
	
	  /**
	   * Error code indicating that something has gone wrong with the server.
	   * If you get this error code, it is AV's fault. Contact us at
	   * https://avoscloud.com/help
	   * @constant
	   */
	  INTERNAL_SERVER_ERROR: 1,
	
	  /**
	   * Error code indicating the connection to the AV servers failed.
	   * @constant
	   */
	  CONNECTION_FAILED: 100,
	
	  /**
	   * Error code indicating the specified object doesn't exist.
	   * @constant
	   */
	  OBJECT_NOT_FOUND: 101,
	
	  /**
	   * Error code indicating you tried to query with a datatype that doesn't
	   * support it, like exact matching an array or object.
	   * @constant
	   */
	  INVALID_QUERY: 102,
	
	  /**
	   * Error code indicating a missing or invalid classname. Classnames are
	   * case-sensitive. They must start with a letter, and a-zA-Z0-9_ are the
	   * only valid characters.
	   * @constant
	   */
	  INVALID_CLASS_NAME: 103,
	
	  /**
	   * Error code indicating an unspecified object id.
	   * @constant
	   */
	  MISSING_OBJECT_ID: 104,
	
	  /**
	   * Error code indicating an invalid key name. Keys are case-sensitive. They
	   * must start with a letter, and a-zA-Z0-9_ are the only valid characters.
	   * @constant
	   */
	  INVALID_KEY_NAME: 105,
	
	  /**
	   * Error code indicating a malformed pointer. You should not see this unless
	   * you have been mucking about changing internal AV code.
	   * @constant
	   */
	  INVALID_POINTER: 106,
	
	  /**
	   * Error code indicating that badly formed JSON was received upstream. This
	   * either indicates you have done something unusual with modifying how
	   * things encode to JSON, or the network is failing badly.
	   * @constant
	   */
	  INVALID_JSON: 107,
	
	  /**
	   * Error code indicating that the feature you tried to access is only
	   * available internally for testing purposes.
	   * @constant
	   */
	  COMMAND_UNAVAILABLE: 108,
	
	  /**
	   * You must call AV.initialize before using the AV library.
	   * @constant
	   */
	  NOT_INITIALIZED: 109,
	
	  /**
	   * Error code indicating that a field was set to an inconsistent type.
	   * @constant
	   */
	  INCORRECT_TYPE: 111,
	
	  /**
	   * Error code indicating an invalid channel name. A channel name is either
	   * an empty string (the broadcast channel) or contains only a-zA-Z0-9_
	   * characters.
	   * @constant
	   */
	  INVALID_CHANNEL_NAME: 112,
	
	  /**
	   * Error code indicating that push is misconfigured.
	   * @constant
	   */
	  PUSH_MISCONFIGURED: 115,
	
	  /**
	   * Error code indicating that the object is too large.
	   * @constant
	   */
	  OBJECT_TOO_LARGE: 116,
	
	  /**
	   * Error code indicating that the operation isn't allowed for clients.
	   * @constant
	   */
	  OPERATION_FORBIDDEN: 119,
	
	  /**
	   * Error code indicating the result was not found in the cache.
	   * @constant
	   */
	  CACHE_MISS: 120,
	
	  /**
	   * Error code indicating that an invalid key was used in a nested
	   * JSONObject.
	   * @constant
	   */
	  INVALID_NESTED_KEY: 121,
	
	  /**
	   * Error code indicating that an invalid filename was used for AVFile.
	   * A valid file name contains only a-zA-Z0-9_. characters and is between 1
	   * and 128 characters.
	   * @constant
	   */
	  INVALID_FILE_NAME: 122,
	
	  /**
	   * Error code indicating an invalid ACL was provided.
	   * @constant
	   */
	  INVALID_ACL: 123,
	
	  /**
	   * Error code indicating that the request timed out on the server. Typically
	   * this indicates that the request is too expensive to run.
	   * @constant
	   */
	  TIMEOUT: 124,
	
	  /**
	   * Error code indicating that the email address was invalid.
	   * @constant
	   */
	  INVALID_EMAIL_ADDRESS: 125,
	
	  /**
	   * Error code indicating a missing content type.
	   * @constant
	   */
	  MISSING_CONTENT_TYPE: 126,
	
	  /**
	   * Error code indicating a missing content length.
	   * @constant
	   */
	  MISSING_CONTENT_LENGTH: 127,
	
	  /**
	   * Error code indicating an invalid content length.
	   * @constant
	   */
	  INVALID_CONTENT_LENGTH: 128,
	
	  /**
	   * Error code indicating a file that was too large.
	   * @constant
	   */
	  FILE_TOO_LARGE: 129,
	
	  /**
	   * Error code indicating an error saving a file.
	   * @constant
	   */
	  FILE_SAVE_ERROR: 130,
	
	  /**
	   * Error code indicating an error deleting a file.
	   * @constant
	   */
	  FILE_DELETE_ERROR: 153,
	
	  /**
	   * Error code indicating that a unique field was given a value that is
	   * already taken.
	   * @constant
	   */
	  DUPLICATE_VALUE: 137,
	
	  /**
	   * Error code indicating that a role's name is invalid.
	   * @constant
	   */
	  INVALID_ROLE_NAME: 139,
	
	  /**
	   * Error code indicating that an application quota was exceeded.  Upgrade to
	   * resolve.
	   * @constant
	   */
	  EXCEEDED_QUOTA: 140,
	
	  /**
	   * Error code indicating that a Cloud Code script failed.
	   * @constant
	   */
	  SCRIPT_FAILED: 141,
	
	  /**
	   * Error code indicating that a Cloud Code validation failed.
	   * @constant
	   */
	  VALIDATION_ERROR: 142,
	
	  /**
	   * Error code indicating that invalid image data was provided.
	   * @constant
	   */
	  INVALID_IMAGE_DATA: 150,
	
	  /**
	   * Error code indicating an unsaved file.
	   * @constant
	   */
	  UNSAVED_FILE_ERROR: 151,
	
	  /**
	   * Error code indicating an invalid push time.
	   */
	  INVALID_PUSH_TIME_ERROR: 152,
	
	  /**
	   * Error code indicating that the username is missing or empty.
	   * @constant
	   */
	  USERNAME_MISSING: 200,
	
	  /**
	   * Error code indicating that the password is missing or empty.
	   * @constant
	   */
	  PASSWORD_MISSING: 201,
	
	  /**
	   * Error code indicating that the username has already been taken.
	   * @constant
	   */
	  USERNAME_TAKEN: 202,
	
	  /**
	   * Error code indicating that the email has already been taken.
	   * @constant
	   */
	  EMAIL_TAKEN: 203,
	
	  /**
	   * Error code indicating that the email is missing, but must be specified.
	   * @constant
	   */
	  EMAIL_MISSING: 204,
	
	  /**
	   * Error code indicating that a user with the specified email was not found.
	   * @constant
	   */
	  EMAIL_NOT_FOUND: 205,
	
	  /**
	   * Error code indicating that a user object without a valid session could
	   * not be altered.
	   * @constant
	   */
	  SESSION_MISSING: 206,
	
	  /**
	   * Error code indicating that a user can only be created through signup.
	   * @constant
	   */
	  MUST_CREATE_USER_THROUGH_SIGNUP: 207,
	
	  /**
	   * Error code indicating that an an account being linked is already linked
	   * to another user.
	   * @constant
	   */
	  ACCOUNT_ALREADY_LINKED: 208,
	
	  /**
	   * Error code indicating that a user cannot be linked to an account because
	   * that account's id could not be found.
	   * @constant
	   */
	  LINKED_ID_MISSING: 250,
	
	  /**
	   * Error code indicating that a user with a linked (e.g. Facebook) account
	   * has an invalid session.
	   * @constant
	   */
	  INVALID_LINKED_SESSION: 251,
	
	  /**
	   * Error code indicating that a service being linked (e.g. Facebook or
	   * Twitter) is unsupported.
	   * @constant
	   */
	  UNSUPPORTED_SERVICE: 252,
	  /**
	   * Error code indicating a real error code is unavailable because
	   * we had to use an XDomainRequest object to allow CORS requests in
	   * Internet Explorer, which strips the body from HTTP responses that have
	   * a non-2XX status code.
	   * @constant
	   */
	  X_DOMAIN_REQUEST: 602
	});
	
	module.exports = AVError;

/***/ },
/* 30 */
/*!************************************************!*\
  !*** ./~/leancloud-storage/dist/node/event.js ***!
  \************************************************/
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	/*global _: false */
	module.exports = function (AV) {
	  var eventSplitter = /\s+/;
	  var slice = Array.prototype.slice;
	
	  /**
	   * @class
	   *
	   * <p>AV.Events is a fork of Backbone's Events module, provided for your
	   * convenience.</p>
	   *
	   * <p>A module that can be mixed in to any object in order to provide
	   * it with custom events. You may bind callback functions to an event
	   * with `on`, or remove these functions with `off`.
	   * Triggering an event fires all callbacks in the order that `on` was
	   * called.
	   *
	   * <pre>
	   *     var object = {};
	   *     _.extend(object, AV.Events);
	   *     object.on('expand', function(){ alert('expanded'); });
	   *     object.trigger('expand');</pre></p>
	   *
	   * <p>For more information, see the
	   * <a href="http://documentcloud.github.com/backbone/#Events">Backbone
	   * documentation</a>.</p>
	   */
	  AV.Events = {
	    /**
	     * Bind one or more space separated events, `events`, to a `callback`
	     * function. Passing `"all"` will bind the callback to all events fired.
	     */
	    on: function on(events, callback, context) {
	
	      var calls, event, node, tail, list;
	      if (!callback) {
	        return this;
	      }
	      events = events.split(eventSplitter);
	      calls = this._callbacks || (this._callbacks = {});
	
	      // Create an immutable callback list, allowing traversal during
	      // modification.  The tail is an empty object that will always be used
	      // as the next node.
	      event = events.shift();
	      while (event) {
	        list = calls[event];
	        node = list ? list.tail : {};
	        node.next = tail = {};
	        node.context = context;
	        node.callback = callback;
	        calls[event] = { tail: tail, next: list ? list.next : node };
	        event = events.shift();
	      }
	
	      return this;
	    },
	
	    /**
	     * Remove one or many callbacks. If `context` is null, removes all callbacks
	     * with that function. If `callback` is null, removes all callbacks for the
	     * event. If `events` is null, removes all bound callbacks for all events.
	     */
	    off: function off(events, callback, context) {
	      var event, calls, node, tail, cb, ctx;
	
	      // No events, or removing *all* events.
	      if (!(calls = this._callbacks)) {
	        return;
	      }
	      if (!(events || callback || context)) {
	        delete this._callbacks;
	        return this;
	      }
	
	      // Loop through the listed events and contexts, splicing them out of the
	      // linked list of callbacks if appropriate.
	      events = events ? events.split(eventSplitter) : _.keys(calls);
	      event = events.shift();
	      while (event) {
	        node = calls[event];
	        delete calls[event];
	        if (!node || !(callback || context)) {
	          continue;
	        }
	        // Create a new list, omitting the indicated callbacks.
	        tail = node.tail;
	        node = node.next;
	        while (node !== tail) {
	          cb = node.callback;
	          ctx = node.context;
	          if (callback && cb !== callback || context && ctx !== context) {
	            this.on(event, cb, ctx);
	          }
	          node = node.next;
	        }
	        event = events.shift();
	      }
	
	      return this;
	    },
	
	    /**
	     * Trigger one or many events, firing all bound callbacks. Callbacks are
	     * passed the same arguments as `trigger` is, apart from the event name
	     * (unless you're listening on `"all"`, which will cause your callback to
	     * receive the true name of the event as the first argument).
	     */
	    trigger: function trigger(events) {
	      var event, node, calls, tail, args, all, rest;
	      if (!(calls = this._callbacks)) {
	        return this;
	      }
	      all = calls.all;
	      events = events.split(eventSplitter);
	      rest = slice.call(arguments, 1);
	
	      // For each event, walk through the linked list of callbacks twice,
	      // first to trigger the event, then to trigger any `"all"` callbacks.
	      event = events.shift();
	      while (event) {
	        node = calls[event];
	        if (node) {
	          tail = node.tail;
	          while ((node = node.next) !== tail) {
	            node.callback.apply(node.context || this, rest);
	          }
	        }
	        node = all;
	        if (node) {
	          tail = node.tail;
	          args = [event].concat(rest);
	          while ((node = node.next) !== tail) {
	            node.callback.apply(node.context || this, args);
	          }
	        }
	        event = events.shift();
	      }
	
	      return this;
	    }
	  };
	
	  /**
	   * @function
	   */
	  AV.Events.bind = AV.Events.on;
	
	  /**
	   * @function
	   */
	  AV.Events.unbind = AV.Events.off;
	};

/***/ },
/* 31 */
/*!***************************************************!*\
  !*** ./~/leancloud-storage/dist/node/geopoint.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	
	/*global navigator: false */
	module.exports = function (AV) {
	  /**
	   * Creates a new GeoPoint with any of the following forms:<br>
	   *   <pre>
	   *   new GeoPoint(otherGeoPoint)
	   *   new GeoPoint(30, 30)
	   *   new GeoPoint([30, 30])
	   *   new GeoPoint({latitude: 30, longitude: 30})
	   *   new GeoPoint()  // defaults to (0, 0)
	   *   </pre>
	   * @class
	   *
	   * <p>Represents a latitude / longitude point that may be associated
	   * with a key in a AVObject or used as a reference point for geo queries.
	   * This allows proximity-based queries on the key.</p>
	   *
	   * <p>Only one key in a class may contain a GeoPoint.</p>
	   *
	   * <p>Example:<pre>
	   *   var point = new AV.GeoPoint(30.0, -20.0);
	   *   var object = new AV.Object("PlaceObject");
	   *   object.set("location", point);
	   *   object.save();</pre></p>
	   */
	  AV.GeoPoint = function (arg1, arg2) {
	    if (_.isArray(arg1)) {
	      AV.GeoPoint._validate(arg1[0], arg1[1]);
	      this.latitude = arg1[0];
	      this.longitude = arg1[1];
	    } else if (_.isObject(arg1)) {
	      AV.GeoPoint._validate(arg1.latitude, arg1.longitude);
	      this.latitude = arg1.latitude;
	      this.longitude = arg1.longitude;
	    } else if (_.isNumber(arg1) && _.isNumber(arg2)) {
	      AV.GeoPoint._validate(arg1, arg2);
	      this.latitude = arg1;
	      this.longitude = arg2;
	    } else {
	      this.latitude = 0;
	      this.longitude = 0;
	    }
	
	    // Add properties so that anyone using Webkit or Mozilla will get an error
	    // if they try to set values that are out of bounds.
	    var self = this;
	    if (this.__defineGetter__ && this.__defineSetter__) {
	      // Use _latitude and _longitude to actually store the values, and add
	      // getters and setters for latitude and longitude.
	      this._latitude = this.latitude;
	      this._longitude = this.longitude;
	      this.__defineGetter__("latitude", function () {
	        return self._latitude;
	      });
	      this.__defineGetter__("longitude", function () {
	        return self._longitude;
	      });
	      this.__defineSetter__("latitude", function (val) {
	        AV.GeoPoint._validate(val, self.longitude);
	        self._latitude = val;
	      });
	      this.__defineSetter__("longitude", function (val) {
	        AV.GeoPoint._validate(self.latitude, val);
	        self._longitude = val;
	      });
	    }
	  };
	
	  /**
	   * @lends AV.GeoPoint.prototype
	   * @property {float} latitude North-south portion of the coordinate, in range
	   *   [-90, 90].  Throws an exception if set out of range in a modern browser.
	   * @property {float} longitude East-west portion of the coordinate, in range
	   *   [-180, 180].  Throws if set out of range in a modern browser.
	   */
	
	  /**
	   * Throws an exception if the given lat-long is out of bounds.
	   */
	  AV.GeoPoint._validate = function (latitude, longitude) {
	    if (latitude < -90.0) {
	      throw "AV.GeoPoint latitude " + latitude + " < -90.0.";
	    }
	    if (latitude > 90.0) {
	      throw "AV.GeoPoint latitude " + latitude + " > 90.0.";
	    }
	    if (longitude < -180.0) {
	      throw "AV.GeoPoint longitude " + longitude + " < -180.0.";
	    }
	    if (longitude > 180.0) {
	      throw "AV.GeoPoint longitude " + longitude + " > 180.0.";
	    }
	  };
	
	  /**
	   * Creates a GeoPoint with the user's current location, if available.
	   * Calls options.success with a new GeoPoint instance or calls options.error.
	   * @param {Object} options An object with success and error callbacks.
	   */
	  AV.GeoPoint.current = function (options) {
	    var promise = new AV.Promise();
	    navigator.geolocation.getCurrentPosition(function (location) {
	      promise.resolve(new AV.GeoPoint({
	        latitude: location.coords.latitude,
	        longitude: location.coords.longitude
	      }));
	    }, function (error) {
	      promise.reject(error);
	    });
	
	    return promise._thenRunCallbacks(options);
	  };
	
	  AV.GeoPoint.prototype = {
	    /**
	     * Returns a JSON representation of the GeoPoint, suitable for AV.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      AV.GeoPoint._validate(this.latitude, this.longitude);
	      return {
	        "__type": "GeoPoint",
	        latitude: this.latitude,
	        longitude: this.longitude
	      };
	    },
	
	    /**
	     * Returns the distance from this GeoPoint to another in radians.
	     * @param {AV.GeoPoint} point the other AV.GeoPoint.
	     * @return {Number}
	     */
	    radiansTo: function radiansTo(point) {
	      var d2r = Math.PI / 180.0;
	      var lat1rad = this.latitude * d2r;
	      var long1rad = this.longitude * d2r;
	      var lat2rad = point.latitude * d2r;
	      var long2rad = point.longitude * d2r;
	      var deltaLat = lat1rad - lat2rad;
	      var deltaLong = long1rad - long2rad;
	      var sinDeltaLatDiv2 = Math.sin(deltaLat / 2);
	      var sinDeltaLongDiv2 = Math.sin(deltaLong / 2);
	      // Square of half the straight line chord distance between both points.
	      var a = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;
	      a = Math.min(1.0, a);
	      return 2 * Math.asin(Math.sqrt(a));
	    },
	
	    /**
	     * Returns the distance from this GeoPoint to another in kilometers.
	     * @param {AV.GeoPoint} point the other AV.GeoPoint.
	     * @return {Number}
	     */
	    kilometersTo: function kilometersTo(point) {
	      return this.radiansTo(point) * 6371.0;
	    },
	
	    /**
	     * Returns the distance from this GeoPoint to another in miles.
	     * @param {AV.GeoPoint} point the other AV.GeoPoint.
	     * @return {Number}
	     */
	    milesTo: function milesTo(point) {
	      return this.radiansTo(point) * 3958.8;
	    }
	  };
	};

/***/ },
/* 32 */
/*!**********************************************!*\
  !*** ./~/leancloud-storage/dist/node/acl.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	'use strict';
	
	var _ = __webpack_require__(/*! underscore */ 6);
	
	/*global navigator: false */
	module.exports = function (AV) {
	  var PUBLIC_KEY = "*";
	
	  /**
	   * Creates a new ACL.
	   * If no argument is given, the ACL has no permissions for anyone.
	   * If the argument is a AV.User, the ACL will have read and write
	   *   permission for only that user.
	   * If the argument is any other JSON object, that object will be interpretted
	   *   as a serialized ACL created with toJSON().
	   * @see AV.Object#setACL
	   * @class
	   *
	   * <p>An ACL, or Access Control List can be added to any
	   * <code>AV.Object</code> to restrict access to only a subset of users
	   * of your application.</p>
	   */
	  AV.ACL = function (arg1) {
	    var self = this;
	    self.permissionsById = {};
	    if (_.isObject(arg1)) {
	      if (arg1 instanceof AV.User) {
	        self.setReadAccess(arg1, true);
	        self.setWriteAccess(arg1, true);
	      } else {
	        if (_.isFunction(arg1)) {
	          throw "AV.ACL() called with a function.  Did you forget ()?";
	        }
	        AV._objectEach(arg1, function (accessList, userId) {
	          if (!_.isString(userId)) {
	            throw "Tried to create an ACL with an invalid userId.";
	          }
	          self.permissionsById[userId] = {};
	          AV._objectEach(accessList, function (allowed, permission) {
	            if (permission !== "read" && permission !== "write") {
	              throw "Tried to create an ACL with an invalid permission type.";
	            }
	            if (!_.isBoolean(allowed)) {
	              throw "Tried to create an ACL with an invalid permission value.";
	            }
	            self.permissionsById[userId][permission] = allowed;
	          });
	        });
	      }
	    }
	  };
	
	  /**
	   * Returns a JSON-encoded version of the ACL.
	   * @return {Object}
	   */
	  AV.ACL.prototype.toJSON = function () {
	    return _.clone(this.permissionsById);
	  };
	
	  AV.ACL.prototype._setAccess = function (accessType, userId, allowed) {
	    if (userId instanceof AV.User) {
	      userId = userId.id;
	    } else if (userId instanceof AV.Role) {
	      userId = "role:" + userId.getName();
	    }
	    if (!_.isString(userId)) {
	      throw "userId must be a string.";
	    }
	    if (!_.isBoolean(allowed)) {
	      throw "allowed must be either true or false.";
	    }
	    var permissions = this.permissionsById[userId];
	    if (!permissions) {
	      if (!allowed) {
	        // The user already doesn't have this permission, so no action needed.
	        return;
	      } else {
	        permissions = {};
	        this.permissionsById[userId] = permissions;
	      }
	    }
	
	    if (allowed) {
	      this.permissionsById[userId][accessType] = true;
	    } else {
	      delete permissions[accessType];
	      if (_.isEmpty(permissions)) {
	        delete permissions[userId];
	      }
	    }
	  };
	
	  AV.ACL.prototype._getAccess = function (accessType, userId) {
	    if (userId instanceof AV.User) {
	      userId = userId.id;
	    } else if (userId instanceof AV.Role) {
	      userId = "role:" + userId.getName();
	    }
	    var permissions = this.permissionsById[userId];
	    if (!permissions) {
	      return false;
	    }
	    return permissions[accessType] ? true : false;
	  };
	
	  /**
	   * Set whether the given user is allowed to read this object.
	   * @param userId An instance of AV.User or its objectId.
	   * @param {Boolean} allowed Whether that user should have read access.
	   */
	  AV.ACL.prototype.setReadAccess = function (userId, allowed) {
	    this._setAccess("read", userId, allowed);
	  };
	
	  /**
	   * Get whether the given user id is *explicitly* allowed to read this object.
	   * Even if this returns false, the user may still be able to access it if
	   * getPublicReadAccess returns true or a role that the user belongs to has
	   * write access.
	   * @param userId An instance of AV.User or its objectId, or a AV.Role.
	   * @return {Boolean}
	   */
	  AV.ACL.prototype.getReadAccess = function (userId) {
	    return this._getAccess("read", userId);
	  };
	
	  /**
	   * Set whether the given user id is allowed to write this object.
	   * @param userId An instance of AV.User or its objectId, or a AV.Role..
	   * @param {Boolean} allowed Whether that user should have write access.
	   */
	  AV.ACL.prototype.setWriteAccess = function (userId, allowed) {
	    this._setAccess("write", userId, allowed);
	  };
	
	  /**
	   * Get whether the given user id is *explicitly* allowed to write this object.
	   * Even if this returns false, the user may still be able to write it if
	   * getPublicWriteAccess returns true or a role that the user belongs to has
	   * write access.
	   * @param userId An instance of AV.User or its objectId, or a AV.Role.
	   * @return {Boolean}
	   */
	  AV.ACL.prototype.getWriteAccess = function (userId) {
	    return this._getAccess("write", userId);
	  };
	
	  /**
	   * Set whether the public is allowed to read this object.
	   * @param {Boolean} allowed
	   */
	  AV.ACL.prototype.setPublicReadAccess = function (allowed) {
	    this.setReadAccess(PUBLIC_KEY, allowed);
	  };
	
	  /**
	   * Get whether the public is allowed to read this object.
	   * @return {Boolean}
	   */
	  AV.ACL.prototype.getPublicReadAccess = function () {
	    return this.getReadAccess(PUBLIC_KEY);
	  };
	
	  /**
	   * Set whether the public is allowed to write this object.
	   * @param {Boolean} allowed
	   */
	  AV.ACL.prototype.setPublicWriteAccess = function (allowed) {
	    this.setWriteAccess(PUBLIC_KEY, allowed);
	  };
	
	  /**
	   * Get whether the public is allowed to write this object.
	   * @return {Boolean}
	   */
	  AV.ACL.prototype.getPublicWriteAccess = function () {
	    return this.getWriteAccess(PUBLIC_KEY);
	  };
	
	  /**
	   * Get whether users belonging to the given role are allowed
	   * to read this object. Even if this returns false, the role may
	   * still be able to write it if a parent role has read access.
	   *
	   * @param role The name of the role, or a AV.Role object.
	   * @return {Boolean} true if the role has read access. false otherwise.
	   * @throws {String} If role is neither a AV.Role nor a String.
	   */
	  AV.ACL.prototype.getRoleReadAccess = function (role) {
	    if (role instanceof AV.Role) {
	      // Normalize to the String name
	      role = role.getName();
	    }
	    if (_.isString(role)) {
	      return this.getReadAccess("role:" + role);
	    }
	    throw "role must be a AV.Role or a String";
	  };
	
	  /**
	   * Get whether users belonging to the given role are allowed
	   * to write this object. Even if this returns false, the role may
	   * still be able to write it if a parent role has write access.
	   *
	   * @param role The name of the role, or a AV.Role object.
	   * @return {Boolean} true if the role has write access. false otherwise.
	   * @throws {String} If role is neither a AV.Role nor a String.
	   */
	  AV.ACL.prototype.getRoleWriteAccess = function (role) {
	    if (role instanceof AV.Role) {
	      // Normalize to the String name
	      role = role.getName();
	    }
	    if (_.isString(role)) {
	      return this.getWriteAccess("role:" + role);
	    }
	    throw "role must be a AV.Role or a String";
	  };
	
	  /**
	   * Set whether users belonging to the given role are allowed
	   * to read this object.
	   *
	   * @param role The name of the role, or a AV.Role object.
	   * @param {Boolean} allowed Whether the given role can read this object.
	   * @throws {String} If role is neither a AV.Role nor a String.
	   */
	  AV.ACL.prototype.setRoleReadAccess = function (role, allowed) {
	    if (role instanceof AV.Role) {
	      // Normalize to the String name
	      role = role.getName();
	    }
	    if (_.isString(role)) {
	      this.setReadAccess("role:" + role, allowed);
	      return;
	    }
	    throw "role must be a AV.Role or a String";
	  };
	
	  /**
	   * Set whether users belonging to the given role are allowed
	   * to write this object.
	   *
	   * @param role The name of the role, or a AV.Role object.
	   * @param {Boolean} allowed Whether the given role can write this object.
	   * @throws {String} If role is neither a AV.Role nor a String.
	   */
	  AV.ACL.prototype.setRoleWriteAccess = function (role, allowed) {
	    if (role instanceof AV.Role) {
	      // Normalize to the String name
	      role = role.getName();
	    }
	    if (_.isString(role)) {
	      this.setWriteAccess("role:" + role, allowed);
	      return;
	    }
	    throw "role must be a AV.Role or a String";
	  };
	};

/***/ },
/* 33 */
/*!*********************************************!*\
  !*** ./~/leancloud-storage/dist/node/op.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	'use strict';
	
	var _ = __webpack_require__(/*! underscore */ 6);
	
	module.exports = function (AV) {
	
	  /**
	   * @class
	   * A AV.Op is an atomic operation that can be applied to a field in a
	   * AV.Object. For example, calling <code>object.set("foo", "bar")</code>
	   * is an example of a AV.Op.Set. Calling <code>object.unset("foo")</code>
	   * is a AV.Op.Unset. These operations are stored in a AV.Object and
	   * sent to the server as part of <code>object.save()</code> operations.
	   * Instances of AV.Op should be immutable.
	   *
	   * You should not create subclasses of AV.Op or instantiate AV.Op
	   * directly.
	   */
	  AV.Op = function () {
	    this._initialize.apply(this, arguments);
	  };
	
	  AV.Op.prototype = {
	    _initialize: function _initialize() {}
	  };
	
	  _.extend(AV.Op, {
	    /**
	     * To create a new Op, call AV.Op._extend();
	     */
	    _extend: AV._extend,
	
	    // A map of __op string to decoder function.
	    _opDecoderMap: {},
	
	    /**
	     * Registers a function to convert a json object with an __op field into an
	     * instance of a subclass of AV.Op.
	     */
	    _registerDecoder: function _registerDecoder(opName, decoder) {
	      AV.Op._opDecoderMap[opName] = decoder;
	    },
	
	    /**
	     * Converts a json object into an instance of a subclass of AV.Op.
	     */
	    _decode: function _decode(json) {
	      var decoder = AV.Op._opDecoderMap[json.__op];
	      if (decoder) {
	        return decoder(json);
	      } else {
	        return undefined;
	      }
	    }
	  });
	
	  /*
	   * Add a handler for Batch ops.
	   */
	  AV.Op._registerDecoder("Batch", function (json) {
	    var op = null;
	    AV._arrayEach(json.ops, function (nextOp) {
	      nextOp = AV.Op._decode(nextOp);
	      op = nextOp._mergeWithPrevious(op);
	    });
	    return op;
	  });
	
	  /**
	   * @class
	   * A Set operation indicates that either the field was changed using
	   * AV.Object.set, or it is a mutable container that was detected as being
	   * changed.
	   */
	  AV.Op.Set = AV.Op._extend( /** @lends AV.Op.Set.prototype */{
	    _initialize: function _initialize(value) {
	      this._value = value;
	    },
	
	    /**
	     * Returns the new value of this field after the set.
	     */
	    value: function value() {
	      return this._value;
	    },
	
	    /**
	     * Returns a JSON version of the operation suitable for sending to AV.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      return AV._encode(this.value());
	    },
	
	    _mergeWithPrevious: function _mergeWithPrevious(previous) {
	      return this;
	    },
	
	    _estimate: function _estimate(oldValue) {
	      return this.value();
	    }
	  });
	
	  /**
	   * A sentinel value that is returned by AV.Op.Unset._estimate to
	   * indicate the field should be deleted. Basically, if you find _UNSET as a
	   * value in your object, you should remove that key.
	   */
	  AV.Op._UNSET = {};
	
	  /**
	   * @class
	   * An Unset operation indicates that this field has been deleted from the
	   * object.
	   */
	  AV.Op.Unset = AV.Op._extend( /** @lends AV.Op.Unset.prototype */{
	    /**
	     * Returns a JSON version of the operation suitable for sending to AV.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      return { __op: "Delete" };
	    },
	
	    _mergeWithPrevious: function _mergeWithPrevious(previous) {
	      return this;
	    },
	
	    _estimate: function _estimate(oldValue) {
	      return AV.Op._UNSET;
	    }
	  });
	
	  AV.Op._registerDecoder("Delete", function (json) {
	    return new AV.Op.Unset();
	  });
	
	  /**
	   * @class
	   * An Increment is an atomic operation where the numeric value for the field
	   * will be increased by a given amount.
	   */
	  AV.Op.Increment = AV.Op._extend(
	  /** @lends AV.Op.Increment.prototype */{
	
	    _initialize: function _initialize(amount) {
	      this._amount = amount;
	    },
	
	    /**
	     * Returns the amount to increment by.
	     * @return {Number} the amount to increment by.
	     */
	    amount: function amount() {
	      return this._amount;
	    },
	
	    /**
	     * Returns a JSON version of the operation suitable for sending to AV.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      return { __op: "Increment", amount: this._amount };
	    },
	
	    _mergeWithPrevious: function _mergeWithPrevious(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof AV.Op.Unset) {
	        return new AV.Op.Set(this.amount());
	      } else if (previous instanceof AV.Op.Set) {
	        return new AV.Op.Set(previous.value() + this.amount());
	      } else if (previous instanceof AV.Op.Increment) {
	        return new AV.Op.Increment(this.amount() + previous.amount());
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },
	
	    _estimate: function _estimate(oldValue) {
	      if (!oldValue) {
	        return this.amount();
	      }
	      return oldValue + this.amount();
	    }
	  });
	
	  AV.Op._registerDecoder("Increment", function (json) {
	    return new AV.Op.Increment(json.amount);
	  });
	
	  /**
	   * @class
	   * Add is an atomic operation where the given objects will be appended to the
	   * array that is stored in this field.
	   */
	  AV.Op.Add = AV.Op._extend( /** @lends AV.Op.Add.prototype */{
	    _initialize: function _initialize(objects) {
	      this._objects = objects;
	    },
	
	    /**
	     * Returns the objects to be added to the array.
	     * @return {Array} The objects to be added to the array.
	     */
	    objects: function objects() {
	      return this._objects;
	    },
	
	    /**
	     * Returns a JSON version of the operation suitable for sending to AV.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      return { __op: "Add", objects: AV._encode(this.objects()) };
	    },
	
	    _mergeWithPrevious: function _mergeWithPrevious(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof AV.Op.Unset) {
	        return new AV.Op.Set(this.objects());
	      } else if (previous instanceof AV.Op.Set) {
	        return new AV.Op.Set(this._estimate(previous.value()));
	      } else if (previous instanceof AV.Op.Add) {
	        return new AV.Op.Add(previous.objects().concat(this.objects()));
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },
	
	    _estimate: function _estimate(oldValue) {
	      if (!oldValue) {
	        return _.clone(this.objects());
	      } else {
	        return oldValue.concat(this.objects());
	      }
	    }
	  });
	
	  AV.Op._registerDecoder("Add", function (json) {
	    return new AV.Op.Add(AV._decode(undefined, json.objects));
	  });
	
	  /**
	   * @class
	   * AddUnique is an atomic operation where the given items will be appended to
	   * the array that is stored in this field only if they were not already
	   * present in the array.
	   */
	  AV.Op.AddUnique = AV.Op._extend(
	  /** @lends AV.Op.AddUnique.prototype */{
	
	    _initialize: function _initialize(objects) {
	      this._objects = _.uniq(objects);
	    },
	
	    /**
	     * Returns the objects to be added to the array.
	     * @return {Array} The objects to be added to the array.
	     */
	    objects: function objects() {
	      return this._objects;
	    },
	
	    /**
	     * Returns a JSON version of the operation suitable for sending to AV.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      return { __op: "AddUnique", objects: AV._encode(this.objects()) };
	    },
	
	    _mergeWithPrevious: function _mergeWithPrevious(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof AV.Op.Unset) {
	        return new AV.Op.Set(this.objects());
	      } else if (previous instanceof AV.Op.Set) {
	        return new AV.Op.Set(this._estimate(previous.value()));
	      } else if (previous instanceof AV.Op.AddUnique) {
	        return new AV.Op.AddUnique(this._estimate(previous.objects()));
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },
	
	    _estimate: function _estimate(oldValue) {
	      if (!oldValue) {
	        return _.clone(this.objects());
	      } else {
	        // We can't just take the _.uniq(_.union(...)) of oldValue and
	        // this.objects, because the uniqueness may not apply to oldValue
	        // (especially if the oldValue was set via .set())
	        var newValue = _.clone(oldValue);
	        AV._arrayEach(this.objects(), function (obj) {
	          if (obj instanceof AV.Object && obj.id) {
	            var matchingObj = _.find(newValue, function (anObj) {
	              return anObj instanceof AV.Object && anObj.id === obj.id;
	            });
	            if (!matchingObj) {
	              newValue.push(obj);
	            } else {
	              var index = _.indexOf(newValue, matchingObj);
	              newValue[index] = obj;
	            }
	          } else if (!_.contains(newValue, obj)) {
	            newValue.push(obj);
	          }
	        });
	        return newValue;
	      }
	    }
	  });
	
	  AV.Op._registerDecoder("AddUnique", function (json) {
	    return new AV.Op.AddUnique(AV._decode(undefined, json.objects));
	  });
	
	  /**
	   * @class
	   * Remove is an atomic operation where the given objects will be removed from
	   * the array that is stored in this field.
	   */
	  AV.Op.Remove = AV.Op._extend( /** @lends AV.Op.Remove.prototype */{
	    _initialize: function _initialize(objects) {
	      this._objects = _.uniq(objects);
	    },
	
	    /**
	     * Returns the objects to be removed from the array.
	     * @return {Array} The objects to be removed from the array.
	     */
	    objects: function objects() {
	      return this._objects;
	    },
	
	    /**
	     * Returns a JSON version of the operation suitable for sending to AV.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      return { __op: "Remove", objects: AV._encode(this.objects()) };
	    },
	
	    _mergeWithPrevious: function _mergeWithPrevious(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof AV.Op.Unset) {
	        return previous;
	      } else if (previous instanceof AV.Op.Set) {
	        return new AV.Op.Set(this._estimate(previous.value()));
	      } else if (previous instanceof AV.Op.Remove) {
	        return new AV.Op.Remove(_.union(previous.objects(), this.objects()));
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },
	
	    _estimate: function _estimate(oldValue) {
	      if (!oldValue) {
	        return [];
	      } else {
	        var newValue = _.difference(oldValue, this.objects());
	        // If there are saved AV Objects being removed, also remove them.
	        AV._arrayEach(this.objects(), function (obj) {
	          if (obj instanceof AV.Object && obj.id) {
	            newValue = _.reject(newValue, function (other) {
	              return other instanceof AV.Object && other.id === obj.id;
	            });
	          }
	        });
	        return newValue;
	      }
	    }
	  });
	
	  AV.Op._registerDecoder("Remove", function (json) {
	    return new AV.Op.Remove(AV._decode(undefined, json.objects));
	  });
	
	  /**
	   * @class
	   * A Relation operation indicates that the field is an instance of
	   * AV.Relation, and objects are being added to, or removed from, that
	   * relation.
	   */
	  AV.Op.Relation = AV.Op._extend(
	  /** @lends AV.Op.Relation.prototype */{
	
	    _initialize: function _initialize(adds, removes) {
	      this._targetClassName = null;
	
	      var self = this;
	
	      var pointerToId = function pointerToId(object) {
	        if (object instanceof AV.Object) {
	          if (!object.id) {
	            throw "You can't add an unsaved AV.Object to a relation.";
	          }
	          if (!self._targetClassName) {
	            self._targetClassName = object.className;
	          }
	          if (self._targetClassName !== object.className) {
	            throw "Tried to create a AV.Relation with 2 different types: " + self._targetClassName + " and " + object.className + ".";
	          }
	          return object.id;
	        }
	        return object;
	      };
	
	      this.relationsToAdd = _.uniq(_.map(adds, pointerToId));
	      this.relationsToRemove = _.uniq(_.map(removes, pointerToId));
	    },
	
	    /**
	     * Returns an array of unfetched AV.Object that are being added to the
	     * relation.
	     * @return {Array}
	     */
	    added: function added() {
	      var self = this;
	      return _.map(this.relationsToAdd, function (objectId) {
	        var object = AV.Object._create(self._targetClassName);
	        object.id = objectId;
	        return object;
	      });
	    },
	
	    /**
	     * Returns an array of unfetched AV.Object that are being removed from
	     * the relation.
	     * @return {Array}
	     */
	    removed: function removed() {
	      var self = this;
	      return _.map(this.relationsToRemove, function (objectId) {
	        var object = AV.Object._create(self._targetClassName);
	        object.id = objectId;
	        return object;
	      });
	    },
	
	    /**
	     * Returns a JSON version of the operation suitable for sending to AV.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      var adds = null;
	      var removes = null;
	      var self = this;
	      var idToPointer = function idToPointer(id) {
	        return { __type: 'Pointer',
	          className: self._targetClassName,
	          objectId: id };
	      };
	      var pointers = null;
	      if (this.relationsToAdd.length > 0) {
	        pointers = _.map(this.relationsToAdd, idToPointer);
	        adds = { "__op": "AddRelation", "objects": pointers };
	      }
	
	      if (this.relationsToRemove.length > 0) {
	        pointers = _.map(this.relationsToRemove, idToPointer);
	        removes = { "__op": "RemoveRelation", "objects": pointers };
	      }
	
	      if (adds && removes) {
	        return { "__op": "Batch", "ops": [adds, removes] };
	      }
	
	      return adds || removes || {};
	    },
	
	    _mergeWithPrevious: function _mergeWithPrevious(previous) {
	      if (!previous) {
	        return this;
	      } else if (previous instanceof AV.Op.Unset) {
	        throw "You can't modify a relation after deleting it.";
	      } else if (previous instanceof AV.Op.Relation) {
	        if (previous._targetClassName && previous._targetClassName !== this._targetClassName) {
	          throw "Related object must be of class " + previous._targetClassName + ", but " + this._targetClassName + " was passed in.";
	        }
	        var newAdd = _.union(_.difference(previous.relationsToAdd, this.relationsToRemove), this.relationsToAdd);
	        var newRemove = _.union(_.difference(previous.relationsToRemove, this.relationsToAdd), this.relationsToRemove);
	
	        var newRelation = new AV.Op.Relation(newAdd, newRemove);
	        newRelation._targetClassName = this._targetClassName;
	        return newRelation;
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    },
	
	    _estimate: function _estimate(oldValue, object, key) {
	      if (!oldValue) {
	        var relation = new AV.Relation(object, key);
	        relation.targetClassName = this._targetClassName;
	      } else if (oldValue instanceof AV.Relation) {
	        if (this._targetClassName) {
	          if (oldValue.targetClassName) {
	            if (oldValue.targetClassName !== this._targetClassName) {
	              throw "Related object must be a " + oldValue.targetClassName + ", but a " + this._targetClassName + " was passed in.";
	            }
	          } else {
	            oldValue.targetClassName = this._targetClassName;
	          }
	        }
	        return oldValue;
	      } else {
	        throw "Op is invalid after previous op.";
	      }
	    }
	  });
	
	  AV.Op._registerDecoder("AddRelation", function (json) {
	    return new AV.Op.Relation(AV._decode(undefined, json.objects), []);
	  });
	  AV.Op._registerDecoder("RemoveRelation", function (json) {
	    return new AV.Op.Relation([], AV._decode(undefined, json.objects));
	  });
	};

/***/ },
/* 34 */
/*!***************************************************!*\
  !*** ./~/leancloud-storage/dist/node/relation.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	'use strict';
	
	var _ = __webpack_require__(/*! underscore */ 6);
	
	module.exports = function (AV) {
	  /**
	   * Creates a new Relation for the given parent object and key. This
	   * constructor should rarely be used directly, but rather created by
	   * AV.Object.relation.
	   * @param {AV.Object} parent The parent of this relation.
	   * @param {String} key The key for this relation on the parent.
	   * @see AV.Object#relation
	   * @class
	   *
	   * <p>
	   * A class that is used to access all of the children of a many-to-many
	   * relationship.  Each instance of AV.Relation is associated with a
	   * particular parent object and key.
	   * </p>
	   */
	  AV.Relation = function (parent, key) {
	    if (!_.isString(key)) {
	      throw new TypeError('key must be a string');
	    }
	    this.parent = parent;
	    this.key = key;
	    this.targetClassName = null;
	  };
	
	  /**
	   * Creates a query that can be used to query the parent objects in this relation.
	   * @param {String} parentClass The parent class or name.
	   * @param {String} relationKey The relation field key in parent.
	   * @param {AV.Object} child The child object.
	   * @return {AV.Query}
	   */
	  AV.Relation.reverseQuery = function (parentClass, relationKey, child) {
	    var query = new AV.Query(parentClass);
	    query.equalTo(relationKey, child._toPointer());
	    return query;
	  };
	
	  AV.Relation.prototype = {
	    /**
	     * Makes sure that this relation has the right parent and key.
	     */
	    _ensureParentAndKey: function _ensureParentAndKey(parent, key) {
	      this.parent = this.parent || parent;
	      this.key = this.key || key;
	      if (this.parent !== parent) {
	        throw "Internal Error. Relation retrieved from two different Objects.";
	      }
	      if (this.key !== key) {
	        throw "Internal Error. Relation retrieved from two different keys.";
	      }
	    },
	
	    /**
	     * Adds a AV.Object or an array of AV.Objects to the relation.
	     * @param {} objects The item or items to add.
	     */
	    add: function add(objects) {
	      if (!_.isArray(objects)) {
	        objects = [objects];
	      }
	
	      var change = new AV.Op.Relation(objects, []);
	      this.parent.set(this.key, change);
	      this.targetClassName = change._targetClassName;
	    },
	
	    /**
	     * Removes a AV.Object or an array of AV.Objects from this relation.
	     * @param {} objects The item or items to remove.
	     */
	    remove: function remove(objects) {
	      if (!_.isArray(objects)) {
	        objects = [objects];
	      }
	
	      var change = new AV.Op.Relation([], objects);
	      this.parent.set(this.key, change);
	      this.targetClassName = change._targetClassName;
	    },
	
	    /**
	     * Returns a JSON version of the object suitable for saving to disk.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      return { "__type": "Relation", "className": this.targetClassName };
	    },
	
	    /**
	     * Returns a AV.Query that is limited to objects in this
	     * relation.
	     * @return {AV.Query}
	     */
	    query: function query() {
	      var targetClass;
	      var query;
	      if (!this.targetClassName) {
	        targetClass = AV.Object._getSubclass(this.parent.className);
	        query = new AV.Query(targetClass);
	        query._extraOptions.redirectClassNameForKey = this.key;
	      } else {
	        targetClass = AV.Object._getSubclass(this.targetClassName);
	        query = new AV.Query(targetClass);
	      }
	      query._addCondition("$relatedTo", "object", this.parent._toPointer());
	      query._addCondition("$relatedTo", "key", this.key);
	
	      return query;
	    }
	  };
	};

/***/ },
/* 35 */
/*!***********************************************!*\
  !*** ./~/leancloud-storage/dist/node/file.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var cos = __webpack_require__(/*! ./uploader/cos */ 36);
	var qiniu = __webpack_require__(/*! ./uploader/qiniu */ 37);
	var s3 = __webpack_require__(/*! ./uploader/s3 */ 38);
	var AVError = __webpack_require__(/*! ./error */ 29);
	var AVRequest = __webpack_require__(/*! ./request */ 16).request;
	
	module.exports = function (AV) {
	
	  // 挂载一些配置
	  var avConfig = AV._config;
	
	  // port from browserify path module
	  // since react-native packager won't shim node modules.
	  var extname = function extname(path) {
	    return path.match(/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/)[4];
	  };
	
	  var b64Digit = function b64Digit(number) {
	    if (number < 26) {
	      return String.fromCharCode(65 + number);
	    }
	    if (number < 52) {
	      return String.fromCharCode(97 + (number - 26));
	    }
	    if (number < 62) {
	      return String.fromCharCode(48 + (number - 52));
	    }
	    if (number === 62) {
	      return '+';
	    }
	    if (number === 63) {
	      return '/';
	    }
	    throw new Error('Tried to encode large digit ' + number + ' in base64.');
	  };
	
	  var encodeBase64 = function encodeBase64(array) {
	    var chunks = [];
	    chunks.length = Math.ceil(array.length / 3);
	    _.times(chunks.length, function (i) {
	      var b1 = array[i * 3];
	      var b2 = array[i * 3 + 1] || 0;
	      var b3 = array[i * 3 + 2] || 0;
	
	      var has2 = i * 3 + 1 < array.length;
	      var has3 = i * 3 + 2 < array.length;
	
	      chunks[i] = [b64Digit(b1 >> 2 & 0x3F), b64Digit(b1 << 4 & 0x30 | b2 >> 4 & 0x0F), has2 ? b64Digit(b2 << 2 & 0x3C | b3 >> 6 & 0x03) : "=", has3 ? b64Digit(b3 & 0x3F) : "="].join("");
	    });
	    return chunks.join("");
	  };
	
	  // 取出 dataURL 中 base64 的部分
	  var dataURLToBase64 = function dataURLToBase64(base64) {
	    if (base64.split(',')[0] && base64.split(',')[0].indexOf('base64') >= 0) {
	      base64 = base64.split(',')[1];
	    }
	    return base64;
	  };
	
	  // 判断是否是国内节点
	  var isCnNode = function isCnNode() {
	    return avConfig.region === 'cn';
	  };
	
	  // A list of file extensions to mime types as found here:
	  // http://stackoverflow.com/questions/58510/using-net-how-can-you-find-the-
	  //     mime-type-of-a-file-based-on-the-file-signature
	  var mimeTypes = {
	    ai: "application/postscript",
	    aif: "audio/x-aiff",
	    aifc: "audio/x-aiff",
	    aiff: "audio/x-aiff",
	    asc: "text/plain",
	    atom: "application/atom+xml",
	    au: "audio/basic",
	    avi: "video/x-msvideo",
	    bcpio: "application/x-bcpio",
	    bin: "application/octet-stream",
	    bmp: "image/bmp",
	    cdf: "application/x-netcdf",
	    cgm: "image/cgm",
	    "class": "application/octet-stream",
	    cpio: "application/x-cpio",
	    cpt: "application/mac-compactpro",
	    csh: "application/x-csh",
	    css: "text/css",
	    dcr: "application/x-director",
	    dif: "video/x-dv",
	    dir: "application/x-director",
	    djv: "image/vnd.djvu",
	    djvu: "image/vnd.djvu",
	    dll: "application/octet-stream",
	    dmg: "application/octet-stream",
	    dms: "application/octet-stream",
	    doc: "application/msword",
	    docx: "application/vnd.openxmlformats-officedocument.wordprocessingml." + "document",
	    dotx: "application/vnd.openxmlformats-officedocument.wordprocessingml." + "template",
	    docm: "application/vnd.ms-word.document.macroEnabled.12",
	    dotm: "application/vnd.ms-word.template.macroEnabled.12",
	    dtd: "application/xml-dtd",
	    dv: "video/x-dv",
	    dvi: "application/x-dvi",
	    dxr: "application/x-director",
	    eps: "application/postscript",
	    etx: "text/x-setext",
	    exe: "application/octet-stream",
	    ez: "application/andrew-inset",
	    gif: "image/gif",
	    gram: "application/srgs",
	    grxml: "application/srgs+xml",
	    gtar: "application/x-gtar",
	    hdf: "application/x-hdf",
	    hqx: "application/mac-binhex40",
	    htm: "text/html",
	    html: "text/html",
	    ice: "x-conference/x-cooltalk",
	    ico: "image/x-icon",
	    ics: "text/calendar",
	    ief: "image/ief",
	    ifb: "text/calendar",
	    iges: "model/iges",
	    igs: "model/iges",
	    jnlp: "application/x-java-jnlp-file",
	    jp2: "image/jp2",
	    jpe: "image/jpeg",
	    jpeg: "image/jpeg",
	    jpg: "image/jpeg",
	    js: "application/x-javascript",
	    kar: "audio/midi",
	    latex: "application/x-latex",
	    lha: "application/octet-stream",
	    lzh: "application/octet-stream",
	    m3u: "audio/x-mpegurl",
	    m4a: "audio/mp4a-latm",
	    m4b: "audio/mp4a-latm",
	    m4p: "audio/mp4a-latm",
	    m4u: "video/vnd.mpegurl",
	    m4v: "video/x-m4v",
	    mac: "image/x-macpaint",
	    man: "application/x-troff-man",
	    mathml: "application/mathml+xml",
	    me: "application/x-troff-me",
	    mesh: "model/mesh",
	    mid: "audio/midi",
	    midi: "audio/midi",
	    mif: "application/vnd.mif",
	    mov: "video/quicktime",
	    movie: "video/x-sgi-movie",
	    mp2: "audio/mpeg",
	    mp3: "audio/mpeg",
	    mp4: "video/mp4",
	    mpe: "video/mpeg",
	    mpeg: "video/mpeg",
	    mpg: "video/mpeg",
	    mpga: "audio/mpeg",
	    ms: "application/x-troff-ms",
	    msh: "model/mesh",
	    mxu: "video/vnd.mpegurl",
	    nc: "application/x-netcdf",
	    oda: "application/oda",
	    ogg: "application/ogg",
	    pbm: "image/x-portable-bitmap",
	    pct: "image/pict",
	    pdb: "chemical/x-pdb",
	    pdf: "application/pdf",
	    pgm: "image/x-portable-graymap",
	    pgn: "application/x-chess-pgn",
	    pic: "image/pict",
	    pict: "image/pict",
	    png: "image/png",
	    pnm: "image/x-portable-anymap",
	    pnt: "image/x-macpaint",
	    pntg: "image/x-macpaint",
	    ppm: "image/x-portable-pixmap",
	    ppt: "application/vnd.ms-powerpoint",
	    pptx: "application/vnd.openxmlformats-officedocument.presentationml." + "presentation",
	    potx: "application/vnd.openxmlformats-officedocument.presentationml." + "template",
	    ppsx: "application/vnd.openxmlformats-officedocument.presentationml." + "slideshow",
	    ppam: "application/vnd.ms-powerpoint.addin.macroEnabled.12",
	    pptm: "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
	    potm: "application/vnd.ms-powerpoint.template.macroEnabled.12",
	    ppsm: "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
	    ps: "application/postscript",
	    qt: "video/quicktime",
	    qti: "image/x-quicktime",
	    qtif: "image/x-quicktime",
	    ra: "audio/x-pn-realaudio",
	    ram: "audio/x-pn-realaudio",
	    ras: "image/x-cmu-raster",
	    rdf: "application/rdf+xml",
	    rgb: "image/x-rgb",
	    rm: "application/vnd.rn-realmedia",
	    roff: "application/x-troff",
	    rtf: "text/rtf",
	    rtx: "text/richtext",
	    sgm: "text/sgml",
	    sgml: "text/sgml",
	    sh: "application/x-sh",
	    shar: "application/x-shar",
	    silo: "model/mesh",
	    sit: "application/x-stuffit",
	    skd: "application/x-koan",
	    skm: "application/x-koan",
	    skp: "application/x-koan",
	    skt: "application/x-koan",
	    smi: "application/smil",
	    smil: "application/smil",
	    snd: "audio/basic",
	    so: "application/octet-stream",
	    spl: "application/x-futuresplash",
	    src: "application/x-wais-source",
	    sv4cpio: "application/x-sv4cpio",
	    sv4crc: "application/x-sv4crc",
	    svg: "image/svg+xml",
	    swf: "application/x-shockwave-flash",
	    t: "application/x-troff",
	    tar: "application/x-tar",
	    tcl: "application/x-tcl",
	    tex: "application/x-tex",
	    texi: "application/x-texinfo",
	    texinfo: "application/x-texinfo",
	    tif: "image/tiff",
	    tiff: "image/tiff",
	    tr: "application/x-troff",
	    tsv: "text/tab-separated-values",
	    txt: "text/plain",
	    ustar: "application/x-ustar",
	    vcd: "application/x-cdlink",
	    vrml: "model/vrml",
	    vxml: "application/voicexml+xml",
	    wav: "audio/x-wav",
	    wbmp: "image/vnd.wap.wbmp",
	    wbmxl: "application/vnd.wap.wbxml",
	    wml: "text/vnd.wap.wml",
	    wmlc: "application/vnd.wap.wmlc",
	    wmls: "text/vnd.wap.wmlscript",
	    wmlsc: "application/vnd.wap.wmlscriptc",
	    wrl: "model/vrml",
	    xbm: "image/x-xbitmap",
	    xht: "application/xhtml+xml",
	    xhtml: "application/xhtml+xml",
	    xls: "application/vnd.ms-excel",
	    xml: "application/xml",
	    xpm: "image/x-xpixmap",
	    xsl: "application/xml",
	    xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
	    xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml." + "template",
	    xlsm: "application/vnd.ms-excel.sheet.macroEnabled.12",
	    xltm: "application/vnd.ms-excel.template.macroEnabled.12",
	    xlam: "application/vnd.ms-excel.addin.macroEnabled.12",
	    xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.12",
	    xslt: "application/xslt+xml",
	    xul: "application/vnd.mozilla.xul+xml",
	    xwd: "image/x-xwindowdump",
	    xyz: "chemical/x-xyz",
	    zip: "application/zip"
	  };
	
	  /**
	   * Reads a File using a FileReader.
	   * @param file {File} the File to read.
	   * @param type {String} (optional) the mimetype to override with.
	   * @return {AV.Promise} A Promise that will be fulfilled with a
	   *     base64-encoded string of the data and its mime type.
	   */
	  var readAsync = function readAsync(file, type) {
	    var promise = new AV.Promise();
	
	    if (typeof FileReader === "undefined") {
	      return AV.Promise.error(new AVError(-1, "Attempted to use a FileReader on an unsupported browser."));
	    }
	
	    var reader = new global.FileReader();
	    reader.onloadend = function () {
	      if (reader.readyState !== 2) {
	        promise.reject(new AVError(-1, "Error reading file."));
	        return;
	      }
	
	      var dataURL = reader.result;
	      var matches = /^data:([^;]*);base64,(.*)$/.exec(dataURL);
	      if (!matches) {
	        promise.reject(new AVError(-1, "Unable to interpret data URL: " + dataURL));
	        return;
	      }
	
	      promise.resolve(matches[2], type || matches[1]);
	    };
	    reader.readAsDataURL(file);
	    return promise;
	  };
	
	  /**
	   * A AV.File is a local representation of a file that is saved to the AV
	   * cloud.
	   * @param name {String} The file's name. This will change to a unique value
	   *     once the file has finished saving.
	   * @param data {Array} The data for the file, as either:
	   *     1. an Array of byte value Numbers, or
	   *     2. an Object like { base64: "..." } with a base64-encoded String.
	   *     3. a File object selected with a file upload control. (3) only works
	   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.
	   *        For example:<pre>
	   *     4.a Buffer object in Node.js runtime.
	   * var fileUploadControl = $("#profilePhotoFileUpload")[0];
	   * if (fileUploadControl.files.length > 0) {
	   *   var file = fileUploadControl.files[0];
	   *   var name = "photo.jpg";
	   *   var file = new AV.File(name, file);
	   *   file.save().then(function() {
	   *     // The file has been saved to AV.
	   *   }, function(error) {
	   *     // The file either could not be read, or could not be saved to AV.
	   *   });
	   * }</pre>
	   *
	   * @class
	   * @param type {String} Optional Content-Type header to use for the file. If
	   *     this is omitted, the content type will be inferred from the name's
	   *     extension.
	   */
	  AV.File = function (name, data, type) {
	
	    this.attributes = {
	      name: name,
	      url: '',
	      metaData: {},
	      // 用来存储转换后要上传的 base64 String
	      base64: ''
	    };
	
	    var owner = void 0;
	    if (data && data.owner) {
	      owner = data.owner;
	    } else if (!AV._config.disableCurrentUser) {
	      try {
	        owner = AV.User.current();
	      } catch (error) {
	        if ('SYNC_API_NOT_AVAILABLE' === error.code) {
	          console.warn('Get current user failed. It seems this runtime use an async storage system, please create AV.File in the callback of AV.User.currentAsync().');
	        } else {
	          throw error;
	        }
	      }
	    }
	
	    this.attributes.metaData = {
	      owner: owner ? owner.id : 'unknown'
	    };
	
	    // Guess the content type from the extension if we need to.
	    var extension = /\.([^.]*)$/.exec(name);
	    if (extension) {
	      extension = extension[1].toLowerCase();
	    }
	    var guessedType = type || mimeTypes[extension] || "text/plain";
	    this._guessedType = guessedType;
	
	    if (_.isArray(data)) {
	      this.attributes.metaData.size = data.length;
	      data = { base64: encodeBase64(data) };
	    }
	    if (data && data.base64) {
	      var parseBase64 = __webpack_require__(/*! ./browserify-wrapper/parse-base64 */ 39);
	      var dataBase64 = parseBase64(data.base64, guessedType);
	      this.attributes.base64 = dataURLToBase64(data.base64);
	      this._source = AV.Promise.as(dataBase64, guessedType);
	    } else if (data && data.blob) {
	      if (!data.blob.type) {
	        data.blob.type = guessedType;
	      }
	      this._source = AV.Promise.as(data.blob, guessedType);
	    } else if (typeof File !== "undefined" && data instanceof global.File) {
	      if (data.size) {
	        this.attributes.metaData.size = data.size;
	      }
	      this._source = AV.Promise.as(data, guessedType);
	    } else if (typeof global.Buffer !== "undefined" && global.Buffer.isBuffer(data)) {
	      // use global.Buffer to prevent browserify pack Buffer module
	      this.attributes.metaData.size = data.length;
	      this._source = AV.Promise.as(data, guessedType);
	    } else if (_.isString(data)) {
	      throw new Error("Creating a AV.File from a String is not yet supported.");
	    }
	  };
	
	  /**
	   * Creates a fresh AV.File object with exists url for saving to AVOS Cloud.
	   * @param {String} name the file name
	   * @param {String} url the file url.
	   * @param {Object} metaData the file metadata object,it's optional.
	   * @param {String} Optional Content-Type header to use for the file. If
	   *     this is omitted, the content type will be inferred from the name's
	   *     extension.
	   * @return {AV.File} the file object
	   */
	  AV.File.withURL = function (name, url, metaData, type) {
	    if (!name || !url) {
	      throw "Please provide file name and url";
	    }
	    var file = new AV.File(name, null, type);
	    //copy metaData properties to file.
	    if (metaData) {
	      for (var prop in metaData) {
	        if (!file.attributes.metaData[prop]) file.attributes.metaData[prop] = metaData[prop];
	      }
	    }
	    file.attributes.url = url;
	    //Mark the file is from external source.
	    file.attributes.metaData.__source = 'external';
	    return file;
	  };
	
	  /**
	   * Creates a file object with exists objectId.
	   * @param {String} objectId The objectId string
	   * @return {AV.File} the file object
	   */
	  AV.File.createWithoutData = function (objectId) {
	    var file = new AV.File();
	    file.id = objectId;
	    return file;
	  };
	
	  AV.File.prototype = {
	    className: '_File',
	
	    toJSON: function toJSON() {
	      return AV._encode(this);
	    },
	
	    /**
	     * Returns the ACL for this file.
	     * @returns {AV.ACL} An instance of AV.ACL.
	     */
	    getACL: function getACL() {
	      return this._acl;
	    },
	
	    /**
	     * Sets the ACL to be used for this file.
	     * @param {AV.ACL} acl An instance of AV.ACL.
	     */
	    setACL: function setACL(acl) {
	      if (!(acl instanceof AV.ACL)) {
	        return new AVError(AVError.OTHER_CAUSE, 'ACL must be a AV.ACL.');
	      }
	      this._acl = acl;
	    },
	
	    /**
	     * Gets the name of the file. Before save is called, this is the filename
	     * given by the user. After save is called, that name gets prefixed with a
	     * unique identifier.
	     */
	    name: function name() {
	      return this.get('name');
	    },
	
	    /**
	     * Gets the url of the file. It is only available after you save the file or
	     * after you get the file from a AV.Object.
	     * @return {String}
	     */
	    url: function url() {
	      return this.get('url');
	    },
	
	    /**
	    * Gets the attributs of the file object.
	    * @param {String} The attribute name which want to get.
	    * @returns {String|Number|Array|Object}
	    */
	    get: function get(attrName) {
	      switch (attrName) {
	        case 'objectId':
	        case 'id':
	          return this.id;
	        case 'url':
	        case 'name':
	        case 'metaData':
	        case 'createdAt':
	        case 'updatedAt':
	          return this.attributes[attrName];
	        default:
	          return this.attributes.metaData[attrName];
	      }
	    },
	
	    /**
	    * Set the metaData of the file object.
	    * @param {Object} Object is an key value Object for setting metaData.
	    * @param {String} attr is an optional metadata key.
	    * @param {Object} value is an optional metadata value.
	    * @returns {String|Number|Array|Object}
	    */
	    set: function set() {
	      var _this = this;
	
	      var set = function set(attrName, value) {
	        switch (attrName) {
	          case 'name':
	          case 'url':
	          case 'base64':
	          case 'metaData':
	            _this.attributes[attrName] = value;
	            break;
	          default:
	            // File 并非一个 AVObject，不能完全自定义其他属性，所以只能都放在 metaData 上面
	            _this.attributes.metaData[attrName] = value;
	            break;
	        }
	      };
	
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      switch (args.length) {
	        case 1:
	          // 传入一个 Object
	          for (var k in args[0]) {
	            set(k, args[0][k]);
	          }
	          break;
	        case 2:
	          set(args[0], args[1]);
	          break;
	      }
	    },
	
	    /**
	    * <p>Returns the file's metadata JSON object if no arguments is given.Returns the
	    * metadata value if a key is given.Set metadata value if key and value are both given.</p>
	    * <p><pre>
	    *  var metadata = file.metaData(); //Get metadata JSON object.
	    *  var size = file.metaData('size');  // Get the size metadata value.
	    *  file.metaData('format', 'jpeg'); //set metadata attribute and value.
	    *</pre></p>
	    * @return {Object} The file's metadata JSON object.
	    * @param {String} attr an optional metadata key.
	    * @param {Object} value an optional metadata value.
	    **/
	    metaData: function metaData(attr, value) {
	      if (attr && value) {
	        this.attributes.metaData[attr] = value;
	        return this;
	      } else if (attr && !value) {
	        return this.attributes.metaData[attr];
	      } else {
	        return this.attributes.metaData;
	      }
	    },
	
	    /**
	     * 如果文件是图片，获取图片的缩略图URL。可以传入宽度、高度、质量、格式等参数。
	     * @return {String} 缩略图URL
	     * @param {Number} width 宽度，单位：像素
	     * @param {Number} heigth 高度，单位：像素
	     * @param {Number} quality 质量，1-100的数字，默认100
	     * @param {Number} scaleToFit 是否将图片自适应大小。默认为true。
	     * @param {String} fmt 格式，默认为png，也可以为jpeg,gif等格式。
	     */
	
	    thumbnailURL: function thumbnailURL(width, height, quality, scaleToFit, fmt) {
	      var url = this.attributes.url;
	      if (!url) {
	        throw new Error('Invalid url.');
	      }
	      if (!width || !height || width <= 0 || height <= 0) {
	        throw new Error('Invalid width or height value.');
	      }
	      quality = quality || 100;
	      scaleToFit = !scaleToFit ? true : scaleToFit;
	      if (quality <= 0 || quality > 100) {
	        throw new Error('Invalid quality value.');
	      }
	      fmt = fmt || 'png';
	      var mode = scaleToFit ? 2 : 1;
	      return url + '?imageView/' + mode + '/w/' + width + '/h/' + height + '/q/' + quality + '/format/' + fmt;
	    },
	
	    /**
	    * Returns the file's size.
	    * @return {Number} The file's size in bytes.
	    **/
	    size: function size() {
	      return this.metaData().size;
	    },
	
	    /**
	     * Returns the file's owner.
	     * @return {String} The file's owner id.
	     */
	    ownerId: function ownerId() {
	      return this.metaData().owner;
	    },
	
	    /**
	    * Destroy the file.
	    * @return {AV.Promise} A promise that is fulfilled when the destroy
	    *     completes.
	    */
	    destroy: function destroy(options) {
	      if (!this.id) {
	        return AV.Promise.error('The file id is not eixsts.')._thenRunCallbacks(options);
	      }
	      var request = AVRequest("files", null, this.id, 'DELETE', options && options.sessionToken);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Request Qiniu upload token
	     * @param {string} type
	     * @return {AV.Promise} Resolved with the response
	     * @private
	     */
	    _fileToken: function _fileToken(type) {
	      var route = arguments.length <= 1 || arguments[1] === undefined ? 'fileTokens' : arguments[1];
	
	      var name = this.attributes.name;
	
	      // Create 16-bits uuid as qiniu key.
	      var extName = extname(name);
	      var hexOctet = function hexOctet() {
	        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	      };
	      var key = hexOctet() + hexOctet() + hexOctet() + hexOctet() + hexOctet() + extName;
	      var data = {
	        key: key,
	        name: name,
	        ACL: this._acl,
	        mime_type: type,
	        metaData: this.attributes.metaData
	      };
	      if (type && !this.attributes.metaData.mime_type) {
	        this.attributes.metaData.mime_type = type;
	      }
	      this._qiniu_key = key;
	      return AVRequest(route, null, null, 'POST', data);
	    },
	
	
	    /**
	     * @callback UploadProgressCallback
	     * @param {XMLHttpRequestProgressEvent} event - The progress event with 'loaded' and 'total' attributes
	     */
	    /**
	     * Saves the file to the AV cloud.
	     * @param {Object} saveOptions
	     * @param {UploadProgressCallback} [saveOptions.onProgress]
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} Promise that is resolved when the save finishes.
	     */
	    save: function save() {
	      var _this2 = this;
	
	      if (this.id) {
	        throw new Error('File already saved. If you want to manipulate a file, use AV.Query to get it.');
	      }
	      var options = void 0;
	      var saveOptions = {};
	      switch (arguments.length) {
	        case 1:
	          options = arguments.length <= 0 ? undefined : arguments[0];
	          break;
	        case 2:
	          saveOptions = arguments.length <= 0 ? undefined : arguments[0];
	          options = arguments.length <= 1 ? undefined : arguments[1];
	          break;
	      }
	      if (!this._previousSave) {
	        if (this._source) {
	          this._previousSave = this._source.then(function (data, type) {
	            return _this2._fileToken(type).then(function (uploadInfo) {
	              var uploadPromise = void 0;
	              switch (uploadInfo.provider) {
	                case 's3':
	                  uploadPromise = s3(uploadInfo, data, _this2, saveOptions);
	                  break;
	                case 'qcloud':
	                  uploadPromise = cos(uploadInfo, data, _this2, saveOptions);
	                  break;
	                case 'qiniu':
	                default:
	                  uploadPromise = qiniu(uploadInfo, data, _this2, saveOptions);
	                  break;
	              }
	              return uploadPromise.catch(function (err) {
	                // destroy this file object when upload fails.
	                _this2.destroy();
	                throw err;
	              });
	            });
	          });
	        } else if (this.attributes.url && this.attributes.metaData.__source === 'external') {
	          // external link file.
	          var data = {
	            name: this.attributes.name,
	            ACL: this._acl,
	            metaData: this.attributes.metaData,
	            mime_type: this._guessedType,
	            url: this.attributes.url
	          };
	          this._previousSave = AVRequest('files', this.attributes.name, null, 'post', data).then(function (response) {
	            _this2.attributes.name = response.name;
	            _this2.attributes.url = response.url;
	            _this2.id = response.objectId;
	            if (response.size) {
	              _this2.attributes.metaData.size = response.size;
	            }
	            return _this2;
	          });
	        }
	      }
	      return this._previousSave._thenRunCallbacks(options);
	    },
	
	    /**
	    * fetch the file from server. If the server's representation of the
	    * model differs from its current attributes, they will be overriden,
	    * @param {Object} fetchOptions Optional options to set 'keys' and
	    *      'include' option.
	    * @param {Object} options Optional Backbone-like options object to be
	    *     passed in to set.
	    * @return {AV.Promise} A promise that is fulfilled when the fetch
	    *     completes.
	    */
	    fetch: function fetch() {
	      var _this3 = this;
	
	      var options = null;
	      var fetchOptions = {};
	      if (arguments.length === 1) {
	        options = arguments[0];
	      } else if (arguments.length === 2) {
	        fetchOptions = arguments[0];
	        options = arguments[1];
	      }
	
	      var request = AVRequest('files', null, this.id, 'GET', fetchOptions);
	      return request.then(function (response) {
	        var value = AV.Object.prototype.parse(response);
	        value.attributes = {
	          name: value.name,
	          url: value.url
	        };
	        value.attributes.metaData = value.metaData || {};
	        // clean
	        delete value.objectId;
	        delete value.metaData;
	        delete value.url;
	        delete value.name;
	        _.extend(_this3, value);
	        return _this3;
	      })._thenRunCallbacks(options);
	    }
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 36 */
/*!*******************************************************!*\
  !*** ./~/leancloud-storage/dist/node/uploader/cos.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	 **/
	
	'use strict';
	
	var request = __webpack_require__(/*! superagent */ 17);
	var debug = __webpack_require__(/*! debug */ 22)('cos');
	var Promise = __webpack_require__(/*! ../promise */ 8);
	
	module.exports = function upload(uploadInfo, data, file) {
	  var saveOptions = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	
	  file.attributes.url = uploadInfo.url;
	  file._bucket = uploadInfo.bucket;
	  file.id = uploadInfo.objectId;
	  var uploadUrl = uploadInfo.upload_url + "?sign=" + encodeURIComponent(uploadInfo.token);
	
	  var promise = new Promise();
	
	  var req = request('POST', uploadUrl).field('fileContent', data).field('op', 'upload');
	  if (saveOptions.onprogress) {
	    req.on('progress', saveOptions.onprogress);
	  }
	  req.end(function (err, res) {
	    if (res) {
	      debug(res.status, res.body, res.text);
	    }
	    if (err) {
	      if (res) {
	        err.statusCode = res.status;
	        err.responseText = res.text;
	        err.response = res.body;
	      }
	      return promise.reject(err);
	    }
	    promise.resolve(file);
	  });
	
	  return promise;
	};

/***/ },
/* 37 */
/*!*****************************************************************!*\
  !*** ./~/leancloud-storage/dist/node/uploader/qiniu-browser.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	'use strict';
	
	var request = __webpack_require__(/*! superagent */ 17);
	var Promise = __webpack_require__(/*! ../promise */ 8);
	var debug = __webpack_require__(/*! debug */ 22)('qiniu');
	
	module.exports = function upload(uploadInfo, data, file) {
	  var saveOptions = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	
	  file.attributes.url = uploadInfo.url;
	  file._bucket = uploadInfo.bucket;
	  file.id = uploadInfo.objectId;
	  //Get the uptoken to upload files to qiniu.
	  var uptoken = uploadInfo.token;
	
	  var promise = new Promise();
	
	  var req = request('POST', 'https://up.qbox.me').field('file', data).field('name', file.attributes.name).field('key', file._qiniu_key).field('token', uptoken);
	  if (saveOptions.onprogress) {
	    req.on('progress', saveOptions.onprogress);
	  }
	  req.end(function (err, res) {
	    if (res) {
	      debug(res.status, res.body, res.text);
	    }
	    if (err) {
	      if (res) {
	        err.statusCode = res.status;
	        err.responseText = res.text;
	        err.response = res.body;
	      }
	      return promise.reject(err);
	    }
	    promise.resolve(file);
	  });
	
	  return promise;
	};

/***/ },
/* 38 */
/*!******************************************************!*\
  !*** ./~/leancloud-storage/dist/node/uploader/s3.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	 **/
	
	var request = __webpack_require__(/*! superagent */ 17);
	var AVPromise = __webpack_require__(/*! ../promise */ 8);
	
	module.exports = function upload(uploadInfo, data, file) {
	  var saveOptions = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	
	  file.attributes.url = uploadInfo.url;
	  file._bucket = uploadInfo.bucket;
	  file.id = uploadInfo.objectId;
	  var promise = new AVPromise();
	  // 海外节点，针对 S3 才会返回 upload_url
	  var req = request('PUT', uploadInfo.upload_url).set('Content-Type', file.attributes.metaData.mime_type).send(data);
	  if (saveOptions.onprogress) {
	    req.on('progress', saveOptions.onprogress);
	  }
	  req.end(function (err, res) {
	    if (err) {
	      if (res) {
	        err.statusCode = res.status;
	        err.responseText = res.text;
	        err.response = res.body;
	      }
	      return promise.reject(err);
	    }
	    promise.resolve(file);
	  });
	
	  return promise;
	};

/***/ },
/* 39 */
/*!**********************************************************************************!*\
  !*** ./~/leancloud-storage/dist/node/browserify-wrapper/parse-base64-browser.js ***!
  \**********************************************************************************/
/***/ function(module, exports) {

	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	'use strict';
	
	var dataURItoBlob = function dataURItoBlob(dataURI, type) {
	  var byteString;
	
	  // 传入的 base64，不是 dataURL
	  if (dataURI.indexOf('base64') < 0) {
	    byteString = atob(dataURI);
	  } else if (dataURI.split(',')[0].indexOf('base64') >= 0) {
	    byteString = atob(dataURI.split(',')[1]);
	  } else {
	    byteString = unescape(dataURI.split(',')[1]);
	  }
	  // separate out the mime component
	  var mimeString = type || dataURI.split(',')[0].split(':')[1].split(';')[0];
	  var ia = new Uint8Array(byteString.length);
	  for (var i = 0; i < byteString.length; i++) {
	    ia[i] = byteString.charCodeAt(i);
	  }
	  return new Blob([ia], { type: mimeString });
	};
	
	module.exports = dataURItoBlob;

/***/ },
/* 40 */
/*!*************************************************!*\
  !*** ./~/leancloud-storage/dist/node/object.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var AVError = __webpack_require__(/*! ./error */ 29);
	var AVRequest = __webpack_require__(/*! ./request */ 16).request;
	var utils = __webpack_require__(/*! ./utils */ 15);
	
	// AV.Object is analogous to the Java AVObject.
	// It also implements the same interface as a Backbone model.
	
	module.exports = function (AV) {
	  /**
	   * Creates a new model with defined attributes. A client id (cid) is
	   * automatically generated and assigned for you.
	   *
	   * <p>You won't normally call this method directly.  It is recommended that
	   * you use a subclass of <code>AV.Object</code> instead, created by calling
	   * <code>extend</code>.</p>
	   *
	   * <p>However, if you don't want to use a subclass, or aren't sure which
	   * subclass is appropriate, you can use this form:<pre>
	   *     var object = new AV.Object("ClassName");
	   * </pre>
	   * That is basically equivalent to:<pre>
	   *     var MyClass = AV.Object.extend("ClassName");
	   *     var object = new MyClass();
	   * </pre></p>
	   *
	   * @param {Object} attributes The initial set of data to store in the object.
	   * @param {Object} options A set of Backbone-like options for creating the
	   *     object.  The only option currently supported is "collection".
	   * @see AV.Object.extend
	   *
	   * @class
	   *
	   * <p>The fundamental unit of AV data, which implements the Backbone Model
	   * interface.</p>
	   */
	  AV.Object = function (attributes, options) {
	    // Allow new AV.Object("ClassName") as a shortcut to _create.
	    if (_.isString(attributes)) {
	      return AV.Object._create.apply(this, arguments);
	    }
	
	    attributes = attributes || {};
	    if (options && options.parse) {
	      attributes = this.parse(attributes);
	    }
	    var defaults = AV._getValue(this, 'defaults');
	    if (defaults) {
	      attributes = _.extend({}, defaults, attributes);
	    }
	    if (options && options.collection) {
	      this.collection = options.collection;
	    }
	
	    this._serverData = {}; // The last known data for this object from cloud.
	    this._opSetQueue = [{}]; // List of sets of changes to the data.
	    this.attributes = {}; // The best estimate of this's current data.
	
	    this._hashedJSON = {}; // Hash of values of containers at last save.
	    this._escapedAttributes = {};
	    this.cid = _.uniqueId('c');
	    this.changed = {};
	    this._silent = {};
	    this._pending = {};
	    if (!this.set(attributes, { silent: true })) {
	      throw new Error("Can't create an invalid AV.Object");
	    }
	    this.changed = {};
	    this._silent = {};
	    this._pending = {};
	    this._hasData = true;
	    this._previousAttributes = _.clone(this.attributes);
	    this.initialize.apply(this, arguments);
	  };
	
	  /**
	   * @lends AV.Object.prototype
	   * @property {String} id The objectId of the AV Object.
	   */
	
	  /**
	   * Saves the given list of AV.Object.
	   * If any error is encountered, stops and calls the error handler.
	   * There are two ways you can call this function.
	   *
	   * The Backbone way:<pre>
	   *   AV.Object.saveAll([object1, object2, ...], {
	   *     success: function(list) {
	   *       // All the objects were saved.
	   *     },
	   *     error: function(error) {
	   *       // An error occurred while saving one of the objects.
	   *     },
	   *   });
	   * </pre>
	   * A simplified syntax:<pre>
	   *   AV.Object.saveAll([object1, object2, ...], function(list, error) {
	   *     if (list) {
	   *       // All the objects were saved.
	   *     } else {
	   *       // An error occurred.
	   *     }
	   *   });
	   * </pre>
	   *
	   * @param {Array} list A list of <code>AV.Object</code>.
	   * @param {Object} options A Backbone-style callback object.
	   */
	  AV.Object.saveAll = function (list, options) {
	    return AV.Object._deepSaveAsync(list, null, options)._thenRunCallbacks(options);
	  };
	
	  /**
	   * Fetch the given list of AV.Object.
	   * 
	   * @param {AV.Object[]} objects A list of <code>AV.Object</code>
	   * @param {Object} options
	   * @param {String} options.sessionToken specify user's session, used in LeanEngine.
	   * @return {Promise.<AV.Object[]>} The given list of <code>AV.Object</code>, updated
	   */
	
	  AV.Object.fetchAll = function (objects, options) {
	    return AV.Promise.as().then(function () {
	      return AVRequest('batch', null, null, 'POST', {
	        requests: _.map(objects, function (object) {
	          if (!object.className) throw new Error('object must have className to fetch');
	          if (!object.id) throw new Error('object must have id to fetch');
	          if (object.dirty()) throw new Error('object is modified but not saved');
	          return {
	            method: 'GET',
	            path: '/1.1/classes/' + object.className + '/' + object.id
	          };
	        })
	      }, options && options.sessionToken);
	    }).then(function (response) {
	      _.forEach(objects, function (object, i) {
	        if (response[i].success) {
	          object._finishFetch(object.parse(response[i].success));
	        } else {
	          var error = new Error(response[i].error.error);
	          error.code = response[i].error.code;
	          throw error;
	        }
	      });
	      return objects;
	    });
	  };
	
	  // Attach all inheritable methods to the AV.Object prototype.
	  _.extend(AV.Object.prototype, AV.Events,
	  /** @lends AV.Object.prototype */{
	    _fetchWhenSave: false,
	
	    /**
	     * Initialize is an empty function by default. Override it with your own
	     * initialization logic.
	     */
	    initialize: function initialize() {},
	
	    /**
	      * Set whether to enable fetchWhenSave option when updating object.
	      * When set true, SDK would fetch the latest object after saving.
	      * Default is false.
	      *
	      * @deprecated use AV.Object#save with options.fetchWhenSave instead
	      * @param {boolean} enable  true to enable fetchWhenSave option.
	      */
	    fetchWhenSave: function fetchWhenSave(enable) {
	      console.warn('AV.Object#fetchWhenSave is deprecated, use AV.Object#save with options.fetchWhenSave instead.');
	      if (!_.isBoolean(enable)) {
	        throw "Expect boolean value for fetchWhenSave";
	      }
	      this._fetchWhenSave = enable;
	    },
	
	    /**
	     * Returns the object's objectId.
	     * @return {String} the objectId.
	     */
	    getObjectId: function getObjectId() {
	      return this.id;
	    },
	
	    /**
	     * Returns the object's createdAt attribute.
	     * @return {Date}
	     */
	    getCreatedAt: function getCreatedAt() {
	      return this.createdAt || this.get('createdAt');
	    },
	
	    /**
	     * Returns the object's updatedAt attribute.
	     * @return {Date}
	     */
	    getUpdatedAt: function getUpdatedAt() {
	      return this.updatedAt || this.get('updatedAt');
	    },
	
	    /**
	     * Returns a JSON version of the object suitable for saving to AV.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      var json = this._toFullJSON();
	      AV._arrayEach(["__type", "className"], function (key) {
	        delete json[key];
	      });
	      return json;
	    },
	
	    _toFullJSON: function _toFullJSON(seenObjects) {
	      var json = _.clone(this.attributes);
	      AV._objectEach(json, function (val, key) {
	        json[key] = AV._encode(val, seenObjects);
	      });
	      AV._objectEach(this._operations, function (val, key) {
	        json[key] = val;
	      });
	
	      if (_.has(this, "id")) {
	        json.objectId = this.id;
	      }
	      if (_.has(this, "createdAt")) {
	        if (_.isDate(this.createdAt)) {
	          json.createdAt = this.createdAt.toJSON();
	        } else {
	          json.createdAt = this.createdAt;
	        }
	      }
	
	      if (_.has(this, "updatedAt")) {
	        if (_.isDate(this.updatedAt)) {
	          json.updatedAt = this.updatedAt.toJSON();
	        } else {
	          json.updatedAt = this.updatedAt;
	        }
	      }
	      json.__type = "Object";
	      json.className = this.className;
	      return json;
	    },
	
	    /**
	     * Updates _hashedJSON to reflect the current state of this object.
	     * Adds any changed hash values to the set of pending changes.
	     */
	    _refreshCache: function _refreshCache() {
	      var self = this;
	      if (self._refreshingCache) {
	        return;
	      }
	      self._refreshingCache = true;
	      AV._objectEach(this.attributes, function (value, key) {
	        if (value instanceof AV.Object) {
	          value._refreshCache();
	        } else if (_.isObject(value)) {
	          if (self._resetCacheForKey(key)) {
	            self.set(key, new AV.Op.Set(value), { silent: true });
	          }
	        }
	      });
	      delete self._refreshingCache;
	    },
	
	    /**
	     * Returns true if this object has been modified since its last
	     * save/refresh.  If an attribute is specified, it returns true only if that
	     * particular attribute has been modified since the last save/refresh.
	     * @param {String} attr An attribute name (optional).
	     * @return {Boolean}
	     */
	    dirty: function dirty(attr) {
	      this._refreshCache();
	
	      var currentChanges = _.last(this._opSetQueue);
	
	      if (attr) {
	        return currentChanges[attr] ? true : false;
	      }
	      if (!this.id) {
	        return true;
	      }
	      if (_.keys(currentChanges).length > 0) {
	        return true;
	      }
	      return false;
	    },
	
	    /**
	     * Gets a Pointer referencing this Object.
	     */
	    _toPointer: function _toPointer() {
	      // if (!this.id) {
	      //   throw new Error("Can't serialize an unsaved AV.Object");
	      // }
	      return { __type: "Pointer",
	        className: this.className,
	        objectId: this.id };
	    },
	
	    /**
	     * Gets the value of an attribute.
	     * @param {String} attr The string name of an attribute.
	     */
	    get: function get(attr) {
	      switch (attr) {
	        case 'objectId':
	        case 'id':
	          return this.id;
	        case 'createdAt':
	        case 'updatedAt':
	          return this[attr];
	        default:
	          return this.attributes[attr];
	      }
	    },
	
	    /**
	     * Gets a relation on the given class for the attribute.
	     * @param String attr The attribute to get the relation for.
	     */
	    relation: function relation(attr) {
	      var value = this.get(attr);
	      if (value) {
	        if (!(value instanceof AV.Relation)) {
	          throw "Called relation() on non-relation field " + attr;
	        }
	        value._ensureParentAndKey(this, attr);
	        return value;
	      } else {
	        return new AV.Relation(this, attr);
	      }
	    },
	
	    /**
	     * Gets the HTML-escaped value of an attribute.
	     */
	    escape: function escape(attr) {
	      var html = this._escapedAttributes[attr];
	      if (html) {
	        return html;
	      }
	      var val = this.attributes[attr];
	      var escaped;
	      if (utils.isNullOrUndefined(val)) {
	        escaped = '';
	      } else {
	        escaped = _.escape(val.toString());
	      }
	      this._escapedAttributes[attr] = escaped;
	      return escaped;
	    },
	
	    /**
	     * Returns <code>true</code> if the attribute contains a value that is not
	     * null or undefined.
	     * @param {String} attr The string name of the attribute.
	     * @return {Boolean}
	     */
	    has: function has(attr) {
	      return !utils.isNullOrUndefined(this.attributes[attr]);
	    },
	
	    /**
	     * Pulls "special" fields like objectId, createdAt, etc. out of attrs
	     * and puts them on "this" directly.  Removes them from attrs.
	     * @param attrs - A dictionary with the data for this AV.Object.
	     */
	    _mergeMagicFields: function _mergeMagicFields(attrs) {
	      // Check for changes of magic fields.
	      var model = this;
	      var specialFields = ["id", "objectId", "createdAt", "updatedAt"];
	      AV._arrayEach(specialFields, function (attr) {
	        if (attrs[attr]) {
	          if (attr === "objectId") {
	            model.id = attrs[attr];
	          } else if ((attr === "createdAt" || attr === "updatedAt") && !_.isDate(attrs[attr])) {
	            model[attr] = AV._parseDate(attrs[attr]);
	          } else {
	            model[attr] = attrs[attr];
	          }
	          delete attrs[attr];
	        }
	      });
	    },
	
	    /**
	     * Returns the json to be sent to the server.
	     */
	    _startSave: function _startSave() {
	      this._opSetQueue.push({});
	    },
	
	    /**
	     * Called when a save fails because of an error. Any changes that were part
	     * of the save need to be merged with changes made after the save. This
	     * might throw an exception is you do conflicting operations. For example,
	     * if you do:
	     *   object.set("foo", "bar");
	     *   object.set("invalid field name", "baz");
	     *   object.save();
	     *   object.increment("foo");
	     * then this will throw when the save fails and the client tries to merge
	     * "bar" with the +1.
	     */
	    _cancelSave: function _cancelSave() {
	      var self = this;
	      var failedChanges = _.first(this._opSetQueue);
	      this._opSetQueue = _.rest(this._opSetQueue);
	      var nextChanges = _.first(this._opSetQueue);
	      AV._objectEach(failedChanges, function (op, key) {
	        var op1 = failedChanges[key];
	        var op2 = nextChanges[key];
	        if (op1 && op2) {
	          nextChanges[key] = op2._mergeWithPrevious(op1);
	        } else if (op1) {
	          nextChanges[key] = op1;
	        }
	      });
	      this._saving = this._saving - 1;
	    },
	
	    /**
	     * Called when a save completes successfully. This merges the changes that
	     * were saved into the known server data, and overrides it with any data
	     * sent directly from the server.
	     */
	    _finishSave: function _finishSave(serverData) {
	      // Grab a copy of any object referenced by this object. These instances
	      // may have already been fetched, and we don't want to lose their data.
	      // Note that doing it like this means we will unify separate copies of the
	      // same object, but that's a risk we have to take.
	      var fetchedObjects = {};
	      AV._traverse(this.attributes, function (object) {
	        if (object instanceof AV.Object && object.id && object._hasData) {
	          fetchedObjects[object.id] = object;
	        }
	      });
	
	      var savedChanges = _.first(this._opSetQueue);
	      this._opSetQueue = _.rest(this._opSetQueue);
	      this._applyOpSet(savedChanges, this._serverData);
	      this._mergeMagicFields(serverData);
	      var self = this;
	      AV._objectEach(serverData, function (value, key) {
	        self._serverData[key] = AV._decode(key, value);
	
	        // Look for any objects that might have become unfetched and fix them
	        // by replacing their values with the previously observed values.
	        var fetched = AV._traverse(self._serverData[key], function (object) {
	          if (object instanceof AV.Object && fetchedObjects[object.id]) {
	            return fetchedObjects[object.id];
	          }
	        });
	        if (fetched) {
	          self._serverData[key] = fetched;
	        }
	      });
	      this._rebuildAllEstimatedData();
	      this._saving = this._saving - 1;
	    },
	
	    /**
	     * Called when a fetch or login is complete to set the known server data to
	     * the given object.
	     */
	    _finishFetch: function _finishFetch(serverData, hasData) {
	      // Clear out any changes the user might have made previously.
	      this._opSetQueue = [{}];
	
	      // Bring in all the new server data.
	      this._mergeMagicFields(serverData);
	      var self = this;
	      AV._objectEach(serverData, function (value, key) {
	        self._serverData[key] = AV._decode(key, value);
	      });
	
	      // Refresh the attributes.
	      this._rebuildAllEstimatedData();
	
	      // Clear out the cache of mutable containers.
	      this._refreshCache();
	      this._opSetQueue = [{}];
	
	      this._hasData = hasData;
	    },
	
	    /**
	     * Applies the set of AV.Op in opSet to the object target.
	     */
	    _applyOpSet: function _applyOpSet(opSet, target) {
	      var self = this;
	      AV._objectEach(opSet, function (change, key) {
	        target[key] = change._estimate(target[key], self, key);
	        if (target[key] === AV.Op._UNSET) {
	          delete target[key];
	        }
	      });
	    },
	
	    /**
	     * Replaces the cached value for key with the current value.
	     * Returns true if the new value is different than the old value.
	     */
	    _resetCacheForKey: function _resetCacheForKey(key) {
	      var value = this.attributes[key];
	      if (_.isObject(value) && !(value instanceof AV.Object) && !(value instanceof AV.File)) {
	
	        value = value.toJSON ? value.toJSON() : value;
	        var json = JSON.stringify(value);
	        if (this._hashedJSON[key] !== json) {
	          var wasSet = !!this._hashedJSON[key];
	          this._hashedJSON[key] = json;
	          return wasSet;
	        }
	      }
	      return false;
	    },
	
	    /**
	     * Populates attributes[key] by starting with the last known data from the
	     * server, and applying all of the local changes that have been made to that
	     * key since then.
	     */
	    _rebuildEstimatedDataForKey: function _rebuildEstimatedDataForKey(key) {
	      var self = this;
	      delete this.attributes[key];
	      if (this._serverData[key]) {
	        this.attributes[key] = this._serverData[key];
	      }
	      AV._arrayEach(this._opSetQueue, function (opSet) {
	        var op = opSet[key];
	        if (op) {
	          self.attributes[key] = op._estimate(self.attributes[key], self, key);
	          if (self.attributes[key] === AV.Op._UNSET) {
	            delete self.attributes[key];
	          } else {
	            self._resetCacheForKey(key);
	          }
	        }
	      });
	    },
	
	    /**
	     * Populates attributes by starting with the last known data from the
	     * server, and applying all of the local changes that have been made since
	     * then.
	     */
	    _rebuildAllEstimatedData: function _rebuildAllEstimatedData() {
	      var self = this;
	
	      var previousAttributes = _.clone(this.attributes);
	
	      this.attributes = _.clone(this._serverData);
	      AV._arrayEach(this._opSetQueue, function (opSet) {
	        self._applyOpSet(opSet, self.attributes);
	        AV._objectEach(opSet, function (op, key) {
	          self._resetCacheForKey(key);
	        });
	      });
	
	      // Trigger change events for anything that changed because of the fetch.
	      AV._objectEach(previousAttributes, function (oldValue, key) {
	        if (self.attributes[key] !== oldValue) {
	          self.trigger('change:' + key, self, self.attributes[key], {});
	        }
	      });
	      AV._objectEach(this.attributes, function (newValue, key) {
	        if (!_.has(previousAttributes, key)) {
	          self.trigger('change:' + key, self, newValue, {});
	        }
	      });
	    },
	
	    /**
	     * Sets a hash of model attributes on the object, firing
	     * <code>"change"</code> unless you choose to silence it.
	     *
	     * <p>You can call it with an object containing keys and values, or with one
	     * key and value.  For example:<pre>
	     *   gameTurn.set({
	     *     player: player1,
	     *     diceRoll: 2
	     *   }, {
	     *     error: function(gameTurnAgain, error) {
	     *       // The set failed validation.
	     *     }
	     *   });
	     *
	     *   game.set("currentPlayer", player2, {
	     *     error: function(gameTurnAgain, error) {
	     *       // The set failed validation.
	     *     }
	     *   });
	     *
	     *   game.set("finished", true);</pre></p>
	     *
	     * @param {String} key The key to set.
	     * @param {} value The value to give it.
	     * @param {Object} options A set of Backbone-like options for the set.
	     *     The only supported options are <code>silent</code>,
	     *     <code>error</code>, and <code>promise</code>.
	     * @return {AV.Object} self if succeeded, false if the value is not valid.
	     * @see AV.Object#validate
	     * @see AVError
	     */
	    set: function set(key, value, options) {
	      var attrs, attr;
	      if (_.isObject(key) || utils.isNullOrUndefined(key)) {
	        attrs = key;
	        AV._objectEach(attrs, function (v, k) {
	          attrs[k] = AV._decode(k, v);
	        });
	        options = value;
	      } else {
	        attrs = {};
	        attrs[key] = AV._decode(key, value);
	      }
	
	      // Extract attributes and options.
	      options = options || {};
	      if (!attrs) {
	        return this;
	      }
	      if (attrs instanceof AV.Object) {
	        attrs = attrs.attributes;
	      }
	
	      // If the unset option is used, every attribute should be a Unset.
	      if (options.unset) {
	        AV._objectEach(attrs, function (unused_value, key) {
	          attrs[key] = new AV.Op.Unset();
	        });
	      }
	
	      // Apply all the attributes to get the estimated values.
	      var dataToValidate = _.clone(attrs);
	      var self = this;
	      AV._objectEach(dataToValidate, function (value, key) {
	        if (value instanceof AV.Op) {
	          dataToValidate[key] = value._estimate(self.attributes[key], self, key);
	          if (dataToValidate[key] === AV.Op._UNSET) {
	            delete dataToValidate[key];
	          }
	        }
	      });
	
	      // Run validation.
	      if (!this._validate(attrs, options)) {
	        return false;
	      }
	
	      this._mergeMagicFields(attrs);
	
	      options.changes = {};
	      var escaped = this._escapedAttributes;
	      var prev = this._previousAttributes || {};
	
	      // Update attributes.
	      AV._arrayEach(_.keys(attrs), function (attr) {
	        var val = attrs[attr];
	
	        // If this is a relation object we need to set the parent correctly,
	        // since the location where it was parsed does not have access to
	        // this object.
	        if (val instanceof AV.Relation) {
	          val.parent = self;
	        }
	
	        if (!(val instanceof AV.Op)) {
	          val = new AV.Op.Set(val);
	        }
	
	        // See if this change will actually have any effect.
	        var isRealChange = true;
	        if (val instanceof AV.Op.Set && _.isEqual(self.attributes[attr], val.value)) {
	          isRealChange = false;
	        }
	
	        if (isRealChange) {
	          delete escaped[attr];
	          if (options.silent) {
	            self._silent[attr] = true;
	          } else {
	            options.changes[attr] = true;
	          }
	        }
	
	        var currentChanges = _.last(self._opSetQueue);
	        currentChanges[attr] = val._mergeWithPrevious(currentChanges[attr]);
	        self._rebuildEstimatedDataForKey(attr);
	
	        if (isRealChange) {
	          self.changed[attr] = self.attributes[attr];
	          if (!options.silent) {
	            self._pending[attr] = true;
	          }
	        } else {
	          delete self.changed[attr];
	          delete self._pending[attr];
	        }
	      });
	
	      if (!options.silent) {
	        this.change(options);
	      }
	      return this;
	    },
	
	    /**
	     * Remove an attribute from the model, firing <code>"change"</code> unless
	     * you choose to silence it. This is a noop if the attribute doesn't
	     * exist.
	     */
	    unset: function unset(attr, options) {
	      options = options || {};
	      options.unset = true;
	      return this.set(attr, null, options);
	    },
	
	    /**
	     * Atomically increments the value of the given attribute the next time the
	     * object is saved. If no amount is specified, 1 is used by default.
	     *
	     * @param attr {String} The key.
	     * @param amount {Number} The amount to increment by.
	     */
	    increment: function increment(attr, amount) {
	      if (_.isUndefined(amount) || _.isNull(amount)) {
	        amount = 1;
	      }
	      return this.set(attr, new AV.Op.Increment(amount));
	    },
	
	    /**
	     * Atomically add an object to the end of the array associated with a given
	     * key.
	     * @param attr {String} The key.
	     * @param item {} The item to add.
	     */
	    add: function add(attr, item) {
	      return this.set(attr, new AV.Op.Add(utils.ensureArray(item)));
	    },
	
	    /**
	     * Atomically add an object to the array associated with a given key, only
	     * if it is not already present in the array. The position of the insert is
	     * not guaranteed.
	     *
	     * @param attr {String} The key.
	     * @param item {} The object to add.
	     */
	    addUnique: function addUnique(attr, item) {
	      return this.set(attr, new AV.Op.AddUnique(utils.ensureArray(item)));
	    },
	
	    /**
	     * Atomically remove all instances of an object from the array associated
	     * with a given key.
	     *
	     * @param attr {String} The key.
	     * @param item {} The object to remove.
	     */
	    remove: function remove(attr, item) {
	      return this.set(attr, new AV.Op.Remove(utils.ensureArray(item)));
	    },
	
	    /**
	     * Returns an instance of a subclass of AV.Op describing what kind of
	     * modification has been performed on this field since the last time it was
	     * saved. For example, after calling object.increment("x"), calling
	     * object.op("x") would return an instance of AV.Op.Increment.
	     *
	     * @param attr {String} The key.
	     * @returns {AV.Op} The operation, or undefined if none.
	     */
	    op: function op(attr) {
	      return _.last(this._opSetQueue)[attr];
	    },
	
	    /**
	     * Clear all attributes on the model, firing <code>"change"</code> unless
	     * you choose to silence it.
	     */
	    clear: function clear(options) {
	      options = options || {};
	      options.unset = true;
	      var keysToClear = _.extend(this.attributes, this._operations);
	      return this.set(keysToClear, options);
	    },
	
	    /**
	     * Returns a JSON-encoded set of operations to be sent with the next save
	     * request.
	     */
	    _getSaveJSON: function _getSaveJSON() {
	      var json = _.clone(_.first(this._opSetQueue));
	      AV._objectEach(json, function (op, key) {
	        json[key] = op.toJSON();
	      });
	      return json;
	    },
	
	    /**
	     * Returns true if this object can be serialized for saving.
	     */
	    _canBeSerialized: function _canBeSerialized() {
	      return AV.Object._canBeSerializedAsValue(this.attributes);
	    },
	
	    /**
	     * Fetch the model from the server. If the server's representation of the
	     * model differs from its current attributes, they will be overriden,
	     * triggering a <code>"change"</code> event.
	     * @param {Object} fetchOptions Optional options to set 'keys' and
	     *      'include' option.
	     * @param {Object} options Optional Backbone-like options object to be
	     *     passed in to set.
	     * @return {AV.Promise} A promise that is fulfilled when the fetch
	     *     completes.
	     */
	    fetch: function fetch() {
	      var options = {};
	      var fetchOptions = {};
	      if (arguments.length === 1) {
	        options = arguments[0];
	      } else if (arguments.length === 2) {
	        fetchOptions = arguments[0];
	        options = arguments[1] || {};
	      }
	
	      if (fetchOptions && fetchOptions.include && _.isArray(fetchOptions.include)) {
	        fetchOptions.include = fetchOptions.include.join(',');
	      }
	
	      var self = this;
	      var request = AVRequest('classes', this.className, this.id, 'GET', fetchOptions, options.sessionToken);
	      return request.then(function (response) {
	        self._finishFetch(self.parse(response), true);
	        return self;
	      })._thenRunCallbacks(options, this);
	    },
	
	    /**
	     * Set a hash of model attributes, and save the model to the server.
	     * updatedAt will be updated when the request returns.
	     * You can either call it as:<pre>
	     *   object.save();</pre>
	     * or<pre>
	     *   object.save(null, options);</pre>
	     * or<pre>
	     *   object.save(attrs, options);</pre>
	     * or<pre>
	     *   object.save(key, value, options);</pre>
	     *
	     * For example, <pre>
	     *   gameTurn.save({
	     *     player: "Jake Cutter",
	     *     diceRoll: 2
	     *   }, {
	     *     success: function(gameTurnAgain) {
	     *       // The save was successful.
	     *     },
	     *     error: function(gameTurnAgain, error) {
	     *       // The save failed.  Error is an instance of AVError.
	     *     }
	     *   });</pre>
	     * or with promises:<pre>
	     *   gameTurn.save({
	     *     player: "Jake Cutter",
	     *     diceRoll: 2
	     *   }).then(function(gameTurnAgain) {
	     *     // The save was successful.
	     *   }, function(error) {
	     *     // The save failed.  Error is an instance of AVError.
	     *   });</pre>
	     * @param {Object} options Optional Backbone-like options object to be passed in to set.
	     * @param {Boolean} options.fetchWhenSave fetch and update object after save succeeded
	     * @param {AV.Query} options.query Save object only when it matches the query
	     * @return {AV.Promise} A promise that is fulfilled when the save
	     *     completes.
	     * @see AVError
	     */
	    save: function save(arg1, arg2, arg3) {
	      var i, attrs, current, options, saved;
	      if (_.isObject(arg1) || utils.isNullOrUndefined(arg1)) {
	        attrs = arg1;
	        options = arg2;
	      } else {
	        attrs = {};
	        attrs[arg1] = arg2;
	        options = arg3;
	      }
	
	      // Make save({ success: function() {} }) work.
	      if (!options && attrs) {
	        var extra_keys = _.reject(attrs, function (value, key) {
	          return _.include(["success", "error", "wait"], key);
	        });
	        if (extra_keys.length === 0) {
	          var all_functions = true;
	          if (_.has(attrs, "success") && !_.isFunction(attrs.success)) {
	            all_functions = false;
	          }
	          if (_.has(attrs, "error") && !_.isFunction(attrs.error)) {
	            all_functions = false;
	          }
	          if (all_functions) {
	            // This attrs object looks like it's really an options object,
	            // and there's no other options object, so let's just use it.
	            return this.save(null, attrs);
	          }
	        }
	      }
	
	      options = _.clone(options) || {};
	      if (options.wait) {
	        current = _.clone(this.attributes);
	      }
	
	      var setOptions = _.clone(options) || {};
	      if (setOptions.wait) {
	        setOptions.silent = true;
	      }
	      var setError;
	      setOptions.error = function (model, error) {
	        setError = error;
	      };
	      if (attrs && !this.set(attrs, setOptions)) {
	        return AV.Promise.error(setError)._thenRunCallbacks(options, this);
	      }
	
	      var model = this;
	
	      // If there is any unsaved child, save it first.
	      model._refreshCache();
	
	      var unsavedChildren = [];
	      var unsavedFiles = [];
	      AV.Object._findUnsavedChildren(model.attributes, unsavedChildren, unsavedFiles);
	      if (unsavedChildren.length + unsavedFiles.length > 0) {
	        return AV.Object._deepSaveAsync(this.attributes, model, options).then(function () {
	          return model.save(null, options);
	        }, function (error) {
	          return AV.Promise.error(error)._thenRunCallbacks(options, model);
	        });
	      }
	
	      this._startSave();
	      this._saving = (this._saving || 0) + 1;
	
	      this._allPreviousSaves = this._allPreviousSaves || AV.Promise.as();
	      this._allPreviousSaves = this._allPreviousSaves._continueWith(function () {
	        var method = model.id ? 'PUT' : 'POST';
	
	        var json = model._getSaveJSON();
	
	        if (model._fetchWhenSave) {
	          //Sepcial-case fetchWhenSave when updating object.
	          json._fetchWhenSave = true;
	        }
	
	        if (options.fetchWhenSave) {
	          json._fetchWhenSave = true;
	        }
	        if (options.query) {
	          var queryJSON;
	          if (typeof options.query.toJSON === 'function') {
	            queryJSON = options.query.toJSON();
	            if (queryJSON) {
	              json._where = queryJSON.where;
	            }
	          }
	          if (!json._where) {
	            var error = new Error('options.query is not an AV.Query');
	            return AV.Promise.error(error)._thenRunCallbacks(options, model);
	          }
	        }
	
	        var route = "classes";
	        var className = model.className;
	        if (model.className === "_User" && !model.id) {
	          // Special-case user sign-up.
	          route = "users";
	          className = null;
	        }
	        //hook makeRequest in options.
	        var makeRequest = options._makeRequest || AVRequest;
	        var request = makeRequest(route, className, model.id, method, json, options.sessionToken);
	
	        request = request.then(function (resp) {
	          var serverAttrs = model.parse(resp);
	          if (options.wait) {
	            serverAttrs = _.extend(attrs || {}, serverAttrs);
	          }
	          model._finishSave(serverAttrs);
	          if (options.wait) {
	            model.set(current, setOptions);
	          }
	          return model;
	        }, function (error) {
	          model._cancelSave();
	          return AV.Promise.error(error);
	        })._thenRunCallbacks(options, model);
	
	        return request;
	      });
	      return this._allPreviousSaves;
	    },
	
	    /**
	     * Destroy this model on the server if it was already persisted.
	     * Optimistically removes the model from its collection, if it has one.
	     * If `wait: true` is passed, waits for the server to respond
	     * before removal.
	     *
	     * @return {AV.Promise} A promise that is fulfilled when the destroy
	     *     completes.
	     */
	    destroy: function destroy(options) {
	      options = options || {};
	      var model = this;
	
	      var triggerDestroy = function triggerDestroy() {
	        model.trigger('destroy', model, model.collection, options);
	      };
	
	      if (!this.id) {
	        return triggerDestroy();
	      }
	
	      if (!options.wait) {
	        triggerDestroy();
	      }
	
	      var request = AVRequest('classes', this.className, this.id, 'DELETE', null, options.sessionToken);
	      return request.then(function () {
	        if (options.wait) {
	          triggerDestroy();
	        }
	        return model;
	      })._thenRunCallbacks(options, this);
	    },
	
	    /**
	     * Converts a response into the hash of attributes to be set on the model.
	     * @ignore
	     */
	    parse: function parse(resp) {
	      var output = _.clone(resp);
	      _(["createdAt", "updatedAt"]).each(function (key) {
	        if (output[key]) {
	          output[key] = AV._parseDate(output[key]);
	        }
	      });
	      if (!output.updatedAt) {
	        output.updatedAt = output.createdAt;
	      }
	      return output;
	    },
	
	    /**
	     * Creates a new model with identical attributes to this one.
	     * @return {AV.Object}
	     */
	    clone: function clone() {
	      return new this.constructor(this.attributes);
	    },
	
	    /**
	     * Returns true if this object has never been saved to AV.
	     * @return {Boolean}
	     */
	    isNew: function isNew() {
	      return !this.id;
	    },
	
	    /**
	     * Call this method to manually fire a `"change"` event for this model and
	     * a `"change:attribute"` event for each changed attribute.
	     * Calling this will cause all objects observing the model to update.
	     */
	    change: function change(options) {
	      options = options || {};
	      var changing = this._changing;
	      this._changing = true;
	
	      // Silent changes become pending changes.
	      var self = this;
	      AV._objectEach(this._silent, function (attr) {
	        self._pending[attr] = true;
	      });
	
	      // Silent changes are triggered.
	      var changes = _.extend({}, options.changes, this._silent);
	      this._silent = {};
	      AV._objectEach(changes, function (unused_value, attr) {
	        self.trigger('change:' + attr, self, self.get(attr), options);
	      });
	      if (changing) {
	        return this;
	      }
	
	      // This is to get around lint not letting us make a function in a loop.
	      var deleteChanged = function deleteChanged(value, attr) {
	        if (!self._pending[attr] && !self._silent[attr]) {
	          delete self.changed[attr];
	        }
	      };
	
	      // Continue firing `"change"` events while there are pending changes.
	      while (!_.isEmpty(this._pending)) {
	        this._pending = {};
	        this.trigger('change', this, options);
	        // Pending and silent changes still remain.
	        AV._objectEach(this.changed, deleteChanged);
	        self._previousAttributes = _.clone(this.attributes);
	      }
	
	      this._changing = false;
	      return this;
	    },
	
	    /**
	     * (DEPRECATED) Returns true if this object was created by the AV server when the
	     * object might have already been there (e.g. in the case of a Facebook
	     * login)
	     */
	    existed: function existed() {
	      console.warn('AV.Object.prototype.existed() is deprecated.');
	      return false;
	    },
	
	    /**
	     * Determine if the model has changed since the last <code>"change"</code>
	     * event.  If you specify an attribute name, determine if that attribute
	     * has changed.
	     * @param {String} attr Optional attribute name
	     * @return {Boolean}
	     */
	    hasChanged: function hasChanged(attr) {
	      if (!arguments.length) {
	        return !_.isEmpty(this.changed);
	      }
	      return this.changed && _.has(this.changed, attr);
	    },
	
	    /**
	     * Returns an object containing all the attributes that have changed, or
	     * false if there are no changed attributes. Useful for determining what
	     * parts of a view need to be updated and/or what attributes need to be
	     * persisted to the server. Unset attributes will be set to undefined.
	     * You can also pass an attributes object to diff against the model,
	     * determining if there *would be* a change.
	     */
	    changedAttributes: function changedAttributes(diff) {
	      if (!diff) {
	        return this.hasChanged() ? _.clone(this.changed) : false;
	      }
	      var changed = {};
	      var old = this._previousAttributes;
	      AV._objectEach(diff, function (diffVal, attr) {
	        if (!_.isEqual(old[attr], diffVal)) {
	          changed[attr] = diffVal;
	        }
	      });
	      return changed;
	    },
	
	    /**
	     * Gets the previous value of an attribute, recorded at the time the last
	     * <code>"change"</code> event was fired.
	     * @param {String} attr Name of the attribute to get.
	     */
	    previous: function previous(attr) {
	      if (!arguments.length || !this._previousAttributes) {
	        return null;
	      }
	      return this._previousAttributes[attr];
	    },
	
	    /**
	     * Gets all of the attributes of the model at the time of the previous
	     * <code>"change"</code> event.
	     * @return {Object}
	     */
	    previousAttributes: function previousAttributes() {
	      return _.clone(this._previousAttributes);
	    },
	
	    /**
	     * Checks if the model is currently in a valid state. It's only possible to
	     * get into an *invalid* state if you're using silent changes.
	     * @return {Boolean}
	     */
	    isValid: function isValid() {
	      return !this.validate(this.attributes);
	    },
	
	    /**
	     * You should not call this function directly unless you subclass
	     * <code>AV.Object</code>, in which case you can override this method
	     * to provide additional validation on <code>set</code> and
	     * <code>save</code>.  Your implementation should return
	     *
	     * @param {Object} attrs The current data to validate.
	     * @param {Object} options A Backbone-like options object.
	     * @return {} False if the data is valid.  An error object otherwise.
	     * @see AV.Object#set
	     */
	    validate: function validate(attrs, options) {
	      if (_.has(attrs, "ACL") && !(attrs.ACL instanceof AV.ACL)) {
	        return new AVError(AVError.OTHER_CAUSE, "ACL must be a AV.ACL.");
	      }
	      return false;
	    },
	
	    /**
	     * Run validation against a set of incoming attributes, returning `true`
	     * if all is well. If a specific `error` callback has been passed,
	     * call that instead of firing the general `"error"` event.
	     */
	    _validate: function _validate(attrs, options) {
	      if (options.silent || !this.validate) {
	        return true;
	      }
	      attrs = _.extend({}, this.attributes, attrs);
	      var error = this.validate(attrs, options);
	      if (!error) {
	        return true;
	      }
	      if (options && options.error) {
	        options.error(this, error, options);
	      } else {
	        this.trigger('error', this, error, options);
	      }
	      return false;
	    },
	
	    /**
	     * Returns the ACL for this object.
	     * @returns {AV.ACL} An instance of AV.ACL.
	     * @see AV.Object#get
	     */
	    getACL: function getACL() {
	      return this.get("ACL");
	    },
	
	    /**
	     * Sets the ACL to be used for this object.
	     * @param {AV.ACL} acl An instance of AV.ACL.
	     * @param {Object} options Optional Backbone-like options object to be
	     *     passed in to set.
	     * @return {Boolean} Whether the set passed validation.
	     * @see AV.Object#set
	     */
	    setACL: function setACL(acl, options) {
	      return this.set("ACL", acl, options);
	    }
	
	  });
	
	  /**
	   * Creates an instance of a subclass of AV.Object for the give classname
	   * and id.
	   * @param  {String} className The name of the AV class backing this model.
	   * @param {String} id The object id of this model.
	   * @return {AV.Object} A new subclass instance of AV.Object.
	   */
	  AV.Object.createWithoutData = function (className, id, hasData) {
	    var result = new AV.Object(className);
	    result.id = id;
	    result._hasData = hasData;
	    return result;
	  };
	  /**
	   * Delete objects in batch.The objects className must be the same.
	   * @param {Array} The <code>AV.Object</code> array to be deleted.
	   * @param {Object} options Standard options object with success and error
	   *     callbacks.
	   * @return {AV.Promise} A promise that is fulfilled when the save
	   *     completes.
	   */
	  AV.Object.destroyAll = function (objects, options) {
	    options = options || {};
	    if (!objects || objects.length === 0) {
	      return AV.Promise.as()._thenRunCallbacks(options);
	    }
	    var className = objects[0].className;
	    var id = "";
	    var wasFirst = true;
	    objects.forEach(function (obj) {
	      if (obj.className != className) throw "AV.Object.destroyAll requires the argument object array's classNames must be the same";
	      if (!obj.id) throw "Could not delete unsaved object";
	      if (wasFirst) {
	        id = obj.id;
	        wasFirst = false;
	      } else {
	        id = id + ',' + obj.id;
	      }
	    });
	    var request = AVRequest('classes', className, id, 'DELETE', null, options.sessionToken);
	    return request._thenRunCallbacks(options);
	  };
	
	  /**
	   * Returns the appropriate subclass for making new instances of the given
	   * className string.
	   */
	  AV.Object._getSubclass = function (className) {
	    if (!_.isString(className)) {
	      throw "AV.Object._getSubclass requires a string argument.";
	    }
	    var ObjectClass = AV.Object._classMap[className];
	    if (!ObjectClass) {
	      ObjectClass = AV.Object.extend(className);
	      AV.Object._classMap[className] = ObjectClass;
	    }
	    return ObjectClass;
	  };
	
	  /**
	   * Creates an instance of a subclass of AV.Object for the given classname.
	   */
	  AV.Object._create = function (className, attributes, options) {
	    var ObjectClass = AV.Object._getSubclass(className);
	    return new ObjectClass(attributes, options);
	  };
	
	  // Set up a map of className to class so that we can create new instances of
	  // AV Objects from JSON automatically.
	  AV.Object._classMap = {};
	
	  AV.Object._extend = AV._extend;
	
	  /**
	   * Creates a new model with defined attributes,
	   * It's the same with
	   * <pre>
	   *   new AV.Object(attributes, options);
	   *  </pre>
	   * @param {Object} attributes The initial set of data to store in the object.
	   * @param {Object} options A set of Backbone-like options for creating the
	   *     object.  The only option currently supported is "collection".
	   * @return {AV.Object}
	   * @since v0.4.4
	   * @see AV.Object
	   * @see AV.Object.extend
	   */
	  AV.Object['new'] = function (attributes, options) {
	    return new AV.Object(attributes, options);
	  };
	
	  /**
	   * Creates a new subclass of AV.Object for the given AV class name.
	   *
	   * <p>Every extension of a AV class will inherit from the most recent
	   * previous extension of that class. When a AV.Object is automatically
	   * created by parsing JSON, it will use the most recent extension of that
	   * class.</p>
	   *
	   * <p>You should call either:<pre>
	   *     var MyClass = AV.Object.extend("MyClass", {
	   *         <i>Instance properties</i>
	   *     }, {
	   *         <i>Class properties</i>
	   *     });</pre>
	   * or, for Backbone compatibility:<pre>
	   *     var MyClass = AV.Object.extend({
	   *         className: "MyClass",
	   *         <i>Other instance properties</i>
	   *     }, {
	   *         <i>Class properties</i>
	   *     });</pre></p>
	   *
	   * @param {String} className The name of the AV class backing this model.
	   * @param {Object} protoProps Instance properties to add to instances of the
	   *     class returned from this method.
	   * @param {Object} classProps Class properties to add the class returned from
	   *     this method.
	   * @return {Class} A new subclass of AV.Object.
	   */
	  AV.Object.extend = function (className, protoProps, classProps) {
	    // Handle the case with only two args.
	    if (!_.isString(className)) {
	      if (className && _.has(className, "className")) {
	        return AV.Object.extend(className.className, className, protoProps);
	      } else {
	        throw new Error("AV.Object.extend's first argument should be the className.");
	      }
	    }
	
	    // If someone tries to subclass "User", coerce it to the right type.
	    if (className === "User") {
	      className = "_User";
	    }
	
	    var NewClassObject = null;
	    if (_.has(AV.Object._classMap, className)) {
	      var OldClassObject = AV.Object._classMap[className];
	      // This new subclass has been told to extend both from "this" and from
	      // OldClassObject. This is multiple inheritance, which isn't supported.
	      // For now, let's just pick one.
	      if (protoProps || classProps) {
	        NewClassObject = OldClassObject._extend(protoProps, classProps);
	      } else {
	        return OldClassObject;
	      }
	    } else {
	      protoProps = protoProps || {};
	      protoProps._className = className;
	      NewClassObject = this._extend(protoProps, classProps);
	    }
	    // Extending a subclass should reuse the classname automatically.
	    NewClassObject.extend = function (arg0) {
	      if (_.isString(arg0) || arg0 && _.has(arg0, "className")) {
	        return AV.Object.extend.apply(NewClassObject, arguments);
	      }
	      var newArguments = [className].concat(_.toArray(arguments));
	      return AV.Object.extend.apply(NewClassObject, newArguments);
	    };
	    NewClassObject['new'] = function (attributes, options) {
	      return new NewClassObject(attributes, options);
	    };
	    AV.Object._classMap[className] = NewClassObject;
	    return NewClassObject;
	  };
	
	  // ES6 class syntax support
	  Object.defineProperty(AV.Object.prototype, 'className', {
	    get: function get() {
	      var className = this._className || this.constructor.name;
	      // If someone tries to subclass "User", coerce it to the right type.
	      if (className === "User") {
	        return "_User";
	      }
	      return className;
	    }
	  });
	
	  AV.Object.register = function (klass) {
	    if (!(klass.prototype instanceof AV.Object)) {
	      throw new Error('registered class is not a subclass of AV.Object');
	    }
	    var className = klass.name;
	    if (!className.length) {
	      throw new Error('registered class must be named');
	    }
	    AV.Object._classMap[className] = klass;
	  };
	
	  AV.Object._findUnsavedChildren = function (object, children, files) {
	    AV._traverse(object, function (object) {
	      if (object instanceof AV.Object) {
	        object._refreshCache();
	        if (object.dirty()) {
	          children.push(object);
	        }
	        return;
	      }
	
	      if (object instanceof AV.File) {
	        if (!object.url() && !object.id) {
	          files.push(object);
	        }
	        return;
	      }
	    });
	  };
	
	  AV.Object._canBeSerializedAsValue = function (object) {
	    var canBeSerializedAsValue = true;
	
	    if (object instanceof AV.Object || object instanceof AV.File) {
	      canBeSerializedAsValue = !!object.id;
	    } else if (_.isArray(object)) {
	      AV._arrayEach(object, function (child) {
	        if (!AV.Object._canBeSerializedAsValue(child)) {
	          canBeSerializedAsValue = false;
	        }
	      });
	    } else if (_.isObject(object)) {
	      AV._objectEach(object, function (child) {
	        if (!AV.Object._canBeSerializedAsValue(child)) {
	          canBeSerializedAsValue = false;
	        }
	      });
	    }
	
	    return canBeSerializedAsValue;
	  };
	
	  AV.Object._deepSaveAsync = function (object, model, options) {
	    var unsavedChildren = [];
	    var unsavedFiles = [];
	    AV.Object._findUnsavedChildren(object, unsavedChildren, unsavedFiles);
	    if (model) {
	      unsavedChildren = _.filter(unsavedChildren, function (object) {
	        return object != model;
	      });
	    }
	
	    var promise = AV.Promise.as();
	    _.each(unsavedFiles, function (file) {
	      promise = promise.then(function () {
	        return file.save();
	      });
	    });
	
	    var objects = _.uniq(unsavedChildren);
	    var remaining = _.uniq(objects);
	
	    return promise.then(function () {
	      return AV.Promise._continueWhile(function () {
	        return remaining.length > 0;
	      }, function () {
	
	        // Gather up all the objects that can be saved in this batch.
	        var batch = [];
	        var newRemaining = [];
	        AV._arrayEach(remaining, function (object) {
	          // Limit batches to 20 objects.
	          if (batch.length > 20) {
	            newRemaining.push(object);
	            return;
	          }
	
	          if (object._canBeSerialized()) {
	            batch.push(object);
	          } else {
	            newRemaining.push(object);
	          }
	        });
	        remaining = newRemaining;
	
	        // If we can't save any objects, there must be a circular reference.
	        if (batch.length === 0) {
	          return AV.Promise.error(new AVError(AVError.OTHER_CAUSE, "Tried to save a batch with a cycle."));
	        }
	
	        // Reserve a spot in every object's save queue.
	        var readyToStart = AV.Promise.when(_.map(batch, function (object) {
	          return object._allPreviousSaves || AV.Promise.as();
	        }));
	        var batchFinished = new AV.Promise();
	        AV._arrayEach(batch, function (object) {
	          object._allPreviousSaves = batchFinished;
	        });
	
	        // Save a single batch, whether previous saves succeeded or failed.
	        return readyToStart._continueWith(function () {
	          return AVRequest("batch", null, null, "POST", {
	            requests: _.map(batch, function (object) {
	              var json = object._getSaveJSON();
	              var method = "POST";
	
	              var path = "/1.1/classes/" + object.className;
	              if (object.id) {
	                path = path + "/" + object.id;
	                method = "PUT";
	              }
	
	              object._startSave();
	
	              return {
	                method: method,
	                path: path,
	                body: json
	              };
	            })
	
	          }, options && options.sessionToken).then(function (response) {
	            var error;
	            AV._arrayEach(batch, function (object, i) {
	              if (response[i].success) {
	                object._finishSave(object.parse(response[i].success));
	              } else {
	                error = error || response[i].error;
	                object._cancelSave();
	              }
	            });
	            if (error) {
	              return AV.Promise.error(new AVError(error.code, error.error));
	            }
	          }).then(function (results) {
	            batchFinished.resolve(results);
	            return results;
	          }, function (error) {
	            batchFinished.reject(error);
	            return AV.Promise.error(error);
	          });
	        });
	      });
	    }).then(function () {
	      return object;
	    });
	  };
	};

/***/ },
/* 41 */
/*!***********************************************!*\
  !*** ./~/leancloud-storage/dist/node/role.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var AVError = __webpack_require__(/*! ./error */ 29);
	
	module.exports = function (AV) {
	  /**
	   * Represents a Role on the AV server. Roles represent groupings of
	   * Users for the purposes of granting permissions (e.g. specifying an ACL
	   * for an Object). Roles are specified by their sets of child users and
	   * child roles, all of which are granted any permissions that the parent
	   * role has.
	   *
	   * <p>Roles must have a name (which cannot be changed after creation of the
	   * role), and must specify an ACL.</p>
	   * @class
	   * A AV.Role is a local representation of a role persisted to the AV
	   * cloud.
	   */
	  AV.Role = AV.Object.extend("_Role", /** @lends AV.Role.prototype */{
	    // Instance Methods
	
	    /**
	     * Constructs a new AVRole with the given name and ACL.
	     *
	     * @param {String} name The name of the Role to create.
	     * @param {AV.ACL} [acl] The ACL for this role. if absent, the default ACL
	     *    `{'*': { read: true }}` will be used.
	     */
	    constructor: function constructor(name, acl) {
	      if (_.isString(name)) {
	        AV.Object.prototype.constructor.call(this, null, null);
	        this.setName(name);
	      } else {
	        AV.Object.prototype.constructor.call(this, name, acl);
	      }
	      if (acl === undefined) {
	        var defaultAcl = new AV.ACL();
	        defaultAcl.setPublicReadAccess(true);
	        if (!this.getACL()) {
	          this.setACL(defaultAcl);
	        }
	      } else if (!(acl instanceof AV.ACL)) {
	        throw new TypeError('acl must be an instance of AV.ACL');
	      } else {
	        this.setACL(acl);
	      }
	    },
	
	    /**
	     * Gets the name of the role.  You can alternatively call role.get("name")
	     *
	     * @return {String} the name of the role.
	     */
	    getName: function getName() {
	      return this.get("name");
	    },
	
	    /**
	     * Sets the name for a role. This value must be set before the role has
	     * been saved to the server, and cannot be set once the role has been
	     * saved.
	     *
	     * <p>
	     *   A role's name can only contain alphanumeric characters, _, -, and
	     *   spaces.
	     * </p>
	     *
	     * <p>This is equivalent to calling role.set("name", name)</p>
	     *
	     * @param {String} name The name of the role.
	     * @param {Object} options Standard options object with success and error
	     *     callbacks.
	     */
	    setName: function setName(name, options) {
	      return this.set("name", name, options);
	    },
	
	    /**
	     * Gets the AV.Relation for the AV.Users that are direct
	     * children of this role. These users are granted any privileges that this
	     * role has been granted (e.g. read or write access through ACLs). You can
	     * add or remove users from the role through this relation.
	     *
	     * <p>This is equivalent to calling role.relation("users")</p>
	     *
	     * @return {AV.Relation} the relation for the users belonging to this
	     *     role.
	     */
	    getUsers: function getUsers() {
	      return this.relation("users");
	    },
	
	    /**
	     * Gets the AV.Relation for the AV.Roles that are direct
	     * children of this role. These roles' users are granted any privileges that
	     * this role has been granted (e.g. read or write access through ACLs). You
	     * can add or remove child roles from this role through this relation.
	     *
	     * <p>This is equivalent to calling role.relation("roles")</p>
	     *
	     * @return {AV.Relation} the relation for the roles belonging to this
	     *     role.
	     */
	    getRoles: function getRoles() {
	      return this.relation("roles");
	    },
	
	    /**
	     * @ignore
	     */
	    validate: function validate(attrs, options) {
	      if ("name" in attrs && attrs.name !== this.getName()) {
	        var newName = attrs.name;
	        if (this.id && this.id !== attrs.objectId) {
	          // Check to see if the objectId being set matches this.id.
	          // This happens during a fetch -- the id is set before calling fetch.
	          // Let the name be set in this case.
	          return new AVError(AVError.OTHER_CAUSE, "A role's name can only be set before it has been saved.");
	        }
	        if (!_.isString(newName)) {
	          return new AVError(AVError.OTHER_CAUSE, "A role's name must be a String.");
	        }
	        if (!/^[0-9a-zA-Z\-_ ]+$/.test(newName)) {
	          return new AVError(AVError.OTHER_CAUSE, "A role's name can only contain alphanumeric characters, _," + " -, and spaces.");
	        }
	      }
	      if (AV.Object.prototype.validate) {
	        return AV.Object.prototype.validate.call(this, attrs, options);
	      }
	      return false;
	    }
	  });
	};

/***/ },
/* 42 */
/*!***********************************************!*\
  !*** ./~/leancloud-storage/dist/node/user.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var AVError = __webpack_require__(/*! ./error */ 29);
	var AVRequest = __webpack_require__(/*! ./request */ 16).request;
	
	module.exports = function (AV) {
	  /**
	   * @class
	   *
	   * <p>A AV.User object is a local representation of a user persisted to the
	   * AV cloud. This class is a subclass of a AV.Object, and retains the
	   * same functionality of a AV.Object, but also extends it with various
	   * user specific methods, like authentication, signing up, and validation of
	   * uniqueness.</p>
	   */
	  AV.User = AV.Object.extend("_User", /** @lends AV.User.prototype */{
	    // Instance Variables
	    _isCurrentUser: false,
	
	    // Instance Methods
	
	    /**
	     * Internal method to handle special fields in a _User response.
	     */
	    _mergeMagicFields: function _mergeMagicFields(attrs) {
	      if (attrs.sessionToken) {
	        this._sessionToken = attrs.sessionToken;
	        delete attrs.sessionToken;
	      }
	      AV.User.__super__._mergeMagicFields.call(this, attrs);
	    },
	
	    /**
	     * Removes null values from authData (which exist temporarily for
	     * unlinking)
	     */
	    _cleanupAuthData: function _cleanupAuthData() {
	      if (!this.isCurrent()) {
	        return;
	      }
	      var authData = this.get('authData');
	      if (!authData) {
	        return;
	      }
	      AV._objectEach(this.get('authData'), function (value, key) {
	        if (!authData[key]) {
	          delete authData[key];
	        }
	      });
	    },
	
	    /**
	     * Synchronizes authData for all providers.
	     */
	    _synchronizeAllAuthData: function _synchronizeAllAuthData() {
	      var authData = this.get('authData');
	      if (!authData) {
	        return;
	      }
	
	      var self = this;
	      AV._objectEach(this.get('authData'), function (value, key) {
	        self._synchronizeAuthData(key);
	      });
	    },
	
	    /**
	     * Synchronizes auth data for a provider (e.g. puts the access token in the
	     * right place to be used by the Facebook SDK).
	     */
	    _synchronizeAuthData: function _synchronizeAuthData(provider) {
	      if (!this.isCurrent()) {
	        return;
	      }
	      var authType;
	      if (_.isString(provider)) {
	        authType = provider;
	        provider = AV.User._authProviders[authType];
	      } else {
	        authType = provider.getAuthType();
	      }
	      var authData = this.get('authData');
	      if (!authData || !provider) {
	        return;
	      }
	      var success = provider.restoreAuthentication(authData[authType]);
	      if (!success) {
	        this._unlinkFrom(provider);
	      }
	    },
	
	    _handleSaveResult: function _handleSaveResult(makeCurrent) {
	      // Clean up and synchronize the authData object, removing any unset values
	      if (makeCurrent && !AV._config.disableCurrentUser) {
	        this._isCurrentUser = true;
	      }
	      this._cleanupAuthData();
	      this._synchronizeAllAuthData();
	      // Don't keep the password around.
	      delete this._serverData.password;
	      this._rebuildEstimatedDataForKey("password");
	      this._refreshCache();
	      if ((makeCurrent || this.isCurrent()) && !AV._config.disableCurrentUser) {
	        // Some old version of leanengine-node-sdk will overwrite
	        // AV.User._saveCurrentUser which returns no Promise.
	        // So we need a Promise wrapper.
	        return AV.Promise.as(AV.User._saveCurrentUser(this));
	      } else {
	        return AV.Promise.as();
	      }
	    },
	
	    /**
	     * Unlike in the Android/iOS SDKs, logInWith is unnecessary, since you can
	     * call linkWith on the user (even if it doesn't exist yet on the server).
	     */
	    _linkWith: function _linkWith(provider, options) {
	      var authType;
	      if (_.isString(provider)) {
	        authType = provider;
	        provider = AV.User._authProviders[provider];
	      } else {
	        authType = provider.getAuthType();
	      }
	      if (_.has(options, 'authData')) {
	        var authData = this.get('authData') || {};
	        authData[authType] = options.authData;
	        this.set('authData', authData);
	        return this.save({ 'authData': authData }, filterOutCallbacks(options)).then(function (model) {
	          return model._handleSaveResult(true).then(function () {
	            return model;
	          });
	        })._thenRunCallbacks(options);
	      } else {
	        var self = this;
	        var promise = new AV.Promise();
	        provider.authenticate({
	          success: function success(provider, result) {
	            self._linkWith(provider, {
	              authData: result,
	              success: options.success,
	              error: options.error
	            }).then(function () {
	              promise.resolve(self);
	            });
	          },
	          error: function error(provider, _error) {
	            if (options.error) {
	              options.error(self, _error);
	            }
	            promise.reject(_error);
	          }
	        });
	        return promise;
	      }
	    },
	
	    /**
	     * Unlinks a user from a service.
	     */
	    _unlinkFrom: function _unlinkFrom(provider, options) {
	      var authType;
	      if (_.isString(provider)) {
	        authType = provider;
	        provider = AV.User._authProviders[provider];
	      } else {
	        authType = provider.getAuthType();
	      }
	      var newOptions = _.clone(options);
	      var self = this;
	      newOptions.authData = null;
	      newOptions.success = function (model) {
	        self._synchronizeAuthData(provider);
	        if (options.success) {
	          options.success.apply(this, arguments);
	        }
	      };
	      return this._linkWith(provider, newOptions);
	    },
	
	    /**
	     * Checks whether a user is linked to a service.
	     */
	    _isLinked: function _isLinked(provider) {
	      var authType;
	      if (_.isString(provider)) {
	        authType = provider;
	      } else {
	        authType = provider.getAuthType();
	      }
	      var authData = this.get('authData') || {};
	      return !!authData[authType];
	    },
	
	    logOut: function logOut() {
	      this._logOutWithAll();
	      this._isCurrentUser = false;
	    },
	
	    /**
	     * Deauthenticates all providers.
	     */
	    _logOutWithAll: function _logOutWithAll() {
	      var authData = this.get('authData');
	      if (!authData) {
	        return;
	      }
	      var self = this;
	      AV._objectEach(this.get('authData'), function (value, key) {
	        self._logOutWith(key);
	      });
	    },
	
	    /**
	     * Deauthenticates a single provider (e.g. removing access tokens from the
	     * Facebook SDK).
	     */
	    _logOutWith: function _logOutWith(provider) {
	      if (!this.isCurrent()) {
	        return;
	      }
	      if (_.isString(provider)) {
	        provider = AV.User._authProviders[provider];
	      }
	      if (provider && provider.deauthenticate) {
	        provider.deauthenticate();
	      }
	    },
	
	    /**
	     * Signs up a new user. You should call this instead of save for
	     * new AV.Users. This will create a new AV.User on the server, and
	     * also persist the session on disk so that you can access the user using
	     * <code>current</code>.
	     *
	     * <p>A username and password must be set before calling signUp.</p>
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {Object} attrs Extra fields to set on the new user, or null.
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is fulfilled when the signup
	     *     finishes.
	     * @see AV.User.signUp
	     */
	    signUp: function signUp(attrs, options) {
	      var error;
	      options = options || {};
	
	      var username = attrs && attrs.username || this.get("username");
	      if (!username || username === "") {
	        error = new AVError(AVError.OTHER_CAUSE, "Cannot sign up user with an empty name.");
	        if (options && options.error) {
	          options.error(this, error);
	        }
	        throw error;
	      }
	
	      var password = attrs && attrs.password || this.get("password");
	      if (!password || password === "") {
	        error = new AVError(AVError.OTHER_CAUSE, "Cannot sign up user with an empty password.");
	        if (options && options.error) {
	          options.error(this, error);
	        }
	        throw error;
	      }
	
	      return this.save(attrs, filterOutCallbacks(options)).then(function (model) {
	        return model._handleSaveResult(true).then(function () {
	          return model;
	        });
	      })._thenRunCallbacks(options, this);
	    },
	
	    /**
	     * Signs up a new user with mobile phone and sms code.
	     * You should call this instead of save for
	     * new AV.Users. This will create a new AV.User on the server, and
	     * also persist the session on disk so that you can access the user using
	     * <code>current</code>.
	     *
	     * <p>A username and password must be set before calling signUp.</p>
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {Object} attrs Extra fields to set on the new user, or null.
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is fulfilled when the signup
	     *     finishes.
	     * @see AV.User.signUpOrlogInWithMobilePhone
	     * @see AV.Cloud.requestSmsCode
	     */
	    signUpOrlogInWithMobilePhone: function signUpOrlogInWithMobilePhone(attrs, options) {
	      var error;
	      options = options || {};
	
	      var mobilePhoneNumber = attrs && attrs.mobilePhoneNumber || this.get("mobilePhoneNumber");
	      if (!mobilePhoneNumber || mobilePhoneNumber === "") {
	        error = new AVError(AVError.OTHER_CAUSE, "Cannot sign up or login user by mobilePhoneNumber " + "with an empty mobilePhoneNumber.");
	        if (options && options.error) {
	          options.error(this, error);
	        }
	        throw error;
	      }
	
	      var smsCode = attrs && attrs.smsCode || this.get("smsCode");
	      if (!smsCode || smsCode === "") {
	        error = new AVError(AVError.OTHER_CAUSE, "Cannot sign up or login user by mobilePhoneNumber  " + "with an empty smsCode.");
	        if (options && options.error) {
	          options.error(this, error);
	        }
	        throw error;
	      }
	
	      var newOptions = filterOutCallbacks(options);
	      newOptions._makeRequest = function (route, className, id, method, json) {
	        return AVRequest('usersByMobilePhone', null, null, "POST", json);
	      };
	      return this.save(attrs, newOptions).then(function (model) {
	        delete model.attributes.smsCode;
	        delete model._serverData.smsCode;
	        return model._handleSaveResult(true).then(function () {
	          return model;
	        });
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Logs in a AV.User. On success, this saves the session to localStorage,
	     * so you can retrieve the currently logged in user using
	     * <code>current</code>.
	     *
	     * <p>A username and password must be set before calling logIn.</p>
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {Object} options A Backbone-style options object.
	     * @see AV.User.logIn
	     * @return {AV.Promise} A promise that is fulfilled with the user when
	     *     the login is complete.
	     */
	    logIn: function logIn(options) {
	      var model = this;
	      var request = AVRequest('login', null, null, 'POST', this.toJSON());
	      return request.then(function (resp, status, xhr) {
	        var serverAttrs = model.parse(resp, status, xhr);
	        model._finishFetch(serverAttrs);
	        return model._handleSaveResult(true).then(function () {
	          if (!serverAttrs.smsCode) delete model.attributes['smsCode'];
	          return model;
	        });
	      })._thenRunCallbacks(options, this);
	    },
	    /**
	     * @see AV.Object#save
	     */
	    save: function save(arg1, arg2, arg3) {
	      var i, attrs, current, options, saved;
	      if (_.isObject(arg1) || _.isNull(arg1) || _.isUndefined(arg1)) {
	        attrs = arg1;
	        options = arg2;
	      } else {
	        attrs = {};
	        attrs[arg1] = arg2;
	        options = arg3;
	      }
	      options = options || {};
	
	      return AV.Object.prototype.save.call(this, attrs, filterOutCallbacks(options)).then(function (model) {
	        return model._handleSaveResult(false).then(function () {
	          return model;
	        });
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Follow a user
	     * @since 0.3.0
	     * @param {} target The target user or user's objectId to follow.
	     * @param {Object} options An optional Backbone-like options object with
	     *     success and error callbacks that will be invoked once the iteration
	     *     has finished.
	     */
	    follow: function follow(target, options) {
	      if (!this.id) {
	        throw "Please signin.";
	      }
	      if (!target) {
	        throw "Invalid target user.";
	      }
	      var userObjectId = _.isString(target) ? target : target.id;
	      if (!userObjectId) {
	        throw "Invalid target user.";
	      }
	      var route = 'users/' + this.id + '/friendship/' + userObjectId;
	      var request = AVRequest(route, null, null, 'POST', null, options && options.sessionToken);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Unfollow a user.
	     * @since 0.3.0
	     * @param {} target The target user or user's objectId to unfollow.
	     * @param options {Object} An optional Backbone-like options object with
	     *     success and error callbacks that will be invoked once the iteration
	     *     has finished.
	     */
	    unfollow: function unfollow(target, options) {
	      if (!this.id) {
	        throw "Please signin.";
	      }
	      if (!target) {
	        throw "Invalid target user.";
	      }
	      var userObjectId = _.isString(target) ? target : target.id;
	      if (!userObjectId) {
	        throw "Invalid target user.";
	      }
	      var route = 'users/' + this.id + '/friendship/' + userObjectId;
	      var request = AVRequest(route, null, null, 'DELETE', null, options && options.sessionToken);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     *Create a follower query to query the user's followers.
	     * @since 0.3.0
	     * @see AV.User#followerQuery
	     */
	    followerQuery: function followerQuery() {
	      return AV.User.followerQuery(this.id);
	    },
	
	    /**
	     *Create a followee query to query the user's followees.
	     * @since 0.3.0
	     * @see AV.User#followeeQuery
	     */
	    followeeQuery: function followeeQuery() {
	      return AV.User.followeeQuery(this.id);
	    },
	
	    /**
	     * @see AV.Object#fetch
	     */
	    fetch: function fetch() {
	      var options = null;
	      var fetchOptions = {};
	      if (arguments.length === 1) {
	        options = arguments[0];
	      } else if (arguments.length === 2) {
	        fetchOptions = arguments[0];
	        options = arguments[1];
	      }
	      return AV.Object.prototype.fetch.call(this, fetchOptions, {}).then(function (model) {
	        return model._handleSaveResult(false).then(function () {
	          return model;
	        });
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Update user's new password safely based on old password.
	     * @param {String} oldPassword, the old password.
	     * @param {String} newPassword, the new password.
	     * @param {Object} An optional Backbone-like options object with
	     *     success and error callbacks that will be invoked once the iteration
	     *     has finished.
	     */
	    updatePassword: function updatePassword(oldPassword, newPassword, options) {
	      var route = 'users/' + this.id + '/updatePassword';
	      var params = {
	        old_password: oldPassword,
	        new_password: newPassword
	      };
	      var request = AVRequest(route, null, null, 'PUT', params, options && options.sessionToken);
	      return request._thenRunCallbacks(options, this);
	    },
	
	    /**
	     * Returns true if <code>current</code> would return this user.
	     * @see AV.User#current
	     */
	    isCurrent: function isCurrent() {
	      return this._isCurrentUser;
	    },
	
	    /**
	     * Returns get("username").
	     * @return {String}
	     * @see AV.Object#get
	     */
	    getUsername: function getUsername() {
	      return this.get("username");
	    },
	
	    /**
	     * Returns get("mobilePhoneNumber").
	     * @return {String}
	     * @see AV.Object#get
	     */
	    getMobilePhoneNumber: function getMobilePhoneNumber() {
	      return this.get("mobilePhoneNumber");
	    },
	
	    /**
	     * Calls set("mobilePhoneNumber", phoneNumber, options) and returns the result.
	     * @param {String} mobilePhoneNumber
	     * @param {Object} options A Backbone-style options object.
	     * @return {Boolean}
	     * @see AV.Object.set
	     */
	    setMobilePhoneNumber: function setMobilePhoneNumber(phone, options) {
	      return this.set("mobilePhoneNumber", phone, options);
	    },
	
	    /**
	     * Calls set("username", username, options) and returns the result.
	     * @param {String} username
	     * @param {Object} options A Backbone-style options object.
	     * @return {Boolean}
	     * @see AV.Object.set
	     */
	    setUsername: function setUsername(username, options) {
	      return this.set("username", username, options);
	    },
	
	    /**
	     * Calls set("password", password, options) and returns the result.
	     * @param {String} password
	     * @param {Object} options A Backbone-style options object.
	     * @return {Boolean}
	     * @see AV.Object.set
	     */
	    setPassword: function setPassword(password, options) {
	      return this.set("password", password, options);
	    },
	
	    /**
	     * Returns get("email").
	     * @return {String}
	     * @see AV.Object#get
	     */
	    getEmail: function getEmail() {
	      return this.get("email");
	    },
	
	    /**
	     * Calls set("email", email, options) and returns the result.
	     * @param {String} email
	     * @param {Object} options A Backbone-style options object.
	     * @return {Boolean}
	     * @see AV.Object.set
	     */
	    setEmail: function setEmail(email, options) {
	      return this.set("email", email, options);
	    },
	
	    /**
	     * Checks whether this user is the current user and has been authenticated.
	     * @return (Boolean) whether this user is the current user and is logged in.
	     */
	    authenticated: function authenticated() {
	      return !!this._sessionToken && !AV._config.disableCurrentUser && AV.User.current() && AV.User.current().id === this.id;
	    },
	
	    getSessionToken: function getSessionToken() {
	      return this._sessionToken;
	    },
	
	    /**
	     * Get this user's Roles.
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is fulfilled with the roles when
	     *     the query is complete.
	     */
	    getRoles: function getRoles(options) {
	      return AV.Relation.reverseQuery("_Role", "users", this).find(options);
	    }
	  }, /** @lends AV.User */{
	    // Class Variables
	
	    // The currently logged-in user.
	    _currentUser: null,
	
	    // Whether currentUser is known to match the serialized version on disk.
	    // This is useful for saving a localstorage check if you try to load
	    // _currentUser frequently while there is none stored.
	    _currentUserMatchesDisk: false,
	
	    // The localStorage key suffix that the current user is stored under.
	    _CURRENT_USER_KEY: "currentUser",
	
	    // The mapping of auth provider names to actual providers
	    _authProviders: {},
	
	    // Class Methods
	
	    /**
	     * Signs up a new user with a username (or email) and password.
	     * This will create a new AV.User on the server, and also persist the
	     * session in localStorage so that you can access the user using
	     * {@link #current}.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} username The username (or email) to sign up with.
	     * @param {String} password The password to sign up with.
	     * @param {Object} attrs Extra fields to set on the new user.
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is fulfilled with the user when
	     *     the signup completes.
	     * @see AV.User#signUp
	     */
	    signUp: function signUp(username, password, attrs, options) {
	      attrs = attrs || {};
	      attrs.username = username;
	      attrs.password = password;
	      var user = AV.Object._create("_User");
	      return user.signUp(attrs, options);
	    },
	
	    /**
	     * Logs in a user with a username (or email) and password. On success, this
	     * saves the session to disk, so you can retrieve the currently logged in
	     * user using <code>current</code>.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} username The username (or email) to log in with.
	     * @param {String} password The password to log in with.
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     * @see AV.User#logIn
	     */
	    logIn: function logIn(username, password, options) {
	      var user = AV.Object._create("_User");
	      user._finishFetch({ username: username, password: password });
	      return user.logIn(options);
	    },
	
	    /**
	     * Logs in a user with a session token. On success, this saves the session
	     * to disk, so you can retrieve the currently logged in user using
	     * <code>current</code>.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} sessionToken The sessionToken to log in with.
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     */
	    become: function become(sessionToken, options) {
	      options = options || {};
	
	      var user = AV.Object._create("_User");
	      return AVRequest("users", "me", null, "GET", {
	        useMasterKey: options.useMasterKey,
	        session_token: sessionToken
	      }).then(function (resp, status, xhr) {
	        var serverAttrs = user.parse(resp, status, xhr);
	        user._finishFetch(serverAttrs);
	        return user._handleSaveResult(true).then(function () {
	          return user;
	        });
	      })._thenRunCallbacks(options, user);
	    },
	
	    /**
	     * Logs in a user with a mobile phone number and sms code sent by
	     * AV.User.requestLoginSmsCode.On success, this
	     * saves the session to disk, so you can retrieve the currently logged in
	     * user using <code>current</code>.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} mobilePhone The user's mobilePhoneNumber
	     * @param {String} smsCode The sms code sent by AV.User.requestLoginSmsCode
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     * @see AV.User#logIn
	     */
	    logInWithMobilePhoneSmsCode: function logInWithMobilePhoneSmsCode(mobilePhone, smsCode, options) {
	      var user = AV.Object._create("_User");
	      user._finishFetch({ mobilePhoneNumber: mobilePhone, smsCode: smsCode });
	      return user.logIn(options);
	    },
	
	    /**
	     * Sign up or logs in a user with a mobilePhoneNumber and smsCode.
	     * On success, this saves the session to disk, so you can retrieve the currently
	     * logged in user using <code>current</code>.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} mobilePhoneNumber The user's mobilePhoneNumber.
	     * @param {String} smsCode The sms code sent by AV.Cloud.requestSmsCode
	     * @param {Object} attributes  The user's other attributes such as username etc.
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     * @see AV.User#signUpOrlogInWithMobilePhone
	     * @see AV.Cloud.requestSmsCode
	     */
	    signUpOrlogInWithMobilePhone: function signUpOrlogInWithMobilePhone(mobilePhoneNumber, smsCode, attrs, options) {
	      attrs = attrs || {};
	      attrs.mobilePhoneNumber = mobilePhoneNumber;
	      attrs.smsCode = smsCode;
	      var user = AV.Object._create("_User");
	      return user.signUpOrlogInWithMobilePhone(attrs, options);
	    },
	
	    /**
	     * Logs in a user with a mobile phone number and password. On success, this
	     * saves the session to disk, so you can retrieve the currently logged in
	     * user using <code>current</code>.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} mobilePhone The user's mobilePhoneNumber
	     * @param {String} password The password to log in with.
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     * @see AV.User#logIn
	     */
	    logInWithMobilePhone: function logInWithMobilePhone(mobilePhone, password, options) {
	      var user = AV.Object._create("_User");
	      user._finishFetch({ mobilePhoneNumber: mobilePhone, password: password });
	      return user.logIn(options);
	    },
	
	    /**
	     * Sign up or logs in a user with a third party auth data(AccessToken).
	     * On success, this saves the session to disk, so you can retrieve the currently
	     * logged in user using <code>current</code>.
	     *
	     * @param {Object} authData The response json data returned from third party token, maybe like { openid: 'abc123', access_token: '123abc', expires_in: 1382686496 }
	     * @param {string} platform Available platform for sign up.
	     * @param {Object} [callback] An object that has an optional success function, that takes no arguments and will be called on a successful puSH. and an error function that takes a AVError and will be called if the push failed.
	     * @return {AV.Promise} A promise that is fulfilled with the user when
	     *     the login completes.
	     * @example AV.User.signUpOrlogInWithAuthData(authData, platform).then(function(user) {
	     *   //Access user here
	     * }).catch(function(error) {
	     *   //console.error("error: ", error);
	     * });
	     * @see {@link https://leancloud.cn/docs/js_guide.html#绑定第三方平台账户}
	     */
	    signUpOrlogInWithAuthData: function signUpOrlogInWithAuthData(authData, platform, callback) {
	      return AV.User._logInWith(platform, { authData: authData })._thenRunCallbacks(callback);
	    },
	
	
	    /**
	     * Associate a user with a third party auth data(AccessToken).
	     *
	     * @param {AV.User} userObj A user which you want to associate.
	     * @param {string} platform Available platform for sign up.
	     * @param {Object} authData The response json data returned from third party token, maybe like { openid: 'abc123', access_token: '123abc', expires_in: 1382686496 }
	     * @return {AV.Promise} A promise that is fulfilled with the user when completed.
	     * @example AV.User.associateWithAuthData(loginUser, 'weixin', {
	     *   openid: 'abc123',
	     *   access_token: '123abc',
	     *   expires_in: 1382686496
	     * }).then(function(user) {
	     *   //Access user here
	     * }).catch(function(error) {
	     *   //console.error("error: ", error);
	     * });
	     */
	    associateWithAuthData: function associateWithAuthData(userObj, platform, authData) {
	      return userObj._linkWith(platform, { authData: authData });
	    },
	
	    /**
	     * Logs out the currently logged in user session. This will remove the
	     * session from disk, log out of linked services, and future calls to
	     * <code>current</code> will return <code>null</code>.
	     */
	    logOut: function logOut() {
	      if (AV._config.disableCurrentUser) {
	        console.warn('AV.User.current() was disabled in multi-user environment, call logOut() from user object instead https://leancloud.cn/docs/leanengine-node-sdk-upgrade-1.html');
	        return AV.Promise.as(null);
	      }
	
	      if (AV.User._currentUser !== null) {
	        AV.User._currentUser._logOutWithAll();
	        AV.User._currentUser._isCurrentUser = false;
	      }
	      AV.User._currentUserMatchesDisk = true;
	      AV.User._currentUser = null;
	      return AV.localStorage.removeItemAsync(AV._getAVPath(AV.User._CURRENT_USER_KEY));
	    },
	
	    /**
	     *Create a follower query for special user to query the user's followers.
	     * @param userObjectId {String} The user object id.
	     * @since 0.3.0
	     */
	    followerQuery: function followerQuery(userObjectId) {
	      if (!userObjectId || !_.isString(userObjectId)) {
	        throw "Invalid user object id.";
	      }
	      var query = new AV.FriendShipQuery('_Follower');
	      query._friendshipTag = 'follower';
	      query.equalTo('user', AV.Object.createWithoutData('_User', userObjectId));
	      return query;
	    },
	
	    /**
	     *Create a followee query for special user to query the user's followees.
	     * @param userObjectId {String} The user object id.
	     * @since 0.3.0
	     */
	    followeeQuery: function followeeQuery(userObjectId) {
	      if (!userObjectId || !_.isString(userObjectId)) {
	        throw "Invalid user object id.";
	      }
	      var query = new AV.FriendShipQuery('_Followee');
	      query._friendshipTag = 'followee';
	      query.equalTo('user', AV.Object.createWithoutData('_User', userObjectId));
	      return query;
	    },
	
	    /**
	     * Requests a password reset email to be sent to the specified email address
	     * associated with the user account. This email allows the user to securely
	     * reset their password on the AV site.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} email The email address associated with the user that
	     *     forgot their password.
	     * @param {Object} options A Backbone-style options object.
	     */
	    requestPasswordReset: function requestPasswordReset(email, options) {
	      var json = { email: email };
	      var request = AVRequest("requestPasswordReset", null, null, "POST", json);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Requests a verify email to be sent to the specified email address
	     * associated with the user account. This email allows the user to securely
	     * verify their email address on the AV site.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} email The email address associated with the user that
	     *     doesn't verify their email address.
	     * @param {Object} options A Backbone-style options object.
	     */
	    requestEmailVerify: function requestEmailVerify(email, options) {
	      var json = { email: email };
	      var request = AVRequest("requestEmailVerify", null, null, "POST", json);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * @Deprecated typo error, please use requestEmailVerify
	     */
	    requestEmailVerfiy: function requestEmailVerfiy(email, options) {
	      var json = { email: email };
	      var request = AVRequest("requestEmailVerify", null, null, "POST", json);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Requests a verify sms code to be sent to the specified mobile phone
	     * number associated with the user account. This sms code allows the user to
	     * verify their mobile phone number by calling AV.User.verifyMobilePhone
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} mobilePhone The mobile phone number  associated with the
	     *                  user that doesn't verify their mobile phone number.
	     * @param {Object} options A Backbone-style options object.
	     */
	    requestMobilePhoneVerify: function requestMobilePhoneVerify(mobilePhone, options) {
	      var json = { mobilePhoneNumber: mobilePhone };
	      var request = AVRequest("requestMobilePhoneVerify", null, null, "POST", json);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Requests a reset password sms code to be sent to the specified mobile phone
	     * number associated with the user account. This sms code allows the user to
	     * reset their account's password by calling AV.User.resetPasswordBySmsCode
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} mobilePhone The mobile phone number  associated with the
	     *                  user that doesn't verify their mobile phone number.
	     * @param {Object} options A Backbone-style options object.
	     */
	    requestPasswordResetBySmsCode: function requestPasswordResetBySmsCode(mobilePhone, options) {
	      var json = { mobilePhoneNumber: mobilePhone };
	      var request = AVRequest("requestPasswordResetBySmsCode", null, null, "POST", json);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Makes a call to reset user's account password by sms code and new password.
	    * The sms code is sent by AV.User.requestPasswordResetBySmsCode.
	     * @param {String} code The sms code sent by AV.User.Cloud.requestSmsCode
	     * @param {String} password The new password.
	     * @param {Object} options A Backbone-style options object
	     * @return {AV.Promise} A promise that will be resolved with the result
	     * of the function.
	     */
	    resetPasswordBySmsCode: function resetPasswordBySmsCode(code, password, options) {
	      var json = { password: password };
	      var request = AVRequest("resetPasswordBySmsCode", null, code, "PUT", json);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Makes a call to verify sms code that sent by AV.User.Cloud.requestSmsCode
	     * If verify successfully,the user mobilePhoneVerified attribute will be true.
	     * @param {String} code The sms code sent by AV.User.Cloud.requestSmsCode
	     * @param {Object} options A Backbone-style options object
	     * @return {AV.Promise} A promise that will be resolved with the result
	     * of the function.
	     */
	    verifyMobilePhone: function verifyMobilePhone(code, options) {
	      var request = AVRequest("verifyMobilePhone", null, code, "POST", null);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Requests a logIn sms code to be sent to the specified mobile phone
	     * number associated with the user account. This sms code allows the user to
	     * login by AV.User.logInWithMobilePhoneSmsCode function.
	     *
	     * <p>Calls options.success or options.error on completion.</p>
	     *
	     * @param {String} mobilePhone The mobile phone number  associated with the
	     *           user that want to login by AV.User.logInWithMobilePhoneSmsCode
	     * @param {Object} options A Backbone-style options object.
	     */
	    requestLoginSmsCode: function requestLoginSmsCode(mobilePhone, options) {
	      var json = { mobilePhoneNumber: mobilePhone };
	      var request = AVRequest("requestLoginSmsCode", null, null, "POST", json);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Retrieves the currently logged in AVUser with a valid session,
	     * either from memory or localStorage, if necessary.
	     * @return {AV.Promise} resolved with the currently logged in AV.User.
	     */
	    currentAsync: function currentAsync() {
	      if (AV._config.disableCurrentUser) {
	        console.warn('AV.User.currentAsync() was disabled in multi-user environment, access user from request instead https://leancloud.cn/docs/leanengine-node-sdk-upgrade-1.html');
	        return AV.Promise.as(null);
	      }
	
	      if (AV.User._currentUser) {
	        return AV.Promise.as(AV.User._currentUser);
	      }
	
	      if (AV.User._currentUserMatchesDisk) {
	
	        return AV.Promise.as(AV.User._currentUser);
	      }
	
	      return AV.localStorage.getItemAsync(AV._getAVPath(AV.User._CURRENT_USER_KEY)).then(function (userData) {
	        if (!userData) {
	          return null;
	        }
	
	        // Load the user from local storage.
	        AV.User._currentUserMatchesDisk = true;
	
	        AV.User._currentUser = AV.Object._create("_User");
	        AV.User._currentUser._isCurrentUser = true;
	
	        var json = JSON.parse(userData);
	        AV.User._currentUser.id = json._id;
	        delete json._id;
	        AV.User._currentUser._sessionToken = json._sessionToken;
	        delete json._sessionToken;
	        AV.User._currentUser._finishFetch(json);
	        //AV.User._currentUser.set(json);
	
	        AV.User._currentUser._synchronizeAllAuthData();
	        AV.User._currentUser._refreshCache();
	        AV.User._currentUser._opSetQueue = [{}];
	        return AV.User._currentUser;
	      });
	    },
	
	    /**
	     * Retrieves the currently logged in AVUser with a valid session,
	     * either from memory or localStorage, if necessary.
	     * @return {AV.Object} The currently logged in AV.User.
	     */
	    current: function current() {
	      if (AV._config.disableCurrentUser) {
	        console.warn('AV.User.current() was disabled in multi-user environment, access user from request instead https://leancloud.cn/docs/leanengine-node-sdk-upgrade-1.html');
	        return null;
	      }
	
	      if (AV.User._currentUser) {
	        return AV.User._currentUser;
	      }
	
	      if (AV.User._currentUserMatchesDisk) {
	
	        return AV.User._currentUser;
	      }
	
	      // Load the user from local storage.
	      AV.User._currentUserMatchesDisk = true;
	
	      var userData = AV.localStorage.getItem(AV._getAVPath(AV.User._CURRENT_USER_KEY));
	      if (!userData) {
	
	        return null;
	      }
	      AV.User._currentUser = AV.Object._create("_User");
	      AV.User._currentUser._isCurrentUser = true;
	
	      var json = JSON.parse(userData);
	      AV.User._currentUser.id = json._id;
	      delete json._id;
	      AV.User._currentUser._sessionToken = json._sessionToken;
	      delete json._sessionToken;
	      AV.User._currentUser._finishFetch(json);
	      //AV.User._currentUser.set(json);
	
	      AV.User._currentUser._synchronizeAllAuthData();
	      AV.User._currentUser._refreshCache();
	      AV.User._currentUser._opSetQueue = [{}];
	      return AV.User._currentUser;
	    },
	
	    /**
	     * Persists a user as currentUser to localStorage, and into the singleton.
	     */
	    _saveCurrentUser: function _saveCurrentUser(user) {
	      var promise;
	      if (AV.User._currentUser !== user) {
	        promise = AV.User.logOut();
	      } else {
	        promise = AV.Promise.as();
	      }
	      return promise.then(function () {
	        user._isCurrentUser = true;
	        AV.User._currentUser = user;
	
	        var json = user.toJSON();
	        json._id = user.id;
	        json._sessionToken = user._sessionToken;
	        return AV.localStorage.setItemAsync(AV._getAVPath(AV.User._CURRENT_USER_KEY), JSON.stringify(json)).then(function () {
	          AV.User._currentUserMatchesDisk = true;
	        });
	      });
	    },
	
	    _registerAuthenticationProvider: function _registerAuthenticationProvider(provider) {
	      AV.User._authProviders[provider.getAuthType()] = provider;
	      // Synchronize the current user with the auth provider.
	      if (!AV._config.disableCurrentUser && AV.User.current()) {
	        AV.User.current()._synchronizeAuthData(provider.getAuthType());
	      }
	    },
	
	    _logInWith: function _logInWith(provider, options) {
	      var user = AV.Object._create("_User");
	      return user._linkWith(provider, options);
	    }
	
	  });
	};
	
	function filterOutCallbacks(options) {
	  var newOptions = _.clone(options) || {};
	  delete newOptions.success;
	  delete newOptions.error;
	  return newOptions;
	}

/***/ },
/* 43 */
/*!************************************************!*\
  !*** ./~/leancloud-storage/dist/node/query.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var AVError = __webpack_require__(/*! ./error */ 29);
	var AVRequest = __webpack_require__(/*! ./request */ 16).request;
	
	// AV.Query is a way to create a list of AV.Objects.
	module.exports = function (AV) {
	  /**
	   * Creates a new avoscloud AV.Query for the given AV.Object subclass.
	   * @param objectClass -
	   *   An instance of a subclass of AV.Object, or a AV className string.
	   * @class
	   *
	   * <p>AV.Query defines a query that is used to fetch AV.Objects. The
	   * most common use case is finding all objects that match a query through the
	   * <code>find</code> method. For example, this sample code fetches all objects
	   * of class <code>MyClass</code>. It calls a different function depending on
	   * whether the fetch succeeded or not.
	   *
	   * <pre>
	   * var query = new AV.Query(MyClass);
	   * query.find({
	   *   success: function(results) {
	   *     // results is an array of AV.Object.
	   *   },
	   *
	   *   error: function(error) {
	   *     // error is an instance of AVError.
	   *   }
	   * });</pre></p>
	   *
	   * <p>A AV.Query can also be used to retrieve a single object whose id is
	   * known, through the get method. For example, this sample code fetches an
	   * object of class <code>MyClass</code> and id <code>myId</code>. It calls a
	   * different function depending on whether the fetch succeeded or not.
	   *
	   * <pre>
	   * var query = new AV.Query(MyClass);
	   * query.get(myId, {
	   *   success: function(object) {
	   *     // object is an instance of AV.Object.
	   *   },
	   *
	   *   error: function(object, error) {
	   *     // error is an instance of AVError.
	   *   }
	   * });</pre></p>
	   *
	   * <p>A AV.Query can also be used to count the number of objects that match
	   * the query without retrieving all of those objects. For example, this
	   * sample code counts the number of objects of the class <code>MyClass</code>
	   * <pre>
	   * var query = new AV.Query(MyClass);
	   * query.count({
	   *   success: function(number) {
	   *     // There are number instances of MyClass.
	   *   },
	   *
	   *   error: function(error) {
	   *     // error is an instance of AVError.
	   *   }
	   * });</pre></p>
	   */
	  AV.Query = function (objectClass) {
	    if (_.isString(objectClass)) {
	      objectClass = AV.Object._getSubclass(objectClass);
	    }
	
	    this.objectClass = objectClass;
	
	    this.className = objectClass.prototype.className;
	
	    this._where = {};
	    this._include = [];
	    this._limit = -1; // negative limit means, do not send a limit
	    this._skip = 0;
	    this._extraOptions = {};
	  };
	
	  /**
	   * Constructs a AV.Query that is the OR of the passed in queries.  For
	   * example:
	   * <pre>var compoundQuery = AV.Query.or(query1, query2, query3);</pre>
	   *
	   * will create a compoundQuery that is an or of the query1, query2, and
	   * query3.
	   * @param {...AV.Query} var_args The list of queries to OR.
	   * @return {AV.Query} The query that is the OR of the passed in queries.
	   */
	  AV.Query.or = function () {
	    var queries = _.toArray(arguments);
	    var className = null;
	    AV._arrayEach(queries, function (q) {
	      if (_.isNull(className)) {
	        className = q.className;
	      }
	
	      if (className !== q.className) {
	        throw "All queries must be for the same class";
	      }
	    });
	    var query = new AV.Query(className);
	    query._orQuery(queries);
	    return query;
	  };
	
	  /**
	   * Constructs a AV.Query that is the AND of the passed in queries.  For
	   * example:
	   * <pre>var compoundQuery = AV.Query.and(query1, query2, query3);</pre>
	   *
	   * will create a compoundQuery that is an 'and' of the query1, query2, and
	   * query3.
	   * @param {...AV.Query} var_args The list of queries to AND.
	   * @return {AV.Query} The query that is the AND of the passed in queries.
	   */
	  AV.Query.and = function () {
	    var queries = _.toArray(arguments);
	    var className = null;
	    AV._arrayEach(queries, function (q) {
	      if (_.isNull(className)) {
	        className = q.className;
	      }
	
	      if (className !== q.className) {
	        throw "All queries must be for the same class";
	      }
	    });
	    var query = new AV.Query(className);
	    query._andQuery(queries);
	    return query;
	  };
	
	  /**
	   * Retrieves a list of AVObjects that satisfy the CQL.
	   * CQL syntax please see <a href='https://cn.avoscloud.com/docs/cql_guide.html'>CQL Guide.</a>
	   * Either options.success or options.error is called when the find
	   * completes.
	   *
	   * @param {String} cql,  A CQL string, see <a href='https://cn.avoscloud.com/docs/cql_guide.html'>CQL Guide.</a>
	   * @param {Array} pvalues, An array contains placeholder values.
	   * @param {Object} options A Backbone-style options object,it's optional.
	   * @return {AV.Promise} A promise that is resolved with the results when
	   * the query completes,it's optional.
	   */
	  AV.Query.doCloudQuery = function (cql, pvalues, options) {
	    var params = { cql: cql };
	    if (_.isArray(pvalues)) {
	      params.pvalues = pvalues;
	    } else {
	      options = pvalues;
	    }
	
	    var request = AVRequest('cloudQuery', null, null, 'GET', params, options && options.sessionToken);
	    return request.then(function (response) {
	      //query to process results.
	      var query = new AV.Query(response.className);
	      var results = _.map(response.results, function (json) {
	        var obj = query._newObject(response);
	        if (obj._finishFetch) {
	          obj._finishFetch(query._processResult(json), true);
	        }
	        return obj;
	      });
	      return {
	        results: results,
	        count: response.count,
	        className: response.className
	      };
	    })._thenRunCallbacks(options);
	  };
	
	  AV.Query._extend = AV._extend;
	
	  AV.Query.prototype = {
	    //hook to iterate result. Added by dennis<xzhuang@avoscloud.com>.
	    _processResult: function _processResult(obj) {
	      return obj;
	    },
	
	    /**
	     * Constructs a AV.Object whose id is already known by fetching data from
	     * the server.  Either options.success or options.error is called when the
	     * find completes.
	     *
	     * @param {} objectId The id of the object to be fetched.
	     * @param {Object} options A Backbone-style options object.
	     */
	    get: function get(objectId, options) {
	      if (!objectId) {
	        var errorObject = new AVError(AVError.OBJECT_NOT_FOUND, "Object not found.");
	        throw errorObject;
	      }
	
	      var self = this;
	      self.equalTo('objectId', objectId);
	
	      return self.first().then(function (response) {
	        if (!_.isEmpty(response)) {
	          return response;
	        }
	
	        var errorObject = new AVError(AVError.OBJECT_NOT_FOUND, "Object not found.");
	        return AV.Promise.error(errorObject);
	      })._thenRunCallbacks(options, null);
	    },
	
	    /**
	     * Returns a JSON representation of this query.
	     * @return {Object}
	     */
	    toJSON: function toJSON() {
	      var params = {
	        where: this._where
	      };
	
	      if (this._include.length > 0) {
	        params.include = this._include.join(",");
	      }
	      if (this._select) {
	        params.keys = this._select.join(",");
	      }
	      if (this._limit >= 0) {
	        params.limit = this._limit;
	      }
	      if (this._skip > 0) {
	        params.skip = this._skip;
	      }
	      if (this._order !== undefined) {
	        params.order = this._order;
	      }
	
	      AV._objectEach(this._extraOptions, function (v, k) {
	        params[k] = v;
	      });
	
	      return params;
	    },
	
	    _newObject: function _newObject(response) {
	      var obj;
	      if (response && response.className) {
	        obj = new AV.Object(response.className);
	      } else {
	        obj = new this.objectClass();
	      }
	      return obj;
	    },
	    _createRequest: function _createRequest(params, options) {
	      return AVRequest('classes', this.className, null, "GET", params || this.toJSON(), options && options.sessionToken);
	    },
	
	    /**
	     * Retrieves a list of AVObjects that satisfy this query.
	     * Either options.success or options.error is called when the find
	     * completes.
	     *
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is resolved with the results when
	     * the query completes.
	     */
	    find: function find(options) {
	      var self = this;
	
	      var request = this._createRequest(null, options);
	
	      return request.then(function (response) {
	        return _.map(response.results, function (json) {
	          var obj = self._newObject(response);
	          if (obj._finishFetch) {
	            obj._finishFetch(self._processResult(json), true);
	          }
	          return obj;
	        });
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Delete objects retrieved by this query.
	     * @param {Object} options Standard options object with success and error
	     *     callbacks.
	     * @return {AV.Promise} A promise that is fulfilled when the save
	     *     completes.
	     */
	    destroyAll: function destroyAll(options) {
	      var self = this;
	      return self.find().then(function (objects) {
	        return AV.Object.destroyAll(objects);
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Counts the number of objects that match this query.
	     * Either options.success or options.error is called when the count
	     * completes.
	     *
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is resolved with the count when
	     * the query completes.
	     */
	    count: function count(options) {
	      var params = this.toJSON();
	      params.limit = 0;
	      params.count = 1;
	      var request = this._createRequest(params, options);
	
	      return request.then(function (response) {
	        return response.count;
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Retrieves at most one AV.Object that satisfies this query.
	     *
	     * Either options.success or options.error is called when it completes.
	     * success is passed the object if there is one. otherwise, undefined.
	     *
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is resolved with the object when
	     * the query completes.
	     */
	    first: function first(options) {
	      var self = this;
	
	      var params = this.toJSON();
	      params.limit = 1;
	      var request = this._createRequest(params, options);
	
	      return request.then(function (response) {
	        return _.map(response.results, function (json) {
	          var obj = self._newObject();
	          if (obj._finishFetch) {
	            obj._finishFetch(self._processResult(json), true);
	          }
	          return obj;
	        })[0];
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Returns a new instance of AV.Collection backed by this query.
	     * @return {AV.Collection}
	     */
	    collection: function collection(items, options) {
	      options = options || {};
	      return new AV.Collection(items, _.extend(options, {
	        model: this._objectClass || this.objectClass,
	        query: this
	      }));
	    },
	
	    /**
	     * Sets the number of results to skip before returning any results.
	     * This is useful for pagination.
	     * Default is to skip zero results.
	     * @param {Number} n the number of results to skip.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    skip: function skip(n) {
	      this._skip = n;
	      return this;
	    },
	
	    /**
	     * Sets the limit of the number of results to return. The default limit is
	     * 100, with a maximum of 1000 results being returned at a time.
	     * @param {Number} n the number of results to limit to.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    limit: function limit(n) {
	      this._limit = n;
	      return this;
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be equal to the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that the AV.Object must contain.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    equalTo: function equalTo(key, value) {
	      this._where[key] = AV._encode(value);
	      return this;
	    },
	
	    /**
	     * Helper for condition queries
	     */
	    _addCondition: function _addCondition(key, condition, value) {
	      // Check if we already have a condition
	      if (!this._where[key]) {
	        this._where[key] = {};
	      }
	      this._where[key][condition] = AV._encode(value);
	      return this;
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular
	     * <strong>array</strong> key's length to be equal to the provided value.
	     * @param {String} key The array key to check.
	     * @param value The length value.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    sizeEqualTo: function sizeEqualTo(key, value) {
	      this._addCondition(key, "$size", value);
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be not equal to the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that must not be equalled.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    notEqualTo: function notEqualTo(key, value) {
	      this._addCondition(key, "$ne", value);
	      return this;
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be less than the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that provides an upper bound.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    lessThan: function lessThan(key, value) {
	      this._addCondition(key, "$lt", value);
	      return this;
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be greater than the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that provides an lower bound.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    greaterThan: function greaterThan(key, value) {
	      this._addCondition(key, "$gt", value);
	      return this;
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be less than or equal to the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that provides an upper bound.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    lessThanOrEqualTo: function lessThanOrEqualTo(key, value) {
	      this._addCondition(key, "$lte", value);
	      return this;
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be greater than or equal to the provided value.
	     * @param {String} key The key to check.
	     * @param value The value that provides an lower bound.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    greaterThanOrEqualTo: function greaterThanOrEqualTo(key, value) {
	      this._addCondition(key, "$gte", value);
	      return this;
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * be contained in the provided list of values.
	     * @param {String} key The key to check.
	     * @param {Array} values The values that will match.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    containedIn: function containedIn(key, values) {
	      this._addCondition(key, "$in", values);
	      return this;
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * not be contained in the provided list of values.
	     * @param {String} key The key to check.
	     * @param {Array} values The values that will not match.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    notContainedIn: function notContainedIn(key, values) {
	      this._addCondition(key, "$nin", values);
	      return this;
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's value to
	     * contain each one of the provided list of values.
	     * @param {String} key The key to check.  This key's value must be an array.
	     * @param {Array} values The values that will match.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    containsAll: function containsAll(key, values) {
	      this._addCondition(key, "$all", values);
	      return this;
	    },
	
	    /**
	     * Add a constraint for finding objects that contain the given key.
	     * @param {String} key The key that should exist.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    exists: function exists(key) {
	      this._addCondition(key, "$exists", true);
	      return this;
	    },
	
	    /**
	     * Add a constraint for finding objects that do not contain a given key.
	     * @param {String} key The key that should not exist
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    doesNotExist: function doesNotExist(key) {
	      this._addCondition(key, "$exists", false);
	      return this;
	    },
	
	    /**
	     * Add a regular expression constraint for finding string values that match
	     * the provided regular expression.
	     * This may be slow for large datasets.
	     * @param {String} key The key that the string to match is stored in.
	     * @param {RegExp} regex The regular expression pattern to match.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    matches: function matches(key, regex, modifiers) {
	      this._addCondition(key, "$regex", regex);
	      if (!modifiers) {
	        modifiers = "";
	      }
	      // Javascript regex options support mig as inline options but store them
	      // as properties of the object. We support mi & should migrate them to
	      // modifiers
	      if (regex.ignoreCase) {
	        modifiers += 'i';
	      }
	      if (regex.multiline) {
	        modifiers += 'm';
	      }
	
	      if (modifiers && modifiers.length) {
	        this._addCondition(key, "$options", modifiers);
	      }
	      return this;
	    },
	
	    /**
	     * Add a constraint that requires that a key's value matches a AV.Query
	     * constraint.
	     * @param {String} key The key that the contains the object to match the
	     *                     query.
	     * @param {AV.Query} query The query that should match.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    matchesQuery: function matchesQuery(key, query) {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      this._addCondition(key, "$inQuery", queryJSON);
	      return this;
	    },
	
	    /**
	      * Add a constraint that requires that a key's value not matches a
	      * AV.Query constraint.
	      * @param {String} key The key that the contains the object to match the
	      *                     query.
	      * @param {AV.Query} query The query that should not match.
	      * @return {AV.Query} Returns the query, so you can chain this call.
	      */
	    doesNotMatchQuery: function doesNotMatchQuery(key, query) {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      this._addCondition(key, "$notInQuery", queryJSON);
	      return this;
	    },
	
	    /**
	     * Add a constraint that requires that a key's value matches a value in
	     * an object returned by a different AV.Query.
	     * @param {String} key The key that contains the value that is being
	     *                     matched.
	     * @param {String} queryKey The key in the objects returned by the query to
	     *                          match against.
	     * @param {AV.Query} query The query to run.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    matchesKeyInQuery: function matchesKeyInQuery(key, queryKey, query) {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      this._addCondition(key, "$select", { key: queryKey, query: queryJSON });
	      return this;
	    },
	
	    /**
	     * Add a constraint that requires that a key's value not match a value in
	     * an object returned by a different AV.Query.
	     * @param {String} key The key that contains the value that is being
	     *                     excluded.
	     * @param {String} queryKey The key in the objects returned by the query to
	     *                          match against.
	     * @param {AV.Query} query The query to run.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    doesNotMatchKeyInQuery: function doesNotMatchKeyInQuery(key, queryKey, query) {
	      var queryJSON = query.toJSON();
	      queryJSON.className = query.className;
	      this._addCondition(key, "$dontSelect", { key: queryKey, query: queryJSON });
	      return this;
	    },
	
	    /**
	     * Add constraint that at least one of the passed in queries matches.
	     * @param {Array} queries
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    _orQuery: function _orQuery(queries) {
	      var queryJSON = _.map(queries, function (q) {
	        return q.toJSON().where;
	      });
	
	      this._where.$or = queryJSON;
	      return this;
	    },
	
	    /**
	     * Add constraint that both of the passed in queries matches.
	     * @param {Array} queries
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    _andQuery: function _andQuery(queries) {
	      var queryJSON = _.map(queries, function (q) {
	        return q.toJSON().where;
	      });
	
	      this._where.$and = queryJSON;
	      return this;
	    },
	
	    /**
	     * Converts a string into a regex that matches it.
	     * Surrounding with \Q .. \E does this, we just need to escape \E's in
	     * the text separately.
	     */
	    _quote: function _quote(s) {
	      return "\\Q" + s.replace("\\E", "\\E\\\\E\\Q") + "\\E";
	    },
	
	    /**
	     * Add a constraint for finding string values that contain a provided
	     * string.  This may be slow for large datasets.
	     * @param {String} key The key that the string to match is stored in.
	     * @param {String} substring The substring that the value must contain.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    contains: function contains(key, value) {
	      this._addCondition(key, "$regex", this._quote(value));
	      return this;
	    },
	
	    /**
	     * Add a constraint for finding string values that start with a provided
	     * string.  This query will use the backend index, so it will be fast even
	     * for large datasets.
	     * @param {String} key The key that the string to match is stored in.
	     * @param {String} prefix The substring that the value must start with.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    startsWith: function startsWith(key, value) {
	      this._addCondition(key, "$regex", "^" + this._quote(value));
	      return this;
	    },
	
	    /**
	     * Add a constraint for finding string values that end with a provided
	     * string.  This will be slow for large datasets.
	     * @param {String} key The key that the string to match is stored in.
	     * @param {String} suffix The substring that the value must end with.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    endsWith: function endsWith(key, value) {
	      this._addCondition(key, "$regex", this._quote(value) + "$");
	      return this;
	    },
	
	    /**
	     * Sorts the results in ascending order by the given key.
	     *
	     * @param {String} key The key to order by.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    ascending: function ascending(key) {
	      this._order = key;
	      return this;
	    },
	
	    /**
	     * Also sorts the results in ascending order by the given key. The previous sort keys have
	     * precedence over this key.
	     *
	     * @param {String} key The key to order by
	     * @return {AV.Query} Returns the query so you can chain this call.
	     */
	    addAscending: function addAscending(key) {
	      if (this._order) this._order += ',' + key;else this._order = key;
	      return this;
	    },
	
	    /**
	     * Sorts the results in descending order by the given key.
	     *
	     * @param {String} key The key to order by.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    descending: function descending(key) {
	      this._order = "-" + key;
	      return this;
	    },
	
	    /**
	    * Also sorts the results in descending order by the given key. The previous sort keys have
	    * precedence over this key.
	    *
	    * @param {String} key The key to order by
	    * @return {AV.Query} Returns the query so you can chain this call.
	    */
	    addDescending: function addDescending(key) {
	      if (this._order) this._order += ',-' + key;else this._order = '-' + key;
	      return this;
	    },
	
	    /**
	     * Add a proximity based constraint for finding objects with key point
	     * values near the point given.
	     * @param {String} key The key that the AV.GeoPoint is stored in.
	     * @param {AV.GeoPoint} point The reference AV.GeoPoint that is used.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    near: function near(key, point) {
	      if (!(point instanceof AV.GeoPoint)) {
	        // Try to cast it to a GeoPoint, so that near("loc", [20,30]) works.
	        point = new AV.GeoPoint(point);
	      }
	      this._addCondition(key, "$nearSphere", point);
	      return this;
	    },
	
	    /**
	     * Add a proximity based constraint for finding objects with key point
	     * values near the point given and within the maximum distance given.
	     * @param {String} key The key that the AV.GeoPoint is stored in.
	     * @param {AV.GeoPoint} point The reference AV.GeoPoint that is used.
	     * @param maxDistance Maximum distance (in radians) of results to return.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    withinRadians: function withinRadians(key, point, distance) {
	      this.near(key, point);
	      this._addCondition(key, "$maxDistance", distance);
	      return this;
	    },
	
	    /**
	     * Add a proximity based constraint for finding objects with key point
	     * values near the point given and within the maximum distance given.
	     * Radius of earth used is 3958.8 miles.
	     * @param {String} key The key that the AV.GeoPoint is stored in.
	     * @param {AV.GeoPoint} point The reference AV.GeoPoint that is used.
	     * @param {Number} maxDistance Maximum distance (in miles) of results to
	     *     return.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    withinMiles: function withinMiles(key, point, distance) {
	      return this.withinRadians(key, point, distance / 3958.8);
	    },
	
	    /**
	     * Add a proximity based constraint for finding objects with key point
	     * values near the point given and within the maximum distance given.
	     * Radius of earth used is 6371.0 kilometers.
	     * @param {String} key The key that the AV.GeoPoint is stored in.
	     * @param {AV.GeoPoint} point The reference AV.GeoPoint that is used.
	     * @param {Number} maxDistance Maximum distance (in kilometers) of results
	     *     to return.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    withinKilometers: function withinKilometers(key, point, distance) {
	      return this.withinRadians(key, point, distance / 6371.0);
	    },
	
	    /**
	     * Add a constraint to the query that requires a particular key's
	     * coordinates be contained within a given rectangular geographic bounding
	     * box.
	     * @param {String} key The key to be constrained.
	     * @param {AV.GeoPoint} southwest
	     *     The lower-left inclusive corner of the box.
	     * @param {AV.GeoPoint} northeast
	     *     The upper-right inclusive corner of the box.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    withinGeoBox: function withinGeoBox(key, southwest, northeast) {
	      if (!(southwest instanceof AV.GeoPoint)) {
	        southwest = new AV.GeoPoint(southwest);
	      }
	      if (!(northeast instanceof AV.GeoPoint)) {
	        northeast = new AV.GeoPoint(northeast);
	      }
	      this._addCondition(key, '$within', { '$box': [southwest, northeast] });
	      return this;
	    },
	
	    /**
	     * Include nested AV.Objects for the provided key.  You can use dot
	     * notation to specify which fields in the included object are also fetch.
	     * @param {String} key The name of the key to include.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    include: function include() {
	      var self = this;
	      AV._arrayEach(arguments, function (key) {
	        if (_.isArray(key)) {
	          self._include = self._include.concat(key);
	        } else {
	          self._include.push(key);
	        }
	      });
	      return this;
	    },
	
	    /**
	     * Restrict the fields of the returned AV.Objects to include only the
	     * provided keys.  If this is called multiple times, then all of the keys
	     * specified in each of the calls will be included.
	     * @param {Array} keys The names of the keys to include.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    select: function select() {
	      var self = this;
	      this._select = this._select || [];
	      AV._arrayEach(arguments, function (key) {
	        if (_.isArray(key)) {
	          self._select = self._select.concat(key);
	        } else {
	          self._select.push(key);
	        }
	      });
	      return this;
	    },
	
	    /**
	     * Iterates over each result of a query, calling a callback for each one. If
	     * the callback returns a promise, the iteration will not continue until
	     * that promise has been fulfilled. If the callback returns a rejected
	     * promise, then iteration will stop with that error. The items are
	     * processed in an unspecified order. The query may not have any sort order,
	     * and may not use limit or skip.
	     * @param callback {Function} Callback that will be called with each result
	     *     of the query.
	     * @param options {Object} An optional Backbone-like options object with
	     *     success and error callbacks that will be invoked once the iteration
	     *     has finished.
	     * @return {AV.Promise} A promise that will be fulfilled once the
	     *     iteration has completed.
	     */
	    each: function each(callback, options) {
	      options = options || {};
	
	      if (this._order || this._skip || this._limit >= 0) {
	        var error = "Cannot iterate on a query with sort, skip, or limit.";
	        return AV.Promise.error(error)._thenRunCallbacks(options);
	      }
	
	      var promise = new AV.Promise();
	
	      var query = new AV.Query(this.objectClass);
	      // We can override the batch size from the options.
	      // This is undocumented, but useful for testing.
	      query._limit = options.batchSize || 100;
	      query._where = _.clone(this._where);
	      query._include = _.clone(this._include);
	
	      query.ascending('objectId');
	
	      var finished = false;
	      return AV.Promise._continueWhile(function () {
	        return !finished;
	      }, function () {
	        return query.find().then(function (results) {
	          var callbacksDone = AV.Promise.as();
	          _.each(results, function (result) {
	            callbacksDone = callbacksDone.then(function () {
	              return callback(result);
	            });
	          });
	
	          return callbacksDone.then(function () {
	            if (results.length >= query._limit) {
	              query.greaterThan("objectId", results[results.length - 1].id);
	            } else {
	              finished = true;
	            }
	          });
	        });
	      })._thenRunCallbacks(options);
	    }
	  };
	
	  AV.FriendShipQuery = AV.Query._extend({
	    _objectClass: AV.User,
	    _newObject: function _newObject() {
	      return new AV.User();
	    },
	    _processResult: function _processResult(json) {
	      if (json && json[this._friendshipTag]) {
	        var user = json[this._friendshipTag];
	        if (user.__type === 'Pointer' && user.className === '_User') {
	          delete user.__type;
	          delete user.className;
	        }
	        return user;
	      } else {
	        return null;
	      }
	    }
	  });
	};

/***/ },
/* 44 */
/*!********************************************************!*\
  !*** ./~/leancloud-storage/dist/node/cloudfunction.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var AVRequest = __webpack_require__(/*! ./request */ 16).request;
	
	module.exports = function (AV) {
	  /**
	   * @namespace Contains functions for calling and declaring
	   * <a href="/docs/cloud_code_guide#functions">cloud functions</a>.
	   * <p><strong><em>
	   *   Some functions are only available from Cloud Code.
	   * </em></strong></p>
	   */
	  AV.Cloud = AV.Cloud || {};
	
	  _.extend(AV.Cloud, /** @lends AV.Cloud */{
	    /**
	     * Makes a call to a cloud function.
	     * @param {String} name The function name.
	     * @param {Object} data The parameters to send to the cloud function.
	     * @param {Object} options A Backbone-style options object
	     * options.success, if set, should be a function to handle a successful
	     * call to a cloud function.  options.error should be a function that
	     * handles an error running the cloud function.  Both functions are
	     * optional.  Both functions take a single argument.
	     * @return {AV.Promise} A promise that will be resolved with the result
	     * of the function.
	     */
	    run: function run(name, data, options) {
	      var request = AVRequest('functions', name, null, 'POST', AV._encode(data, null, true), options && options.sessionToken);
	
	      return request.then(function (resp) {
	        return AV._decode(null, resp).result;
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Makes a call to a cloud function, you can send {AV.Object} as param or a field of param; the response
	     * from server will also be parsed as an {AV.Object}, array of {AV.Object}, or object includes {AV.Object}
	     * @param {String} name The function name.
	     * @param {Object} data The parameters to send to the cloud function.
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that will be resolved with the result of the function.
	     */
	    rpc: function rpc(name, data, options) {
	      if (_.isArray(data)) {
	        return AV.Promise.error(new Error('Can\'t pass Array as the param of rpc function in JavaScript SDK.'))._thenRunCallbacks(options);
	      }
	
	      return AVRequest('call', name, null, 'POST', AV._encodeObjectOrArray(data), options && options.sessionToken).then(function (resp) {
	        return AV._decode('', resp).result;
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Make a call to request server date time.
	     * @param {Object} options A Backbone-style options object
	     * options.success, if set, should be a function to handle a successful
	     * call to a cloud function.  options.error should be a function that
	     * handles an error running the cloud function.  Both functions are
	     * optional.  Both functions take a single argument.
	     * @return {AV.Promise} A promise that will be resolved with the result
	     * of the function.
	     * @since 0.5.9
	     */
	    getServerDate: function getServerDate(options) {
	      var request = AVRequest("date", null, null, 'GET');
	
	      return request.then(function (resp) {
	        return AV._decode(null, resp);
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * Makes a call to request a sms code for operation verification.
	     * @param {Object} data The mobile phone number string or a JSON
	     *    object that contains mobilePhoneNumber,template,op,ttl,name etc.
	     * @param {Object} options A Backbone-style options object
	     * @return {AV.Promise} A promise that will be resolved with the result
	     * of the function.
	     */
	    requestSmsCode: function requestSmsCode(data, options) {
	      if (_.isString(data)) {
	        data = { mobilePhoneNumber: data };
	      }
	      if (!data.mobilePhoneNumber) {
	        throw "Missing mobilePhoneNumber.";
	      }
	      var request = AVRequest("requestSmsCode", null, null, 'POST', data);
	      return request._thenRunCallbacks(options);
	    },
	
	    /**
	     * Makes a call to verify sms code that sent by AV.Cloud.requestSmsCode
	     * @param {String} code The sms code sent by AV.Cloud.requestSmsCode
	     * @param {phone} phone The mobile phoner number(optional).
	     * @param {Object} options A Backbone-style options object
	     * @return {AV.Promise} A promise that will be resolved with the result
	     * of the function.
	     */
	    verifySmsCode: function verifySmsCode(code, phone, options) {
	      if (!code) throw "Missing sms code.";
	      var params = {};
	      if (_.isString(phone)) {
	        params['mobilePhoneNumber'] = phone;
	      } else {
	        // To be compatible with old versions.
	        options = phone;
	      }
	
	      var request = AVRequest("verifySmsCode", code, null, 'POST', params);
	      return request._thenRunCallbacks(options);
	    }
	  });
	};

/***/ },
/* 45 */
/*!***********************************************!*\
  !*** ./~/leancloud-storage/dist/node/push.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var AVRequest = __webpack_require__(/*! ./request */ 16).request;
	
	module.exports = function (AV) {
	  AV.Installation = AV.Object.extend("_Installation");
	
	  /**
	   * Contains functions to deal with Push in AV
	   * @name AV.Push
	   * @namespace
	   */
	  AV.Push = AV.Push || {};
	
	  /**
	   * Sends a push notification.
	   * @param {Object} data -  The data of the push notification.  Valid fields
	   * are:
	   *   <ol>
	   *     <li>channels - An Array of channels to push to.</li>
	   *     <li>push_time - A Date object for when to send the push.</li>
	   *     <li>expiration_time -  A Date object for when to expire
	   *         the push.</li>
	   *     <li>expiration_interval - The seconds from now to expire the push.</li>
	   *     <li>where - A AV.Query over AV.Installation that is used to match
	   *         a set of installations to push to.</li>
	   *     <li>cql - A CQL statement over AV.Installation that is used to match
	   *         a set of installations to push to.</li>
	   *     <li>data - The data to send as part of the push</li>
	   *   <ol>
	   * @param {Object} options An object that has an optional success function,
	   * that takes no arguments and will be called on a successful push, and
	   * an error function that takes a AVError and will be called if the push
	   * failed.
	   */
	  AV.Push.send = function (data, options) {
	    if (data.where) {
	      data.where = data.where.toJSON().where;
	    }
	
	    if (data.where && data.cql) {
	      throw "Both where and cql can't be set";
	    }
	
	    if (data.push_time) {
	      data.push_time = data.push_time.toJSON();
	    }
	
	    if (data.expiration_time) {
	      data.expiration_time = data.expiration_time.toJSON();
	    }
	
	    if (data.expiration_time && data.expiration_time_interval) {
	      throw "Both expiration_time and expiration_time_interval can't be set";
	    }
	
	    var request = AVRequest('push', null, null, 'POST', data);
	    return request._thenRunCallbacks(options);
	  };
	};

/***/ },
/* 46 */
/*!*************************************************!*\
  !*** ./~/leancloud-storage/dist/node/status.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var AVRequest = __webpack_require__(/*! ./request */ 16).request;
	
	module.exports = function (AV) {
	  /**
	   * Contains functions to deal with Status in AVOS Cloud.
	   * @name AV.Status
	   * @namespace
	   */
	  AV.Status = function (imageUrl, message) {
	    this.data = {};
	    this.inboxType = 'default';
	    this.query = null;
	    if (imageUrl && (typeof imageUrl === 'undefined' ? 'undefined' : _typeof(imageUrl)) === 'object') {
	      this.data = imageUrl;
	    } else {
	      if (imageUrl) {
	        this.data.image = imageUrl;
	      }
	      if (message) {
	        this.data.message = message;
	      }
	    }
	    return this;
	  };
	
	  AV.Status.prototype = {
	    /**
	     * Gets the value of an attribute in status data.
	     * @param {String} attr The string name of an attribute.
	     */
	    get: function get(attr) {
	      return this.data[attr];
	    },
	    /**
	     * Sets a hash of model attributes on the status data.
	     * @param {String} key The key to set.
	     * @param {} value The value to give it.
	     */
	    set: function set(key, value) {
	      this.data[key] = value;
	      return this;
	    },
	    /**
	     * Destroy this status,then it will not be avaiable in other user's inboxes.
	     * @param {Object} options An optional Backbone-like options object with
	     *     success and error callbacks that will be invoked once the iteration
	     *     has finished.
	     * @return {AV.Promise} A promise that is fulfilled when the destroy
	     *     completes.
	     */
	    destroy: function destroy(options) {
	      if (!this.id) return AV.Promise.error('The status id is not exists.')._thenRunCallbacks(options);
	      var request = AVRequest('statuses', null, this.id, 'DELETE', options && options.sessionToken);
	      return request._thenRunCallbacks(options);
	    },
	    /**
	      * Cast the AV.Status object to an AV.Object pointer.
	      * @return {AV.Object} A AV.Object pointer.
	      */
	    toObject: function toObject() {
	      if (!this.id) return null;
	      return AV.Object.createWithoutData('_Status', this.id);
	    },
	    _getDataJSON: function _getDataJSON() {
	      var json = _.clone(this.data);
	      return AV._encode(json);
	    },
	    /**
	     * Send  a status by a AV.Query object.
	     * <p>For example,send a status to male users:<br/><pre>
	     *     var status = new AVStatus('image url', 'a message');
	     *     status.query = new AV.Query('_User');
	     *     status.query.equalTo('gender', 'male');
	     *     status.send().then(function(){
	     *              //send status successfully.
	     *      }, function(err){
	     *             //an error threw.
	     *             console.dir(err);
	     *      });
	     * </pre></p>
	     * @since 0.3.0
	     * @param {Object} options An optional Backbone-like options object with
	     *     success and error callbacks that will be invoked once the iteration
	     *     has finished.
	     * @return {AV.Promise} A promise that is fulfilled when the send
	     *     completes.
	     */
	    send: function send(options) {
	      if (!AV.User.current()) {
	        throw 'Please signin an user.';
	      }
	      if (!this.query) {
	        return AV.Status.sendStatusToFollowers(this, options);
	      }
	
	      var query = this.query.toJSON();
	      query.className = this.query.className;
	      var data = {};
	      data.query = query;
	      this.data = this.data || {};
	      var currUser = AV.Object.createWithoutData('_User', AV.User.current().id)._toPointer();
	      this.data.source = this.data.source || currUser;
	      data.data = this._getDataJSON();
	      data.inboxType = this.inboxType || 'default';
	
	      var request = AVRequest('statuses', null, null, 'POST', data, options && options.sessionToken);
	      var self = this;
	      return request.then(function (response) {
	        self.id = response.objectId;
	        self.createdAt = AV._parseDate(response.createdAt);
	        return self;
	      })._thenRunCallbacks(options);
	    },
	
	    _finishFetch: function _finishFetch(serverData) {
	      this.id = serverData.objectId;
	      this.createdAt = AV._parseDate(serverData.createdAt);
	      this.updatedAt = AV._parseDate(serverData.updatedAt);
	      this.messageId = serverData.messageId;
	      delete serverData.messageId;
	      delete serverData.objectId;
	      delete serverData.createdAt;
	      delete serverData.updatedAt;
	      this.data = AV._decode(undefined, serverData);
	    }
	  };
	
	  /**
	   * Send  a status to current signined user's followers.For example:
	   * <p><pre>
	   *     var status = new AVStatus('image url', 'a message');
	   *     AV.Status.sendStatusToFollowers(status).then(function(){
	   *              //send status successfully.
	   *      }, function(err){
	   *             //an error threw.
	   *             console.dir(err);
	   *      });
	   * </pre></p>
	   * @since 0.3.0
	   * @param {AV.Status} status  A status object to be send to followers.
	   * @param {Object} options An optional Backbone-like options object with
	   *     success and error callbacks that will be invoked once the iteration
	   *     has finished.
	   * @return {AV.Promise} A promise that is fulfilled when the send
	   *     completes.
	   */
	  AV.Status.sendStatusToFollowers = function (status, options) {
	    if (!AV.User.current()) {
	      throw 'Please signin an user.';
	    }
	    var query = {};
	    query.className = '_Follower';
	    query.keys = 'follower';
	    var currUser = AV.Object.createWithoutData('_User', AV.User.current().id)._toPointer();
	    query.where = { user: currUser };
	    var data = {};
	    data.query = query;
	    status.data = status.data || {};
	    status.data.source = status.data.source || currUser;
	    data.data = status._getDataJSON();
	    data.inboxType = status.inboxType || 'default';
	
	    var request = AVRequest('statuses', null, null, 'POST', data, options && options.sessionToken);
	    return request.then(function (response) {
	      status.id = response.objectId;
	      status.createdAt = AV._parseDate(response.createdAt);
	      return status;
	    })._thenRunCallbacks(options);
	  };
	
	  /**
	   * <p>Send  a status from current signined user to other user's private status inbox.</p>
	   * <p>For example,send a private status to user '52e84e47e4b0f8de283b079b':<br/>
	   * <pre>
	   *    var status = new AVStatus('image url', 'a message');
	   *     AV.Status.sendPrivateStatus(status, '52e84e47e4b0f8de283b079b').then(function(){
	   *              //send status successfully.
	   *      }, function(err){
	   *             //an error threw.
	   *             console.dir(err);
	   *      });
	   * </pre></p>
	   * @since 0.3.0
	   * @param {AV.Status} status  A status object to be send to followers.
	   * @param {} target The target user or user's objectId.
	   * @param {Object} options An optional Backbone-like options object with
	   *     success and error callbacks that will be invoked once the iteration
	   *     has finished.
	   * @return {AV.Promise} A promise that is fulfilled when the send
	   *     completes.
	   */
	  AV.Status.sendPrivateStatus = function (status, target, options) {
	    if (!AV.User.current()) {
	      throw 'Please signin an user.';
	    }
	    if (!target) {
	      throw "Invalid target user.";
	    }
	    var userObjectId = _.isString(target) ? target : target.id;
	    if (!userObjectId) {
	      throw "Invalid target user.";
	    }
	
	    var query = {};
	    query.className = '_User';
	    var currUser = AV.Object.createWithoutData('_User', AV.User.current().id)._toPointer();
	    query.where = { objectId: userObjectId };
	    var data = {};
	    data.query = query;
	    status.data = status.data || {};
	    status.data.source = status.data.source || currUser;
	    data.data = status._getDataJSON();
	    data.inboxType = 'private';
	    status.inboxType = 'private';
	
	    var request = AVRequest('statuses', null, null, 'POST', data, options && options.sessionToken);
	    return request.then(function (response) {
	      status.id = response.objectId;
	      status.createdAt = AV._parseDate(response.createdAt);
	      return status;
	    })._thenRunCallbacks(options);
	  };
	
	  /**
	   * Count unread statuses in someone's inbox.For example:<br/>
	   * <p><pre>
	   *  AV.Status.countUnreadStatuses(AV.User.current()).then(function(response){
	   *    console.log(response.unread); //unread statuses number.
	   *    console.log(response.total);  //total statuses number.
	   *  });
	   * </pre></p>
	   * @since 0.3.0
	   * @param {Object} source The status source.
	   * @return {AV.Query} The query object for status.
	   * @return {AV.Promise} A promise that is fulfilled when the count
	   *     completes.
	   */
	  AV.Status.countUnreadStatuses = function (owner) {
	    if (!AV.User.current() && owner == null) {
	      throw 'Please signin an user or pass the owner objectId.';
	    }
	    owner = owner || AV.User.current();
	    var options = !_.isString(arguments[1]) ? arguments[1] : arguments[2];
	    var inboxType = !_.isString(arguments[1]) ? 'default' : arguments[1];
	    var params = {};
	    params.inboxType = AV._encode(inboxType);
	    params.owner = AV._encode(owner);
	    var request = AVRequest('subscribe/statuses/count', null, null, 'GET', params, options && options.sessionToken);
	    return request._thenRunCallbacks(options);
	  };
	
	  /**
	   * Create a status query to find someone's published statuses.For example:<br/>
	   * <p><pre>
	   *   //Find current user's published statuses.
	   *   var query = AV.Status.statusQuery(AV.User.current());
	   *   query.find().then(function(statuses){
	   *      //process statuses
	   *   });
	   * </pre></p>
	   * @since 0.3.0
	   * @param {Object} source The status source.
	   * @return {AV.Query} The query object for status.
	   */
	  AV.Status.statusQuery = function (source) {
	    var query = new AV.Query('_Status');
	    if (source) {
	      query.equalTo('source', source);
	    }
	    return query;
	  };
	
	  /**
	   * <p>AV.InboxQuery defines a query that is used to fetch somebody's inbox statuses.</p>
	   * @see AV.Status#inboxQuery
	   * @class
	   */
	  AV.InboxQuery = AV.Query._extend( /** @lends AV.InboxQuery.prototype */{
	    _objectClass: AV.Status,
	    _sinceId: 0,
	    _maxId: 0,
	    _inboxType: 'default',
	    _owner: null,
	    _newObject: function _newObject() {
	      return new AV.Status();
	    },
	    _createRequest: function _createRequest(params, options) {
	      return AVRequest('subscribe/statuses', null, null, 'GET', params || this.toJSON(), options && options.sessionToken);
	    },
	
	    /**
	     * Sets the messageId of results to skip before returning any results.
	     * This is useful for pagination.
	     * Default is zero.
	     * @param {Number} n the mesage id.
	     * @return {AV.InboxQuery} Returns the query, so you can chain this call.
	     */
	    sinceId: function sinceId(id) {
	      this._sinceId = id;
	      return this;
	    },
	    /**
	     * Sets the maximal messageId of results。
	     * This is useful for pagination.
	     * Default is zero that is no limition.
	     * @param {Number} n the mesage id.
	     * @return {AV.InboxQuery} Returns the query, so you can chain this call.
	     */
	    maxId: function maxId(id) {
	      this._maxId = id;
	      return this;
	    },
	    /**
	     * Sets the owner of the querying inbox.
	     * @param {Object} owner The inbox owner.
	     * @return {AV.InboxQuery} Returns the query, so you can chain this call.
	     */
	    owner: function owner(_owner) {
	      this._owner = _owner;
	      return this;
	    },
	    /**
	     * Sets the querying inbox type.default is 'default'.
	     * @param {Object} owner The inbox type.
	     * @return {AV.InboxQuery} Returns the query, so you can chain this call.
	     */
	    inboxType: function inboxType(type) {
	      this._inboxType = type;
	      return this;
	    },
	    toJSON: function toJSON() {
	      var params = AV.InboxQuery.__super__.toJSON.call(this);
	      params.owner = AV._encode(this._owner);
	      params.inboxType = AV._encode(this._inboxType);
	      params.sinceId = AV._encode(this._sinceId);
	      params.maxId = AV._encode(this._maxId);
	      return params;
	    }
	  });
	
	  /**
	   * Create a inbox status query to find someone's inbox statuses.For example:<br/>
	   * <p><pre>
	   *   //Find current user's default inbox statuses.
	   *   var query = AV.Status.inboxQuery(AV.User.current());
	   *   //find the statuses after the last message id
	   *   query.sinceId(lastMessageId);
	   *   query.find().then(function(statuses){
	   *      //process statuses
	   *   });
	   * </pre></p>
	   * @since 0.3.0
	   * @param {Object} owner The inbox's owner
	   * @param {String} inboxType The inbox type,'default' by default.
	   * @return {AV.InboxQuery} The inbox query object.
	   * @see AV.InboxQuery
	   */
	  AV.Status.inboxQuery = function (owner, inboxType) {
	    var query = new AV.InboxQuery(AV.Status);
	    if (owner) {
	      query._owner = owner;
	    }
	    if (inboxType) {
	      query._inboxType = inboxType;
	    }
	    return query;
	  };
	};

/***/ },
/* 47 */
/*!*************************************************!*\
  !*** ./~/leancloud-storage/dist/node/search.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var AVRequest = __webpack_require__(/*! ./request */ 16).request;
	
	module.exports = function (AV) {
	  /**
	   * A builder to generate sort string for app searching.For example:
	   * <pre><code>
	   *   var builder = new AV.SearchSortBuilder();
	   *   builder.ascending('key1').descending('key2','max');
	   *   var query = new AV.SearchQuery('Player');
	   *   query.sortBy(builder);
	   *   query.find().then ...
	   * </code></pre>
	   * @class
	   * @since 0.5.1
	   */
	  AV.SearchSortBuilder = function () {
	    this._sortFields = [];
	  };
	
	  AV.SearchSortBuilder.prototype = {
	    _addField: function _addField(key, order, mode, missing) {
	      var field = {};
	      field[key] = {
	        order: order || 'asc',
	        mode: mode || 'avg',
	        missing: '_' + (missing || 'last')
	      };
	      this._sortFields.push(field);
	      return this;
	    },
	
	    /**
	     * Sorts the results in ascending order by the given key and options.
	     *
	     * @param {String} key The key to order by.
	     * @param {String} mode The sort mode, default is 'avg', you can choose
	     *                  'max' or 'min' too.
	     * @param {String} missing The missing key behaviour, default is 'last',
	     *                  you can choose 'first' too.
	     * @return {AV.SearchSortBuilder} Returns the builder, so you can chain this call.
	     */
	    ascending: function ascending(key, mode, missing) {
	      return this._addField(key, 'asc', mode, missing);
	    },
	
	    /**
	     * Sorts the results in descending order by the given key and options.
	     *
	     * @param {String} key The key to order by.
	     * @param {String} mode The sort mode, default is 'avg', you can choose
	     *                  'max' or 'min' too.
	     * @param {String} missing The missing key behaviour, default is 'last',
	     *                  you can choose 'first' too.
	     * @return {AV.SearchSortBuilder} Returns the builder, so you can chain this call.
	     */
	    descending: function descending(key, mode, missing) {
	      return this._addField(key, 'desc', mode, missing);
	    },
	
	    /**
	     * Add a proximity based constraint for finding objects with key point
	     * values near the point given.
	     * @param {String} key The key that the AV.GeoPoint is stored in.
	     * @param {AV.GeoPoint} point The reference AV.GeoPoint that is used.
	     * @param {Object} options The other options such as mode,order, unit etc.
	     * @return {AV.SearchSortBuilder} Returns the builder, so you can chain this call.
	     */
	    whereNear: function whereNear(key, point, options) {
	      options = options || {};
	      var field = {};
	      var geo = {
	        lat: point.latitude,
	        lon: point.longitude
	      };
	      var m = {
	        order: options.order || 'asc',
	        mode: options.mode || 'avg',
	        unit: options.unit || 'km'
	      };
	      m[key] = geo;
	      field['_geo_distance'] = m;
	
	      this._sortFields.push(field);
	      return this;
	    },
	
	    /**
	     * Build a sort string by configuration.
	     * @return {String} the sort string.
	     */
	    build: function build() {
	      return JSON.stringify(AV._encode(this._sortFields));
	    }
	  };
	
	  /**
	   * App searching query.Use just like AV.Query:
	   * <pre><code>
	   *   var query = new AV.SearchQuery('Player');
	   *   query.queryString('*');
	   *   query.find().then(function(results) {
	   *     console.log('Found %d objects', query.hits());
	   *     //Process results
	   *   });
	   *
	   * </code></pre>
	   * Visite <a href='https://leancloud.cn/docs/app_search_guide.html'>App Searching Guide</a>
	   * for more details.
	   * @class
	   * @since 0.5.1
	   *
	   */
	  AV.SearchQuery = AV.Query._extend( /** @lends AV.SearchQuery.prototype */{
	    _sid: null,
	    _hits: 0,
	    _queryString: null,
	    _highlights: null,
	    _sortBuilder: null,
	    _createRequest: function _createRequest(params, options) {
	      return AVRequest('search/select', null, null, 'GET', params || this.toJSON(), options && options.sessionToken);
	    },
	
	    /**
	     * Sets the sid of app searching query.Default is null.
	     * @param {String} sid  Scroll id for searching.
	     * @return {AV.SearchQuery} Returns the query, so you can chain this call.
	     */
	    sid: function sid(_sid) {
	      this._sid = _sid;
	      return this;
	    },
	
	    /**
	     * Sets the query string of app searching.
	     * @param {String} q  The query string.
	     * @return {AV.SearchQuery} Returns the query, so you can chain this call.
	     */
	    queryString: function queryString(q) {
	      this._queryString = q;
	      return this;
	    },
	
	    /**
	     * Sets the highlight fields. Such as
	     * <pre><code>
	     *   query.highlights('title');
	     *   //or pass an array.
	     *   query.highlights(['title', 'content'])
	     * </code></pre>
	     * @param {Array} highlights a list of fields.
	     * @return {AV.SearchQuery} Returns the query, so you can chain this call.
	     */
	    highlights: function highlights(_highlights) {
	      var objects;
	      if (_highlights && _.isString(_highlights)) {
	        objects = arguments;
	      } else {
	        objects = _highlights;
	      }
	      this._highlights = objects;
	      return this;
	    },
	
	    /**
	     * Sets the sort builder for this query.
	     * @see AV.SearchSortBuilder
	     * @param { AV.SearchSortBuilder} builder The sort builder.
	     * @return {AV.SearchQuery} Returns the query, so you can chain this call.
	     *
	     */
	    sortBy: function sortBy(builder) {
	      this._sortBuilder = builder;
	      return this;
	    },
	
	    /**
	     * Returns the number of objects that match this query.
	     * @return {Number}
	     */
	    hits: function hits() {
	      if (!this._hits) {
	        this._hits = 0;
	      }
	      return this._hits;
	    },
	
	    _processResult: function _processResult(json) {
	      delete json['className'];
	      delete json['_app_url'];
	      delete json['_deeplink'];
	      return json;
	    },
	
	    /**
	     * Returns true when there are more documents can be retrieved by this
	     * query instance, you can call find function to get more results.
	     * @see AV.SearchQuery#find
	     * @return {Boolean}
	     */
	    hasMore: function hasMore() {
	      return !this._hitEnd;
	    },
	
	    /**
	     * Reset current query instance state(such as sid, hits etc) except params
	     * for a new searching. After resetting, hasMore() will return true.
	     */
	    reset: function reset() {
	      this._hitEnd = false;
	      this._sid = null;
	      this._hits = 0;
	    },
	
	    /**
	     * Retrieves a list of AVObjects that satisfy this query.
	     * Either options.success or options.error is called when the find
	     * completes.
	     *
	     * @see AV.Query#find
	     * @param {Object} options A Backbone-style options object.
	     * @return {AV.Promise} A promise that is resolved with the results when
	     * the query completes.
	     */
	    find: function find(options) {
	      var self = this;
	
	      var request = this._createRequest();
	
	      return request.then(function (response) {
	        //update sid for next querying.
	        if (response.sid) {
	          self._oldSid = self._sid;
	          self._sid = response.sid;
	        } else {
	          self._sid = null;
	          self._hitEnd = true;
	        }
	        self._hits = response.hits || 0;
	
	        return _.map(response.results, function (json) {
	          if (json.className) {
	            response.className = json.className;
	          }
	          var obj = self._newObject(response);
	          obj.appURL = json['_app_url'];
	          obj._finishFetch(self._processResult(json), true);
	          return obj;
	        });
	      })._thenRunCallbacks(options);
	    },
	
	    toJSON: function toJSON() {
	      var params = AV.SearchQuery.__super__.toJSON.call(this);
	      delete params.where;
	      if (this.className) {
	        params.clazz = this.className;
	      }
	      if (this._sid) {
	        params.sid = this._sid;
	      }
	      if (!this._queryString) {
	        throw 'Please set query string.';
	      } else {
	        params.q = this._queryString;
	      }
	      if (this._highlights) {
	        params.highlights = this._highlights.join(',');
	      }
	      if (this._sortBuilder && params.order) {
	        throw 'sort and order can not be set at same time.';
	      }
	      if (this._sortBuilder) {
	        params.sort = this._sortBuilder.build();
	      }
	
	      return params;
	    }
	  });
	};

/***/ },
/* 48 */
/*!**************************************************!*\
  !*** ./~/leancloud-storage/dist/node/insight.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 每位工程师都有保持代码优雅的义务
	 * Each engineer has a duty to keep the code elegant
	**/
	
	var _ = __webpack_require__(/*! underscore */ 6);
	var AVError = __webpack_require__(/*! ./error */ 29);
	var AVRequest = __webpack_require__(/*! ./request */ 16).request;
	
	module.exports = function (AV) {
	  /**
	   * @namespace 包含了使用了 LeanCloud
	   *  <a href='/docs/leaninsight_guide.html'>离线数据分析功能</a>的函数。
	   * <p><strong><em>
	   *   部分函数仅在云引擎运行环境下有效。
	   * </em></strong></p>
	   */
	  AV.Insight = AV.Insight || {};
	
	  _.extend(AV.Insight, /** @lends AV.Insight */{
	
	    /**
	     * 开始一个 Insight 任务。结果里将返回 Job id，你可以拿得到的 id 使用
	     * AV.Insight.JobQuery 查询任务状态和结果。
	     * @param {Object} jobConfig 任务配置的 JSON 对象，例如：<code><pre>
	     *                   { "sql" : "select count(*) as c,gender from _User group by gender",
	     *                     "saveAs": {
	     *                         "className" : "UserGender",
	     *                         "limit": 1
	     *                      }
	     *                   }
	     *                  </pre></code>
	     *               sql 指定任务执行的 SQL 语句， saveAs（可选） 指定将结果保存在哪张表里，limit 最大 1000。
	     * @param {Object} options A Backbone-style options object
	     * options.success, if set, should be a function to handle a successful
	     * call to a cloud function.  options.error should be a function that
	     * handles an error running the cloud function.  Both functions are
	     * optional.  Both functions take a single argument.
	     * @return {AV.Promise} A promise that will be resolved with the result
	     * of the function.
	     */
	    startJob: function startJob(jobConfig, options) {
	      if (!jobConfig || !jobConfig.sql) {
	        throw new Error('Please provide the sql to run the job.');
	      }
	      var data = {
	        jobConfig: jobConfig,
	        appId: AV.applicationId
	      };
	      var request = AVRequest("bigquery", 'jobs', null, 'POST', AV._encode(data, null, true));
	
	      return request.then(function (resp) {
	        return AV._decode(null, resp).id;
	      })._thenRunCallbacks(options);
	    },
	
	    /**
	     * 监听 Insight 任务事件，目前仅支持 end 事件，表示任务完成。
	     *  <p><strong><em>
	     *     仅在云引擎运行环境下有效。
	     *  </em></strong></p>
	     * @param {String} event 监听的事件，目前仅支持 'end' ，表示任务完成
	     * @param {Function} 监听回调函数，接收 (err, id) 两个参数，err 表示错误信息，
	     *                   id 表示任务 id。接下来你可以拿这个 id 使用AV.Insight.JobQuery 查询任务状态和结果。
	     *
	     */
	    on: function on(event, cb) {}
	  });
	
	  /**
	   * 创建一个对象，用于查询 Insight 任务状态和结果。
	   * @class
	   * @param {String} id 任务 id
	   * @since 0.5.5
	   */
	  AV.Insight.JobQuery = function (id, className) {
	    if (!id) {
	      throw new Error('Please provide the job id.');
	    }
	    this.id = id;
	    this.className = className;
	    this._skip = 0;
	    this._limit = 100;
	  };
	
	  AV.Insight.JobQuery.prototype = {
	
	    /**
	     * Sets the number of results to skip before returning any results.
	     * This is useful for pagination.
	     * Default is to skip zero results.
	     * @param {Number} n the number of results to skip.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    skip: function skip(n) {
	      this._skip = n;
	      return this;
	    },
	
	    /**
	     * Sets the limit of the number of results to return. The default limit is
	     * 100, with a maximum of 1000 results being returned at a time.
	     * @param {Number} n the number of results to limit to.
	     * @return {AV.Query} Returns the query, so you can chain this call.
	     */
	    limit: function limit(n) {
	      this._limit = n;
	      return this;
	    },
	
	    /**
	     * 查询任务状态和结果，任务结果为一个 JSON 对象，包括 status 表示任务状态， totalCount 表示总数，
	     * results 数组表示任务结果数组，previewCount 表示可以返回的结果总数，任务的开始和截止时间
	     * startTime、endTime 等信息。
	     *
	     * @param {Object} options A Backbone-style options object
	     * options.success, if set, should be a function to handle a successful
	     * call to a cloud function.  options.error should be a function that
	     * handles an error running the cloud function.  Both functions are
	     * optional.  Both functions take a single argument.
	     * @return {AV.Promise} A promise that will be resolved with the result
	     * of the function.
	     *
	     */
	    find: function find(options) {
	      var params = {
	        skip: this._skip,
	        limit: this._limit
	      };
	
	      var request = AVRequest("bigquery", 'jobs', this.id, "GET", params);
	      var self = this;
	      return request.then(function (response) {
	        if (response.error) {
	          return AV.Promise.error(new AVError(response.code, response.error));
	        }
	        return AV.Promise.as(response);
	      })._thenRunCallbacks(options);
	    }
	
	  };
	};

/***/ },
/* 49 */
/*!***************************!*\
  !*** ./src/js/mui.min.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _stringify = __webpack_require__(/*! babel-runtime/core-js/json/stringify */ 50);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _defineProperty = __webpack_require__(/*! babel-runtime/core-js/object/define-property */ 53);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	var _getPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/get-prototype-of */ 70);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _setPrototypeOf = __webpack_require__(/*! babel-runtime/core-js/object/set-prototype-of */ 81);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _typeof2 = __webpack_require__(/*! babel-runtime/helpers/typeof */ 90);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*!
	 * =====================================================
	 * Mui v3.2.0 (http://dev.dcloud.net.cn/mui)
	 * =====================================================
	 */
	var mui = function (a, b) {
	  var c = /complete|loaded|interactive/,
	      d = /^#([\w-]+)$/,
	      e = /^\.([\w-]+)$/,
	      f = /^[\w-]+$/,
	      g = /translate(?:3d)?\((.+?)\)/,
	      h = /matrix(3d)?\((.+?)\)/,
	      i = function i(b, c) {
	    if (c = c || a, !b) return j();if ("object" == (typeof b === "undefined" ? "undefined" : (0, _typeof3.default)(b))) return i.isArrayLike(b) ? j(i.slice.call(b), null) : j([b], null);if ("function" == typeof b) return i.ready(b);if ("string" == typeof b) try {
	      if (b = b.trim(), d.test(b)) {
	        var e = a.getElementById(RegExp.$1);return j(e ? [e] : []);
	      }return j(i.qsa(b, c), b);
	    } catch (f) {}return j();
	  },
	      j = function j(a, b) {
	    return a = a || [], (0, _setPrototypeOf2.default)(a, i.fn), a.selector = b || "", a;
	  };i.uuid = 0, i.data = {}, i.extend = function () {
	    var a,
	        c,
	        d,
	        e,
	        f,
	        g,
	        h = arguments[0] || {},
	        j = 1,
	        k = arguments.length,
	        l = !1;for ("boolean" == typeof h && (l = h, h = arguments[j] || {}, j++), "object" == (typeof h === "undefined" ? "undefined" : (0, _typeof3.default)(h)) || i.isFunction(h) || (h = {}), j === k && (h = this, j--); k > j; j++) {
	      if (null != (a = arguments[j])) for (c in a) {
	        d = h[c], e = a[c], h !== e && (l && e && (i.isPlainObject(e) || (f = i.isArray(e))) ? (f ? (f = !1, g = d && i.isArray(d) ? d : []) : g = d && i.isPlainObject(d) ? d : {}, h[c] = i.extend(l, g, e)) : e !== b && (h[c] = e));
	      }
	    }return h;
	  }, i.noop = function () {}, i.slice = [].slice, i.filter = [].filter, i.type = function (a) {
	    return null == a ? String(a) : k[{}.toString.call(a)] || "object";
	  }, i.isArray = Array.isArray || function (a) {
	    return a instanceof Array;
	  }, i.isArrayLike = function (a) {
	    var b = !!a && "length" in a && a.length,
	        c = i.type(a);return "function" === c || i.isWindow(a) ? !1 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a;
	  }, i.isWindow = function (a) {
	    return null != a && a === a.window;
	  }, i.isObject = function (a) {
	    return "object" === i.type(a);
	  }, i.isPlainObject = function (a) {
	    return i.isObject(a) && !i.isWindow(a) && (0, _getPrototypeOf2.default)(a) === Object.prototype;
	  }, i.isEmptyObject = function (a) {
	    for (var c in a) {
	      if (c !== b) return !1;
	    }return !0;
	  }, i.isFunction = function (a) {
	    return "function" === i.type(a);
	  }, i.qsa = function (b, c) {
	    return c = c || a, i.slice.call(e.test(b) ? c.getElementsByClassName(RegExp.$1) : f.test(b) ? c.getElementsByTagName(b) : c.querySelectorAll(b));
	  }, i.ready = function (b) {
	    return c.test(a.readyState) ? b(i) : a.addEventListener("DOMContentLoaded", function () {
	      b(i);
	    }, !1), this;
	  }, i.buffer = function (a, b, c) {
	    function d() {
	      e && (e.cancel(), e = 0), f = i.now(), a.apply(c || this, arguments), g = i.now();
	    }var e,
	        f = 0,
	        g = 0,
	        b = b || 150;return i.extend(function () {
	      !f || g >= f && i.now() - g > b || f > g && i.now() - f > 8 * b ? d() : (e && e.cancel(), e = i.later(d, b, null, arguments));
	    }, { stop: function stop() {
	        e && (e.cancel(), e = 0);
	      } });
	  }, i.each = function (a, b, c) {
	    if (!a) return this;if ("number" == typeof a.length) [].every.call(a, function (a, c) {
	      return b.call(a, c, a) !== !1;
	    });else for (var d in a) {
	      if (c) {
	        if (a.hasOwnProperty(d) && b.call(a[d], d, a[d]) === !1) return a;
	      } else if (b.call(a[d], d, a[d]) === !1) return a;
	    }return this;
	  }, i.focus = function (a) {
	    i.os.ios ? setTimeout(function () {
	      a.focus();
	    }, 10) : a.focus();
	  }, i.trigger = function (a, b, c) {
	    return a.dispatchEvent(new CustomEvent(b, { detail: c, bubbles: !0, cancelable: !0 })), this;
	  }, i.getStyles = function (a, b) {
	    var c = a.ownerDocument.defaultView.getComputedStyle(a, null);return b ? c.getPropertyValue(b) || c[b] : c;
	  }, i.parseTranslate = function (a, b) {
	    var c = a.match(g || "");return c && c[1] || (c = ["", "0,0,0"]), c = c[1].split(","), c = { x: parseFloat(c[0]), y: parseFloat(c[1]), z: parseFloat(c[2]) }, b && c.hasOwnProperty(b) ? c[b] : c;
	  }, i.parseTranslateMatrix = function (a, b) {
	    var c = a.match(h),
	        d = c && c[1];c ? (c = c[2].split(","), "3d" === d ? c = c.slice(12, 15) : (c.push(0), c = c.slice(4, 7))) : c = [0, 0, 0];var e = { x: parseFloat(c[0]), y: parseFloat(c[1]), z: parseFloat(c[2]) };return b && e.hasOwnProperty(b) ? e[b] : e;
	  }, i.hooks = {}, i.addAction = function (a, b) {
	    var c = i.hooks[a];return c || (c = []), b.index = b.index || 1e3, c.push(b), c.sort(function (a, b) {
	      return a.index - b.index;
	    }), i.hooks[a] = c, i.hooks[a];
	  }, i.doAction = function (a, b) {
	    i.isFunction(b) ? i.each(i.hooks[a], b) : i.each(i.hooks[a], function (a, b) {
	      return !b.handle();
	    });
	  }, i.later = function (a, b, c, d) {
	    b = b || 0;var e,
	        f,
	        g = a,
	        h = d;return "string" == typeof a && (g = c[a]), e = function e() {
	      g.apply(c, i.isArray(h) ? h : [h]);
	    }, f = setTimeout(e, b), { id: f, cancel: function cancel() {
	        clearTimeout(f);
	      } };
	  }, i.now = Date.now || function () {
	    return +new Date();
	  };var k = {};return i.each(["Boolean", "Number", "String", "Function", "Array", "Date", "RegExp", "Object", "Error"], function (a, b) {
	    k["[object " + b + "]"] = b.toLowerCase();
	  }), window.JSON && (i.parseJSON = JSON.parse), i.fn = { each: function each(a) {
	      return [].every.call(this, function (b, c) {
	        return a.call(b, c, b) !== !1;
	      }), this;
	    } }, "function" == "function" && __webpack_require__(/*! !webpack amd options */ 131) && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    return i;
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)), i;
	}(document);!function (a, b) {
	  function c(c) {
	    this.os = {};var d = [function () {
	      var a = c.match(/(MicroMessenger)\/([\d\.]+)/i);return a && (this.os.wechat = { version: a[2].replace(/_/g, ".") }), !1;
	    }, function () {
	      var a = c.match(/(Android);?[\s\/]+([\d.]+)?/);return a && (this.os.android = !0, this.os.version = a[2], this.os.isBadAndroid = !/Chrome\/\d/.test(b.navigator.appVersion)), this.os.android === !0;
	    }, function () {
	      var a = c.match(/(iPhone\sOS)\s([\d_]+)/);if (a) this.os.ios = this.os.iphone = !0, this.os.version = a[2].replace(/_/g, ".");else {
	        var b = c.match(/(iPad).*OS\s([\d_]+)/);b && (this.os.ios = this.os.ipad = !0, this.os.version = b[2].replace(/_/g, "."));
	      }return this.os.ios === !0;
	    }];[].every.call(d, function (b) {
	      return !b.call(a);
	    });
	  }c.call(a, navigator.userAgent);
	}(mui, window), function (a, b) {
	  function c(c) {
	    this.os = this.os || {};var d = c.match(/Html5Plus/i);d && (this.os.plus = !0, a(function () {
	      b.body.classList.add("mui-plus");
	    }), c.match(/StreamApp/i) && (this.os.stream = !0, a(function () {
	      b.body.classList.add("mui-plus-stream");
	    })));
	  }c.call(a, navigator.userAgent);
	}(mui, document), function (a) {
	  "ontouchstart" in window ? (a.isTouchable = !0, a.EVENT_START = "touchstart", a.EVENT_MOVE = "touchmove", a.EVENT_END = "touchend") : (a.isTouchable = !1, a.EVENT_START = "mousedown", a.EVENT_MOVE = "mousemove", a.EVENT_END = "mouseup"), a.EVENT_CANCEL = "touchcancel", a.EVENT_CLICK = "click";var b = 1,
	      c = {},
	      d = { preventDefault: "isDefaultPrevented", stopImmediatePropagation: "isImmediatePropagationStopped", stopPropagation: "isPropagationStopped" },
	      e = function e() {
	    return !0;
	  },
	      f = function f() {
	    return !1;
	  },
	      g = function g(b, c) {
	    return b.detail ? b.detail.currentTarget = c : b.detail = { currentTarget: c }, a.each(d, function (a, c) {
	      var d = b[a];b[a] = function () {
	        return this[c] = e, d && d.apply(b, arguments);
	      }, b[c] = f;
	    }, !0), b;
	  },
	      h = function h(a) {
	    return a && (a._mid || (a._mid = b++));
	  },
	      i = {},
	      j = function j(b, d, e, f) {
	    return function (e) {
	      for (var f = c[b._mid][d], h = [], i = e.target, j = {}; i && i !== document && i !== b && (!~["click", "tap", "doubletap", "longtap", "hold"].indexOf(d) || !i.disabled && !i.classList.contains("mui-disabled")); i = i.parentNode) {
	        var k = {};a.each(f, function (c, d) {
	          j[c] || (j[c] = a.qsa(c, b)), j[c] && ~j[c].indexOf(i) && (k[c] || (k[c] = d));
	        }, !0), a.isEmptyObject(k) || h.push({ element: i, handlers: k });
	      }j = null, e = g(e), a.each(h, function (b, c) {
	        i = c.element;var f = i.tagName;return "tap" === d && "INPUT" !== f && "TEXTAREA" !== f && "SELECT" !== f && (e.preventDefault(), e.detail && e.detail.gesture && e.detail.gesture.preventDefault()), a.each(c.handlers, function (b, c) {
	          a.each(c, function (a, b) {
	            b.call(i, e) === !1 && (e.preventDefault(), e.stopPropagation());
	          }, !0);
	        }, !0), e.isPropagationStopped() ? !1 : void 0;
	      }, !0);
	    };
	  },
	      k = function k(a, b) {
	    var c = i[h(a)],
	        d = [];if (c) {
	      if (d = [], b) {
	        var e = function e(a) {
	          return a.type === b;
	        };return c.filter(e);
	      }d = c;
	    }return d;
	  },
	      l = /^(INPUT|TEXTAREA|BUTTON|SELECT)$/;a.fn.on = function (b, d, e) {
	    return this.each(function () {
	      var f = this;h(f), h(e);var g = !1,
	          k = c[f._mid] || (c[f._mid] = {}),
	          m = k[b] || (k[b] = {});a.isEmptyObject(m) && (g = !0);var n = m[d] || (m[d] = []);if (n.push(e), g) {
	        var o = i[h(f)];o || (o = []);var p = j(f, b, d, e);o.push(p), p.i = o.length - 1, p.type = b, i[h(f)] = o, f.addEventListener(b, p), "tap" === b && f.addEventListener("click", function (a) {
	          if (a.target) {
	            var b = a.target.tagName;if (!l.test(b)) if ("A" === b) {
	              var c = a.target.href;c && ~c.indexOf("tel:") || a.preventDefault();
	            } else a.preventDefault();
	          }
	        });
	      }
	    });
	  }, a.fn.off = function (b, d, e) {
	    return this.each(function () {
	      var f = h(this);if (b) {
	        if (d) {
	          if (e) {
	            var g = c[f] && c[f][b] && c[f][b][d];a.each(g, function (a, b) {
	              return h(b) === h(e) ? (g.splice(a, 1), !1) : void 0;
	            }, !0);
	          } else c[f] && c[f][b] && delete c[f][b][d];
	        } else c[f] && delete c[f][b];
	      } else c[f] && delete c[f];c[f] ? (!c[f][b] || a.isEmptyObject(c[f][b])) && k(this, b).forEach(function (a) {
	        this.removeEventListener(a.type, a), delete i[f][a.i];
	      }.bind(this)) : k(this).forEach(function (a) {
	        this.removeEventListener(a.type, a), delete i[f][a.i];
	      }.bind(this));
	    });
	  };
	}(mui), function (a, b, c) {
	  a.targets = {}, a.targetHandles = [], a.registerTarget = function (b) {
	    return b.index = b.index || 1e3, a.targetHandles.push(b), a.targetHandles.sort(function (a, b) {
	      return a.index - b.index;
	    }), a.targetHandles;
	  }, b.addEventListener(a.EVENT_START, function (b) {
	    for (var d = b.target, e = {}; d && d !== c; d = d.parentNode) {
	      var f = !1;if (a.each(a.targetHandles, function (c, g) {
	        var h = g.name;f || e[h] || !g.hasOwnProperty("handle") ? e[h] || g.isReset !== !1 && (a.targets[h] = !1) : (a.targets[h] = g.handle(b, d), a.targets[h] && (e[h] = !0, g.isContinue !== !0 && (f = !0)));
	      }), f) break;
	    }
	  }), b.addEventListener("click", function (b) {
	    for (var d = b.target, e = !1; d && d !== c && ("A" !== d.tagName || (a.each(a.targetHandles, function (a, c) {
	      c.name;return c.hasOwnProperty("handle") && c.handle(b, d) ? (e = !0, b.preventDefault(), !1) : void 0;
	    }), !e)); d = d.parentNode) {}
	  });
	}(mui, window, document), function (a) {
	  String.prototype.trim === a && (String.prototype.trim = function () {
	    return this.replace(/^\s+|\s+$/g, "");
	  }), Object.setPrototypeOf = _setPrototypeOf2.default || function (a, b) {
	    return a.__proto__ = b, a;
	  };
	}(), function () {
	  function a(a, b) {
	    b = b || { bubbles: !1, cancelable: !1, detail: void 0 };var c = document.createEvent("Events"),
	        d = !0;for (var e in b) {
	      "bubbles" === e ? d = !!b[e] : c[e] = b[e];
	    }return c.initEvent(a, d, !0), c;
	  }"undefined" == typeof window.CustomEvent && (a.prototype = window.Event.prototype, window.CustomEvent = a);
	}(), Function.prototype.bind = Function.prototype.bind || function (a) {
	  var b = Array.prototype.splice.call(arguments, 1),
	      c = this,
	      d = function d() {
	    var e = b.concat(Array.prototype.splice.call(arguments, 0));return this instanceof d ? void c.apply(this, e) : c.apply(a, e);
	  };return d.prototype = c.prototype, d;
	}, function (a) {
	  "classList" in a.documentElement || !_defineProperty2.default || "undefined" == typeof HTMLElement || Object.defineProperty(HTMLElement.prototype, "classList", { get: function get() {
	      function a(a) {
	        return function (c) {
	          var d = b.className.split(/\s+/),
	              e = d.indexOf(c);a(d, e, c), b.className = d.join(" ");
	        };
	      }var b = this,
	          c = { add: a(function (a, b, c) {
	          ~b || a.push(c);
	        }), remove: a(function (a, b) {
	          ~b && a.splice(b, 1);
	        }), toggle: a(function (a, b, c) {
	          ~b ? a.splice(b, 1) : a.push(c);
	        }), contains: function contains(a) {
	          return !!~b.className.split(/\s+/).indexOf(a);
	        }, item: function item(a) {
	          return b.className.split(/\s+/)[a] || null;
	        } };return Object.defineProperty(c, "length", { get: function get() {
	          return b.className.split(/\s+/).length;
	        } }), c;
	    } });
	}(document), function (a) {
	  if (!a.requestAnimationFrame) {
	    var b = 0;a.requestAnimationFrame = a.webkitRequestAnimationFrame || function (c, d) {
	      var e = new Date().getTime(),
	          f = Math.max(0, 16.7 - (e - b)),
	          g = a.setTimeout(function () {
	        c(e + f);
	      }, f);return b = e + f, g;
	    }, a.cancelAnimationFrame = a.webkitCancelAnimationFrame || a.webkitCancelRequestAnimationFrame || function (a) {
	      clearTimeout(a);
	    };
	  }
	}(window), function (a, b, c) {
	  if ((a.os.android || a.os.ios) && !b.FastClick) {
	    var d = function d(a, b) {
	      return "LABEL" === b.tagName && b.parentNode && (b = b.parentNode.querySelector("input")), !b || "radio" !== b.type && "checkbox" !== b.type || b.disabled ? !1 : b;
	    };a.registerTarget({ name: c, index: 40, handle: d, target: !1 });var e = function e(c) {
	      var d = a.targets.click;if (d) {
	        var e, f;document.activeElement && document.activeElement !== d && document.activeElement.blur(), f = c.detail.gesture.changedTouches[0], e = document.createEvent("MouseEvents"), e.initMouseEvent("click", !0, !0, b, 1, f.screenX, f.screenY, f.clientX, f.clientY, !1, !1, !1, !1, 0, null), e.forwardedTouchEvent = !0, d.dispatchEvent(e), c.detail && c.detail.gesture.preventDefault();
	      }
	    };b.addEventListener("tap", e), b.addEventListener("doubletap", e), b.addEventListener("click", function (b) {
	      return a.targets.click && !b.forwardedTouchEvent ? (b.stopImmediatePropagation ? b.stopImmediatePropagation() : b.propagationStopped = !0, b.stopPropagation(), b.preventDefault(), !1) : void 0;
	    }, !0);
	  }
	}(mui, window, "click"), function (a, b) {
	  a(function () {
	    if (a.os.ios) {
	      var c = "mui-focusin",
	          d = "mui-bar-tab",
	          e = "mui-bar-footer",
	          f = "mui-bar-footer-secondary",
	          g = "mui-bar-footer-secondary-tab";b.addEventListener("focusin", function (h) {
	        if (!(a.os.plus && window.plus && plus.webview.currentWebview().children().length > 0)) {
	          var i = h.target;if (i.tagName && ("TEXTAREA" === i.tagName || "INPUT" === i.tagName && ("text" === i.type || "search" === i.type || "number" === i.type))) {
	            if (i.disabled || i.readOnly) return;b.body.classList.add(c);for (var j = !1; i && i !== b; i = i.parentNode) {
	              var k = i.classList;if (k && k.contains(d) || k.contains(e) || k.contains(f) || k.contains(g)) {
	                j = !0;break;
	              }
	            }if (j) {
	              var l = b.body.scrollHeight,
	                  m = b.body.scrollLeft;setTimeout(function () {
	                window.scrollTo(m, l);
	              }, 20);
	            }
	          }
	        }
	      }), b.addEventListener("focusout", function (a) {
	        var d = b.body.classList;d.contains(c) && (d.remove(c), setTimeout(function () {
	          window.scrollTo(b.body.scrollLeft, b.body.scrollTop);
	        }, 20));
	      });
	    }
	  });
	}(mui, document), function (a) {
	  a.namespace = "mui", a.classNamePrefix = a.namespace + "-", a.classSelectorPrefix = "." + a.classNamePrefix, a.className = function (b) {
	    return a.classNamePrefix + b;
	  }, a.classSelector = function (b) {
	    return b.replace(/\./g, a.classSelectorPrefix);
	  }, a.eventName = function (b, c) {
	    return b + (a.namespace ? "." + a.namespace : "") + (c ? "." + c : "");
	  };
	}(mui), function (a, b) {
	  a.gestures = { session: {} }, a.preventDefault = function (a) {
	    a.preventDefault();
	  }, a.stopPropagation = function (a) {
	    a.stopPropagation();
	  }, a.addGesture = function (b) {
	    return a.addAction("gestures", b);
	  };var c = Math.round,
	      d = Math.abs,
	      e = Math.sqrt,
	      f = (Math.atan, Math.atan2),
	      g = function g(a, b, c) {
	    c || (c = ["x", "y"]);var d = b[c[0]] - a[c[0]],
	        f = b[c[1]] - a[c[1]];return e(d * d + f * f);
	  },
	      h = function h(a, b) {
	    if (a.length >= 2 && b.length >= 2) {
	      var c = ["pageX", "pageY"];return g(b[1], b[0], c) / g(a[1], a[0], c);
	    }return 1;
	  },
	      i = function i(a, b, c) {
	    c || (c = ["x", "y"]);var d = b[c[0]] - a[c[0]],
	        e = b[c[1]] - a[c[1]];return 180 * f(e, d) / Math.PI;
	  },
	      j = function j(a, b) {
	    return a === b ? "" : d(a) >= d(b) ? a > 0 ? "left" : "right" : b > 0 ? "up" : "down";
	  },
	      k = function k(a, b) {
	    var c = ["pageX", "pageY"];return i(b[1], b[0], c) - i(a[1], a[0], c);
	  },
	      l = function l(a, b, c) {
	    return { x: b / a || 0, y: c / a || 0 };
	  },
	      m = function m(b, c) {
	    a.gestures.stoped || a.doAction("gestures", function (d, e) {
	      a.gestures.stoped || a.options.gestureConfig[e.name] !== !1 && e.handle(b, c);
	    });
	  },
	      n = function n(a, b) {
	    for (; a;) {
	      if (a == b) return !0;a = a.parentNode;
	    }return !1;
	  },
	      o = function o(a, b, c) {
	    for (var d = [], e = [], f = 0; f < a.length;) {
	      var g = b ? a[f][b] : a[f];e.indexOf(g) < 0 && d.push(a[f]), e[f] = g, f++;
	    }return c && (d = b ? d.sort(function (a, c) {
	      return a[b] > c[b];
	    }) : d.sort()), d;
	  },
	      p = function p(a) {
	    var b = a.length;if (1 === b) return { x: c(a[0].pageX), y: c(a[0].pageY) };for (var d = 0, e = 0, f = 0; b > f;) {
	      d += a[f].pageX, e += a[f].pageY, f++;
	    }return { x: c(d / b), y: c(e / b) };
	  },
	      q = function q() {
	    return a.options.gestureConfig.pinch;
	  },
	      r = function r(b) {
	    for (var d = [], e = 0; e < b.touches.length;) {
	      d[e] = { pageX: c(b.touches[e].pageX), pageY: c(b.touches[e].pageY) }, e++;
	    }return { timestamp: a.now(), gesture: b.gesture, touches: d, center: p(b.touches), deltaX: b.deltaX, deltaY: b.deltaY };
	  },
	      s = function s(b) {
	    var c = a.gestures.session,
	        d = b.center,
	        e = c.offsetDelta || {},
	        f = c.prevDelta || {},
	        g = c.prevTouch || {};(b.gesture.type === a.EVENT_START || b.gesture.type === a.EVENT_END) && (f = c.prevDelta = { x: g.deltaX || 0, y: g.deltaY || 0 }, e = c.offsetDelta = { x: d.x, y: d.y }), b.deltaX = f.x + (d.x - e.x), b.deltaY = f.y + (d.y - e.y);
	  },
	      t = function t(b) {
	    var c = a.gestures.session,
	        d = b.touches,
	        e = d.length;c.firstTouch || (c.firstTouch = r(b)), q() && e > 1 && !c.firstMultiTouch ? c.firstMultiTouch = r(b) : 1 === e && (c.firstMultiTouch = !1);var f = c.firstTouch,
	        l = c.firstMultiTouch,
	        m = l ? l.center : f.center,
	        n = b.center = p(d);b.timestamp = a.now(), b.deltaTime = b.timestamp - f.timestamp, b.angle = i(m, n), b.distance = g(m, n), s(b), b.offsetDirection = j(b.deltaX, b.deltaY), b.scale = l ? h(l.touches, d) : 1, b.rotation = l ? k(l.touches, d) : 0, v(b);
	  },
	      u = 25,
	      v = function v(b) {
	    var c,
	        e,
	        f,
	        g,
	        h = a.gestures.session,
	        i = h.lastInterval || b,
	        k = b.timestamp - i.timestamp;if (b.gesture.type != a.EVENT_CANCEL && (k > u || void 0 === i.velocity)) {
	      var m = i.deltaX - b.deltaX,
	          n = i.deltaY - b.deltaY,
	          o = l(k, m, n);e = o.x, f = o.y, c = d(o.x) > d(o.y) ? o.x : o.y, g = j(m, n) || i.direction, h.lastInterval = b;
	    } else c = i.velocity, e = i.velocityX, f = i.velocityY, g = i.direction;b.velocity = c, b.velocityX = e, b.velocityY = f, b.direction = g;
	  },
	      w = {},
	      x = function x(a) {
	    for (var b = 0; b < a.length; b++) {
	      !a.identifier && (a.identifier = 0);
	    }return a;
	  },
	      y = function y(b, c) {
	    var d = x(a.slice.call(b.touches || [b])),
	        e = b.type,
	        f = [],
	        g = [];if (e !== a.EVENT_START && e !== a.EVENT_MOVE || 1 !== d.length) {
	      var h = 0,
	          f = [],
	          g = [],
	          i = x(a.slice.call(b.changedTouches || [b]));c.target = b.target;var j = a.gestures.session.target || b.target;if (f = d.filter(function (a) {
	        return n(a.target, j);
	      }), e === a.EVENT_START) for (h = 0; h < f.length;) {
	        w[f[h].identifier] = !0, h++;
	      }for (h = 0; h < i.length;) {
	        w[i[h].identifier] && g.push(i[h]), (e === a.EVENT_END || e === a.EVENT_CANCEL) && delete w[i[h].identifier], h++;
	      }if (!g.length) return !1;
	    } else w[d[0].identifier] = !0, f = d, g = d, c.target = b.target;f = o(f.concat(g), "identifier", !0);var k = f.length,
	        l = g.length;return e === a.EVENT_START && k - l === 0 && (c.isFirst = !0, a.gestures.touch = a.gestures.session = { target: b.target }), c.isFinal = (e === a.EVENT_END || e === a.EVENT_CANCEL) && k - l === 0, c.touches = f, c.changedTouches = g, !0;
	  },
	      z = function z(b) {
	    var c = { gesture: b },
	        d = y(b, c);d && (t(c), m(b, c), a.gestures.session.prevTouch = c, b.type !== a.EVENT_END || a.isTouchable || (a.gestures.touch = a.gestures.session = {}));
	  };b.addEventListener(a.EVENT_START, z), b.addEventListener(a.EVENT_MOVE, z), b.addEventListener(a.EVENT_END, z), b.addEventListener(a.EVENT_CANCEL, z), b.addEventListener(a.EVENT_CLICK, function (b) {
	    (a.os.android || a.os.ios) && (a.targets.popover && b.target === a.targets.popover || a.targets.tab || a.targets.offcanvas || a.targets.modal) && b.preventDefault();
	  }, !0), a.isScrolling = !1;var A = null;b.addEventListener("scroll", function () {
	    a.isScrolling = !0, A && clearTimeout(A), A = setTimeout(function () {
	      a.isScrolling = !1;
	    }, 250);
	  });
	}(mui, window), function (a, b) {
	  var c = 0,
	      d = function d(_d, e) {
	    var f = a.gestures.session,
	        g = this.options,
	        h = a.now();switch (_d.type) {case a.EVENT_MOVE:
	        h - c > 300 && (c = h, f.flickStart = e.center);break;case a.EVENT_END:case a.EVENT_CANCEL:
	        e.flick = !1, f.flickStart && g.flickMaxTime > h - c && e.distance > g.flickMinDistince && (e.flick = !0, e.flickTime = h - c, e.flickDistanceX = e.center.x - f.flickStart.x, e.flickDistanceY = e.center.y - f.flickStart.y, a.trigger(f.target, b, e), a.trigger(f.target, b + e.direction, e));}
	  };a.addGesture({ name: b, index: 5, handle: d, options: { flickMaxTime: 200, flickMinDistince: 10 } });
	}(mui, "flick"), function (a, b) {
	  var c = function c(_c, d) {
	    var e = a.gestures.session;if (_c.type === a.EVENT_END || _c.type === a.EVENT_CANCEL) {
	      var f = this.options;d.swipe = !1, d.direction && f.swipeMaxTime > d.deltaTime && d.distance > f.swipeMinDistince && (d.swipe = !0, a.trigger(e.target, b, d), a.trigger(e.target, b + d.direction, d));
	    }
	  };a.addGesture({ name: b, index: 10, handle: c, options: { swipeMaxTime: 300, swipeMinDistince: 18 } });
	}(mui, "swipe"), function (a, b) {
	  var c = function c(_c2, d) {
	    var e = a.gestures.session;switch (_c2.type) {case a.EVENT_START:
	        break;case a.EVENT_MOVE:
	        if (!d.direction || !e.target) return;e.lockDirection && e.startDirection && e.startDirection && e.startDirection !== d.direction && ("up" === e.startDirection || "down" === e.startDirection ? d.direction = d.deltaY < 0 ? "up" : "down" : d.direction = d.deltaX < 0 ? "left" : "right"), e.drag || (e.drag = !0, a.trigger(e.target, b + "start", d)), a.trigger(e.target, b, d), a.trigger(e.target, b + d.direction, d);break;case a.EVENT_END:case a.EVENT_CANCEL:
	        e.drag && d.isFinal && a.trigger(e.target, b + "end", d);}
	  };a.addGesture({ name: b, index: 20, handle: c, options: { fingers: 1 } });
	}(mui, "drag"), function (a, b) {
	  var c,
	      d,
	      e = function e(_e, f) {
	    var g = a.gestures.session,
	        h = this.options;switch (_e.type) {case a.EVENT_END:
	        if (!f.isFinal) return;var i = g.target;if (!i || i.disabled || i.classList && i.classList.contains("mui-disabled")) return;if (f.distance < h.tapMaxDistance && f.deltaTime < h.tapMaxTime) {
	          if (a.options.gestureConfig.doubletap && c && c === i && d && f.timestamp - d < h.tapMaxInterval) return a.trigger(i, "doubletap", f), d = a.now(), void (c = i);a.trigger(i, b, f), d = a.now(), c = i;
	        }}
	  };a.addGesture({ name: b, index: 30, handle: e, options: { fingers: 1, tapMaxInterval: 300, tapMaxDistance: 5, tapMaxTime: 250 } });
	}(mui, "tap"), function (a, b) {
	  var c,
	      d = function d(_d2, e) {
	    var f = a.gestures.session,
	        g = this.options;switch (_d2.type) {case a.EVENT_START:
	        clearTimeout(c), c = setTimeout(function () {
	          a.trigger(f.target, b, e);
	        }, g.holdTimeout);break;case a.EVENT_MOVE:
	        e.distance > g.holdThreshold && clearTimeout(c);break;case a.EVENT_END:case a.EVENT_CANCEL:
	        clearTimeout(c);}
	  };a.addGesture({ name: b, index: 10, handle: d, options: { fingers: 1, holdTimeout: 500, holdThreshold: 2 } });
	}(mui, "longtap"), function (a, b) {
	  var c,
	      d = function d(_d3, e) {
	    var f = a.gestures.session,
	        g = this.options;switch (_d3.type) {case a.EVENT_START:
	        a.options.gestureConfig.hold && (c && clearTimeout(c), c = setTimeout(function () {
	          e.hold = !0, a.trigger(f.target, b, e);
	        }, g.holdTimeout));break;case a.EVENT_MOVE:
	        break;case a.EVENT_END:case a.EVENT_CANCEL:
	        c && (clearTimeout(c) && (c = null), a.trigger(f.target, "release", e));}
	  };a.addGesture({ name: b, index: 10, handle: d, options: { fingers: 1, holdTimeout: 0 } });
	}(mui, "hold"), function (a, b) {
	  var c = function c(_c3, d) {
	    var e = this.options,
	        f = a.gestures.session;switch (_c3.type) {case a.EVENT_START:
	        break;case a.EVENT_MOVE:
	        if (a.options.gestureConfig.pinch) {
	          if (d.touches.length < 2) return;f.pinch || (f.pinch = !0, a.trigger(f.target, b + "start", d)), a.trigger(f.target, b, d);var g = d.scale,
	              h = d.rotation,
	              i = "undefined" == typeof d.lastScale ? 1 : d.lastScale,
	              j = 1e-12;g > i ? (i = g - j, a.trigger(f.target, b + "out", d)) : i > g && (i = g + j, a.trigger(f.target, b + "in", d)), Math.abs(h) > e.minRotationAngle && a.trigger(f.target, "rotate", d);
	        }break;case a.EVENT_END:case a.EVENT_CANCEL:
	        a.options.gestureConfig.pinch && f.pinch && 2 === d.touches.length && (f.pinch = !1, a.trigger(f.target, b + "end", d));}
	  };a.addGesture({ name: b, index: 10, handle: c, options: { minRotationAngle: 0 } });
	}(mui, "pinch"), function (a) {
	  function b(a, b) {
	    var c = "MUI_SCROLL_POSITION_" + document.location.href + "_" + b.src,
	        d = parseFloat(localStorage.getItem(c)) || 0;d && !function (a) {
	      b.onload = function () {
	        window.scrollTo(0, a);
	      };
	    }(d), setInterval(function () {
	      var a = window.scrollY;d !== a && (localStorage.setItem(c, a + ""), d = a);
	    }, 100);
	  }a.global = a.options = { gestureConfig: { tap: !0, doubletap: !1, longtap: !1, hold: !1, flick: !0, swipe: !0, drag: !0, pinch: !1 } }, a.initGlobal = function (b) {
	    return a.options = a.extend(!0, a.global, b), this;
	  };var c = {},
	      d = !1;a.init = function (b) {
	    return d = !0, a.options = a.extend(!0, a.global, b || {}), a.ready(function () {
	      a.doAction("inits", function (b, d) {
	        var e = !(c[d.name] && !d.repeat);e && (d.handle.call(a), c[d.name] = !0);
	      });
	    }), this;
	  }, a.addInit = function (b) {
	    return a.addAction("inits", b);
	  }, a.addInit({ name: "iframe", index: 100, handle: function handle() {
	      var b = a.options,
	          c = b.subpages || [];!a.os.plus && c.length && e(c[0]);
	    } });var e = function e(c) {
	    var d = document.createElement("div");d.className = "mui-iframe-wrapper";var e = c.styles || {};"string" != typeof e.top && (e.top = "0px"), "string" != typeof e.bottom && (e.bottom = "0px"), d.style.top = e.top, d.style.bottom = e.bottom;var f = document.createElement("iframe");f.src = c.url, f.id = c.id || c.url, f.name = f.id, d.appendChild(f), document.body.appendChild(d), a.os.wechat && b(d, f);
	  };a(function () {
	    var b = document.body.classList,
	        c = [];a.os.ios ? (c.push({ os: "ios", version: a.os.version }), b.add("mui-ios")) : a.os.android && (c.push({ os: "android", version: a.os.version }), b.add("mui-android")), a.os.wechat && (c.push({ os: "wechat", version: a.os.wechat.version }), b.add("mui-wechat")), c.length && a.each(c, function (c, d) {
	      var e = "";d.version && a.each(d.version.split("."), function (c, f) {
	        e = e + (e ? "-" : "") + f, b.add(a.className(d.os + "-" + e));
	      });
	    });
	  });
	}(mui), function (a) {
	  var b = { swipeBack: !1, preloadPages: [], preloadLimit: 10, keyEventBind: { backbutton: !0, menubutton: !0 } },
	      c = { autoShow: !0, duration: a.os.ios ? 200 : 100, aniShow: "slide-in-right" };a.options.show && (c = a.extend(!0, c, a.options.show)), a.currentWebview = null, a.isHomePage = !1, a.extend(!0, a.global, b), a.extend(!0, a.options, b), a.waitingOptions = function (b) {
	    return a.extend(!0, {}, { autoShow: !0, title: "", modal: !1 }, b);
	  }, a.showOptions = function (b) {
	    return a.extend(!0, {}, c, b);
	  }, a.windowOptions = function (b) {
	    return a.extend({ scalable: !1, bounce: "" }, b);
	  }, a.plusReady = function (a) {
	    return window.plus ? setTimeout(function () {
	      a();
	    }, 0) : document.addEventListener("plusready", function () {
	      a();
	    }, !1), this;
	  }, a.fire = function (b, c, d) {
	    b && ("" !== d && (d = d || {}, a.isPlainObject(d) && (d = (0, _stringify2.default)(d || {}).replace(/\'/g, "\\u0027").replace(/\\/g, "\\u005c"))), b.evalJS("typeof mui!=='undefined'&&mui.receive('" + c + "','" + d + "')"));
	  }, a.receive = function (b, c) {
	    if (b) {
	      try {
	        c && (c = JSON.parse(c));
	      } catch (d) {}a.trigger(document, b, c);
	    }
	  };var d = function d(b) {
	    if (!b.preloaded) {
	      a.fire(b, "preload");for (var c = b.children(), d = 0; d < c.length; d++) {
	        a.fire(c[d], "preload");
	      }b.preloaded = !0;
	    }
	  },
	      e = function e(b, c, d) {
	    if (d) {
	      if (!b[c + "ed"]) {
	        a.fire(b, c);for (var e = b.children(), f = 0; f < e.length; f++) {
	          a.fire(e[f], c);
	        }b[c + "ed"] = !0;
	      }
	    } else {
	      a.fire(b, c);for (var e = b.children(), f = 0; f < e.length; f++) {
	        a.fire(e[f], c);
	      }
	    }
	  };a.openWindow = function (b, c, f) {
	    if ("object" == (typeof b === "undefined" ? "undefined" : (0, _typeof3.default)(b)) ? (f = b, b = f.url, c = f.id || b) : "object" == (typeof c === "undefined" ? "undefined" : (0, _typeof3.default)(c)) ? (f = c, c = b) : c = c || b, !a.os.plus) return void (a.os.ios || a.os.android ? window.top.location.href = b : window.parent.location.href = b);if (window.plus) {
	      f = f || {};var g,
	          h,
	          i = f.params || {},
	          j = null,
	          k = null;if (a.webviews[c] && (k = a.webviews[c], plus.webview.getWebviewById(c) && (j = k.webview)), k && j) return g = k.show, g = f.show ? a.extend(g, f.show) : g, j.show(g.aniShow, g.duration, function () {
	        d(j), e(j, "pagebeforeshow", !1);
	      }), k.afterShowMethodName && j.evalJS(k.afterShowMethodName + "('" + (0, _stringify2.default)(i) + "')"), j;if (f.createNew !== !0) {
	        if (j = plus.webview.getWebviewById(c)) return g = a.showOptions(f.show), g.autoShow && j.show(g.aniShow, g.duration, function () {
	          d(j), e(j, "pagebeforeshow", !1);
	        }), j;if (!b) throw new Error("webview[" + c + "] does not exist");
	      }var l = a.waitingOptions(f.waiting);if (l.autoShow && (h = plus.nativeUI.showWaiting(l.title, l.options)), f = a.extend(f, { id: c, url: b }), j = a.createWindow(f), g = a.showOptions(f.show), g.autoShow) {
	        var m = function m() {
	          h && h.close(), j.show(g.aniShow, g.duration, function () {}), j.showed = !0, f.afterShowMethodName && j.evalJS(f.afterShowMethodName + "('" + (0, _stringify2.default)(i) + "')");
	        };b ? (j.addEventListener("titleUpdate", m, !1), j.addEventListener("loaded", function () {
	          d(j), e(j, "pagebeforeshow", !1);
	        }, !1)) : m();
	      }return j;
	    }
	  }, a.createWindow = function (b, c) {
	    if (window.plus) {
	      var d,
	          e = b.id || b.url;if (b.preload) {
	        a.webviews[e] && a.webviews[e].webview.getURL() ? d = a.webviews[e].webview : (b.createNew !== !0 && (d = plus.webview.getWebviewById(e)), d || (d = plus.webview.create(b.url, e, a.windowOptions(b.styles), a.extend({ preload: !0 }, b.extras)), b.subpages && a.each(b.subpages, function (b, c) {
	          var e = c.id || c.url;if (e) {
	            var f = plus.webview.getWebviewById(e);f || (f = plus.webview.create(c.url, e, a.windowOptions(c.styles), a.extend({ preload: !0 }, c.extras))), d.append(f);
	          }
	        }))), a.webviews[e] = { webview: d, preload: !0, show: a.showOptions(b.show), afterShowMethodName: b.afterShowMethodName };var f = a.data.preloads,
	            g = f.indexOf(e);if (~g && f.splice(g, 1), f.push(e), f.length > a.options.preloadLimit) {
	          var h = a.data.preloads.shift(),
	              i = a.webviews[h];i && i.webview && a.closeAll(i.webview), delete a.webviews[h];
	        }
	      } else c !== !1 && (d = plus.webview.create(b.url, e, a.windowOptions(b.styles), b.extras), b.subpages && a.each(b.subpages, function (b, c) {
	        var e = c.id || c.url,
	            f = plus.webview.getWebviewById(e);f || (f = plus.webview.create(c.url, e, a.windowOptions(c.styles), c.extras)), d.append(f);
	      }));return d;
	    }
	  }, a.preload = function (b) {
	    return b.preload || (b.preload = !0), a.createWindow(b);
	  }, a.closeOpened = function (b) {
	    var c = b.opened();if (c) for (var d = 0, e = c.length; e > d; d++) {
	      var f = c[d],
	          g = f.opened();g && g.length > 0 ? a.closeOpened(f) : f.parent() !== b && f.close("none");
	    }
	  }, a.closeAll = function (b, c) {
	    a.closeOpened(b), c ? b.close(c) : b.close();
	  }, a.createWindows = function (b) {
	    a.each(b, function (b, c) {
	      a.createWindow(c, !1);
	    });
	  }, a.appendWebview = function (b) {
	    if (window.plus) {
	      var c,
	          d = b.id || b.url;return a.webviews[d] || (plus.webview.getWebviewById(d) || (c = plus.webview.create(b.url, d, b.styles, b.extras)), plus.webview.currentWebview().append(c), a.webviews[d] = b), c;
	    }
	  }, a.webviews = {}, a.data.preloads = [], a.plusReady(function () {
	    a.currentWebview = plus.webview.currentWebview();
	  }), a.addInit({ name: "5+", index: 100, handle: function handle() {
	      var b = a.options,
	          c = b.subpages || [];a.os.plus && a.plusReady(function () {
	        a.each(c, function (b, c) {
	          a.appendWebview(c);
	        }), plus.webview.currentWebview() === plus.webview.getWebviewById(plus.runtime.appid) && (a.isHomePage = !0, setTimeout(function () {
	          d(plus.webview.currentWebview());
	        }, 300)), a.os.ios && a.options.statusBarBackground && plus.navigator.setStatusBarBackground(a.options.statusBarBackground), a.os.android && parseFloat(a.os.version) < 4.4 && null == plus.webview.currentWebview().parent() && document.addEventListener("resume", function () {
	          var a = document.body;a.style.display = "none", setTimeout(function () {
	            a.style.display = "";
	          }, 10);
	        });
	      });
	    } }), window.addEventListener("preload", function () {
	    var b = a.options.preloadPages || [];a.plusReady(function () {
	      a.each(b, function (b, c) {
	        a.createWindow(a.extend(c, { preload: !0 }));
	      });
	    });
	  }), a.supportStatusbarOffset = function () {
	    return a.os.plus && a.os.ios && parseFloat(a.os.version) >= 7;
	  }, a.ready(function () {
	    a.supportStatusbarOffset() && document.body.classList.add("mui-statusbar");
	  });
	}(mui), function (a, b) {
	  a.addBack = function (b) {
	    return a.addAction("backs", b);
	  }, a.addBack({ name: "browser", index: 100, handle: function handle() {
	      return b.history.length > 1 ? (b.history.back(), !0) : !1;
	    } }), a.back = function () {
	    ("function" != typeof a.options.beforeback || a.options.beforeback() !== !1) && a.doAction("backs");
	  }, b.addEventListener("tap", function (b) {
	    var c = a.targets.action;c && c.classList.contains("mui-action-back") && (a.back(), a.targets.action = !1);
	  }), b.addEventListener("swiperight", function (b) {
	    var c = b.detail;a.options.swipeBack === !0 && Math.abs(c.angle) < 3 && a.back();
	  });
	}(mui, window), function (a, b) {
	  a.os.plus && a.os.android && a.addBack({ name: "mui", index: 5, handle: function handle() {
	      if (a.targets._popover && a.targets._popover.classList.contains("mui-active")) return a(a.targets._popover).popover("hide"), !0;var b = document.querySelector(".mui-off-canvas-wrap.mui-active");if (b) return a(b).offCanvas("close"), !0;var c = a.isFunction(a.getPreviewImage) && a.getPreviewImage();return c && c.isShown() ? (c.close(), !0) : a.closePopup();
	    } }), a.__back__first = null, a.addBack({ name: "5+", index: 10, handle: function handle() {
	      if (!b.plus) return !1;var c = plus.webview.currentWebview(),
	          d = c.parent();return d ? d.evalJS("mui&&mui.back();") : c.canBack(function (d) {
	        d.canBack ? b.history.back() : c.id === plus.runtime.appid ? a.__back__first ? new Date().getTime() - a.__back__first < 2e3 && plus.runtime.quit() : (a.__back__first = new Date().getTime(), mui.toast("再按一次退出应用"), setTimeout(function () {
	          a.__back__first = null;
	        }, 2e3)) : c.preload ? c.hide("auto") : a.closeAll(c);
	      }), !0;
	    } }), a.menu = function () {
	    var c = document.querySelector(".mui-action-menu");if (c) a.trigger(c, a.EVENT_START), a.trigger(c, "tap");else if (b.plus) {
	      var d = a.currentWebview,
	          e = d.parent();e && e.evalJS("mui&&mui.menu();");
	    }
	  };var c = function c() {
	    a.back();
	  },
	      d = function d() {
	    a.menu();
	  };a.plusReady(function () {
	    a.options.keyEventBind.backbutton && plus.key.addEventListener("backbutton", c, !1), a.options.keyEventBind.menubutton && plus.key.addEventListener("menubutton", d, !1);
	  }), a.addInit({ name: "keyEventBind", index: 1e3, handle: function handle() {
	      a.plusReady(function () {
	        a.options.keyEventBind.backbutton || plus.key.removeEventListener("backbutton", c), a.options.keyEventBind.menubutton || plus.key.removeEventListener("menubutton", d);
	      });
	    } });
	}(mui, window), function (a) {
	  a.addInit({ name: "pullrefresh", index: 1e3, handle: function handle() {
	      var b = a.options,
	          c = b.pullRefresh || {},
	          d = c.down && c.down.hasOwnProperty("callback"),
	          e = c.up && c.up.hasOwnProperty("callback");if (d || e) {
	        var f = c.container;if (f) {
	          var g = a(f);1 === g.length && (a.os.plus && a.os.android ? a.plusReady(function () {
	            var b = plus.webview.currentWebview();if (e) {
	              var f = {};f.up = c.up, f.webviewId = b.id || b.getURL(), g.pullRefresh(f);
	            }if (d) {
	              var h = b.parent(),
	                  i = b.id || b.getURL();if (h) {
	                e || g.pullRefresh({ webviewId: i });var j = { webviewId: i };j.down = a.extend({}, c.down), j.down.callback = "_CALLBACK", h.evalJS("mui&&mui(document.querySelector('.mui-content')).pullRefresh('" + (0, _stringify2.default)(j) + "')");
	              }
	            }
	          }) : g.pullRefresh(c));
	        }
	      }
	    } });
	}(mui), function (a, b, c) {
	  var d = "application/json",
	      e = "text/html",
	      f = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	      g = /^(?:text|application)\/javascript/i,
	      h = /^(?:text|application)\/xml/i,
	      i = /^\s*$/;a.ajaxSettings = { type: "GET", beforeSend: a.noop, success: a.noop, error: a.noop, complete: a.noop, context: null, xhr: function xhr(a) {
	      return new b.XMLHttpRequest();
	    }, accepts: { script: "text/javascript, application/javascript, application/x-javascript", json: d, xml: "application/xml, text/xml", html: e, text: "text/plain" }, timeout: 0, processData: !0, cache: !0 };var j = function j(a, b) {
	    var c = b.context;return b.beforeSend.call(c, a, b) === !1 ? !1 : void 0;
	  },
	      k = function k(a, b, c) {
	    c.success.call(c.context, a, "success", b), m("success", b, c);
	  },
	      l = function l(a, b, c, d) {
	    d.error.call(d.context, c, b, a), m(b, c, d);
	  },
	      m = function m(a, b, c) {
	    c.complete.call(c.context, b, a);
	  },
	      n = function n(b, c, d, e) {
	    var f,
	        g = a.isArray(c),
	        h = a.isPlainObject(c);a.each(c, function (c, i) {
	      f = a.type(i), e && (c = d ? e : e + "[" + (h || "object" === f || "array" === f ? c : "") + "]"), !e && g ? b.add(i.name, i.value) : "array" === f || !d && "object" === f ? n(b, i, d, c) : b.add(c, i);
	    });
	  },
	      o = function o(b) {
	    b.processData && b.data && "string" != typeof b.data && (b.data = a.param(b.data, b.traditional)), !b.data || b.type && "GET" !== b.type.toUpperCase() || (b.url = p(b.url, b.data), b.data = c);
	  },
	      p = function p(a, b) {
	    return "" === b ? a : (a + "&" + b).replace(/[&?]{1,2}/, "?");
	  },
	      q = function q(a) {
	    return a && (a = a.split(";", 2)[0]), a && (a === e ? "html" : a === d ? "json" : g.test(a) ? "script" : h.test(a) && "xml") || "text";
	  },
	      r = function r(b, d, e, f) {
	    return a.isFunction(d) && (f = e, e = d, d = c), a.isFunction(e) || (f = e, e = c), { url: b, data: d, success: e, dataType: f };
	  };a.ajax = function (d, e) {
	    "object" == (typeof d === "undefined" ? "undefined" : (0, _typeof3.default)(d)) && (e = d, d = c);var f = e || {};f.url = d || f.url;for (var g in a.ajaxSettings) {
	      f[g] === c && (f[g] = a.ajaxSettings[g]);
	    }o(f);var h = f.dataType;f.cache !== !1 && (e && e.cache === !0 || "script" !== h) || (f.url = p(f.url, "_=" + a.now()));var m,
	        n = f.accepts[h && h.toLowerCase()],
	        r = {},
	        s = function s(a, b) {
	      r[a.toLowerCase()] = [a, b];
	    },
	        t = /^([\w-]+:)\/\//.test(f.url) ? RegExp.$1 : b.location.protocol,
	        u = f.xhr(f),
	        v = u.setRequestHeader;if (s("X-Requested-With", "XMLHttpRequest"), s("Accept", n || "*/*"), (n = f.mimeType || n) && (n.indexOf(",") > -1 && (n = n.split(",", 2)[0]), u.overrideMimeType && u.overrideMimeType(n)), (f.contentType || f.contentType !== !1 && f.data && "GET" !== f.type.toUpperCase()) && s("Content-Type", f.contentType || "application/x-www-form-urlencoded"), f.headers) for (var w in f.headers) {
	      s(w, f.headers[w]);
	    }if (u.setRequestHeader = s, u.onreadystatechange = function () {
	      if (4 === u.readyState) {
	        u.onreadystatechange = a.noop, clearTimeout(m);var b,
	            c = !1,
	            d = "file:" === t;if (u.status >= 200 && u.status < 300 || 304 === u.status || 0 === u.status && d && u.responseText) {
	          h = h || q(f.mimeType || u.getResponseHeader("content-type")), b = u.responseText;try {
	            "script" === h ? (1, eval)(b) : "xml" === h ? b = u.responseXML : "json" === h && (b = i.test(b) ? null : a.parseJSON(b));
	          } catch (e) {
	            c = e;
	          }c ? l(c, "parsererror", u, f) : k(b, u, f);
	        } else {
	          var g = u.status ? "error" : "abort",
	              j = u.statusText || null;d && (g = "error", j = "404"), l(j, g, u, f);
	        }
	      }
	    }, j(u, f) === !1) return u.abort(), l(null, "abort", u, f), u;if (f.xhrFields) for (var w in f.xhrFields) {
	      u[w] = f.xhrFields[w];
	    }var x = "async" in f ? f.async : !0;u.open(f.type.toUpperCase(), f.url, x, f.username, f.password);for (var w in r) {
	      v.apply(u, r[w]);
	    }return f.timeout > 0 && (m = setTimeout(function () {
	      u.onreadystatechange = a.noop, u.abort(), l(null, "timeout", u, f);
	    }, f.timeout)), u.send(f.data ? f.data : null), u;
	  }, a.param = function (a, b) {
	    var c = [];return c.add = function (a, b) {
	      this.push(encodeURIComponent(a) + "=" + encodeURIComponent(b));
	    }, n(c, a, b), c.join("&").replace(/%20/g, "+");
	  }, a.get = function () {
	    return a.ajax(r.apply(null, arguments));
	  }, a.post = function () {
	    var b = r.apply(null, arguments);return b.type = "POST", a.ajax(b);
	  }, a.getJSON = function () {
	    var b = r.apply(null, arguments);return b.dataType = "json", a.ajax(b);
	  }, a.fn.load = function (b, c, d) {
	    if (!this.length) return this;var e,
	        g = this,
	        h = b.split(/\s/),
	        i = r(b, c, d),
	        j = i.success;return h.length > 1 && (i.url = h[0], e = h[1]), i.success = function (a) {
	      if (e) {
	        var b = document.createElement("div");b.innerHTML = a.replace(f, "");var c = document.createElement("div"),
	            d = b.querySelectorAll(e);if (d && d.length > 0) for (var h = 0, i = d.length; i > h; h++) {
	          c.appendChild(d[h]);
	        }g[0].innerHTML = c.innerHTML;
	      } else g[0].innerHTML = a;j && j.apply(g, arguments);
	    }, a.ajax(i), this;
	  };
	}(mui, window), function (a) {
	  var b = document.createElement("a");b.href = window.location.href, a.plusReady(function () {
	    a.ajaxSettings = a.extend(a.ajaxSettings, { xhr: function xhr(a) {
	        if (a.crossDomain) return new plus.net.XMLHttpRequest();if ("file:" !== b.protocol) {
	          var c = document.createElement("a");if (c.href = a.url, c.href = c.href, a.crossDomain = b.protocol + "//" + b.host != c.protocol + "//" + c.host, a.crossDomain) return new plus.net.XMLHttpRequest();
	        }return new window.XMLHttpRequest();
	      } });
	  });
	}(mui), function (a, b, c) {
	  a.offset = function (a) {
	    var d = { top: 0, left: 0 };return (0, _typeof3.default)(a.getBoundingClientRect) !== c && (d = a.getBoundingClientRect()), { top: d.top + b.pageYOffset - a.clientTop, left: d.left + b.pageXOffset - a.clientLeft };
	  };
	}(mui, window), function (a, b) {
	  a.scrollTo = function (a, c, d) {
	    c = c || 1e3;var e = function e(c) {
	      if (0 >= c) return b.scrollTo(0, a), void (d && d());var f = a - b.scrollY;setTimeout(function () {
	        b.scrollTo(0, b.scrollY + f / c * 10), e(c - 10);
	      }, 16.7);
	    };e(c);
	  }, a.animationFrame = function (a) {
	    var b, c, d;return function () {
	      b = arguments, d = this, c || (c = !0, requestAnimationFrame(function () {
	        a.apply(d, b), c = !1;
	      }));
	    };
	  };
	}(mui, window), function (a) {
	  var b = !1,
	      c = /xyz/.test(function () {
	    xyz;
	  }) ? /\b_super\b/ : /.*/,
	      d = function d() {};d.extend = function (a) {
	    function d() {
	      !b && this.init && this.init.apply(this, arguments);
	    }var e = this.prototype;b = !0;var f = new this();b = !1;for (var g in a) {
	      f[g] = "function" == typeof a[g] && "function" == typeof e[g] && c.test(a[g]) ? function (a, b) {
	        return function () {
	          var c = this._super;this._super = e[a];var d = b.apply(this, arguments);return this._super = c, d;
	        };
	      }(g, a[g]) : a[g];
	    }return d.prototype = f, d.prototype.constructor = d, d.extend = arguments.callee, d;
	  }, a.Class = d;
	}(mui), function (a, b, c) {
	  var d = "mui-pull-top-pocket",
	      e = "mui-pull-bottom-pocket",
	      f = "mui-pull",
	      g = "mui-pull-loading",
	      h = "mui-pull-caption",
	      i = "mui-pull-caption-down",
	      j = "mui-pull-caption-refresh",
	      k = "mui-pull-caption-nomore",
	      l = "mui-icon",
	      m = "mui-spinner",
	      n = "mui-icon-pulldown",
	      o = "mui-block",
	      p = "mui-hidden",
	      q = "mui-visibility",
	      r = g + " " + l + " " + n,
	      s = g + " " + l + " " + n,
	      t = g + " " + l + " " + m,
	      u = ['<div class="' + f + '">', '<div class="{icon}"></div>', '<div class="' + h + '">{contentrefresh}</div>', "</div>"].join(""),
	      v = { init: function init(b, c) {
	      this._super(b, a.extend(!0, { scrollY: !0, scrollX: !1, indicators: !0, deceleration: .003, down: { height: 50, contentinit: "下拉可以刷新", contentdown: "下拉可以刷新", contentover: "释放立即刷新", contentrefresh: "正在刷新..." }, up: { height: 50, auto: !1, contentinit: "上拉显示更多", contentdown: "上拉显示更多", contentrefresh: "正在加载...", contentnomore: "没有更多数据了", duration: 300 } }, c));
	    }, _init: function _init() {
	      this._super(), this._initPocket();
	    }, _initPulldownRefresh: function _initPulldownRefresh() {
	      this.pulldown = !0, this.pullPocket = this.topPocket, this.pullPocket.classList.add(o), this.pullPocket.classList.add(q), this.pullCaption = this.topCaption, this.pullLoading = this.topLoading;
	    }, _initPullupRefresh: function _initPullupRefresh() {
	      this.pulldown = !1, this.pullPocket = this.bottomPocket, this.pullPocket.classList.add(o), this.pullPocket.classList.add(q), this.pullCaption = this.bottomCaption, this.pullLoading = this.bottomLoading;
	    }, _initPocket: function _initPocket() {
	      var a = this.options;a.down && a.down.hasOwnProperty("callback") && (this.topPocket = this.scroller.querySelector("." + d), this.topPocket || (this.topPocket = this._createPocket(d, a.down, s), this.wrapper.insertBefore(this.topPocket, this.wrapper.firstChild)), this.topLoading = this.topPocket.querySelector("." + g), this.topCaption = this.topPocket.querySelector("." + h)), a.up && a.up.hasOwnProperty("callback") && (this.bottomPocket = this.scroller.querySelector("." + e), this.bottomPocket || (this.bottomPocket = this._createPocket(e, a.up, t), this.scroller.appendChild(this.bottomPocket)), this.bottomLoading = this.bottomPocket.querySelector("." + g), this.bottomCaption = this.bottomPocket.querySelector("." + h), this.wrapper.addEventListener("scrollbottom", this));
	    }, _createPocket: function _createPocket(a, c, d) {
	      var e = b.createElement("div");return e.className = a, e.innerHTML = u.replace("{contentrefresh}", c.contentinit).replace("{icon}", d), e;
	    }, _resetPullDownLoading: function _resetPullDownLoading() {
	      var a = this.pullLoading;a && (this.pullCaption.innerHTML = this.options.down.contentdown, a.style.webkitTransition = "", a.style.webkitTransform = "", a.style.webkitAnimation = "", a.className = s);
	    }, _setCaptionClass: function _setCaptionClass(a, b, c) {
	      if (!a) switch (c) {case this.options.up.contentdown:
	          b.className = h + " " + i;break;case this.options.up.contentrefresh:
	          b.className = h + " " + j;break;case this.options.up.contentnomore:
	          b.className = h + " " + k;}
	    }, _setCaption: function _setCaption(a, b) {
	      if (!this.loading) {
	        var c = this.options,
	            d = this.pullPocket,
	            e = this.pullCaption,
	            f = this.pullLoading,
	            g = this.pulldown,
	            h = this;d && (b ? setTimeout(function () {
	          e.innerHTML = h.lastTitle = a, g ? f.className = s : (h._setCaptionClass(!1, e, a), f.className = t), f.style.webkitAnimation = "", f.style.webkitTransition = "", f.style.webkitTransform = "";
	        }, 100) : a !== this.lastTitle && (e.innerHTML = a, g ? a === c.down.contentrefresh ? (f.className = t, f.style.webkitAnimation = "spinner-spin 1s step-end infinite") : a === c.down.contentover ? (f.className = r, f.style.webkitTransition = "-webkit-transform 0.3s ease-in", f.style.webkitTransform = "rotate(180deg)") : a === c.down.contentdown && (f.className = s, f.style.webkitTransition = "-webkit-transform 0.3s ease-in", f.style.webkitTransform = "rotate(0deg)") : (a === c.up.contentrefresh ? f.className = t + " " + q : f.className = t + " " + p, h._setCaptionClass(!1, e, a)), this.lastTitle = a));
	      }
	    } };a.PullRefresh = v;
	}(mui, document), function (a, b, c, d) {
	  var e = "mui-scroll",
	      f = "mui-scrollbar",
	      g = "mui-scrollbar-indicator",
	      h = f + "-vertical",
	      i = f + "-horizontal",
	      j = "mui-active",
	      k = { quadratic: { style: "cubic-bezier(0.25, 0.46, 0.45, 0.94)", fn: function fn(a) {
	        return a * (2 - a);
	      } }, circular: { style: "cubic-bezier(0.1, 0.57, 0.1, 1)", fn: function fn(a) {
	        return Math.sqrt(1 - --a * a);
	      } }, outCirc: { style: "cubic-bezier(0.075, 0.82, 0.165, 1)" }, outCubic: { style: "cubic-bezier(0.165, 0.84, 0.44, 1)" } },
	      l = a.Class.extend({ init: function init(b, c) {
	      this.wrapper = this.element = b, this.scroller = this.wrapper.children[0], this.scrollerStyle = this.scroller && this.scroller.style, this.stopped = !1, this.options = a.extend(!0, { scrollY: !0, scrollX: !1, startX: 0, startY: 0, indicators: !0, stopPropagation: !1, hardwareAccelerated: !0, fixedBadAndorid: !1, preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|VIDEO)$/ }, momentum: !0, snapX: .5, snap: !1, bounce: !0, bounceTime: 500, bounceEasing: k.outCirc, scrollTime: 500, scrollEasing: k.outCubic, directionLockThreshold: 5, parallaxElement: !1, parallaxRatio: .5 }, c), this.x = 0, this.y = 0, this.translateZ = this.options.hardwareAccelerated ? " translateZ(0)" : "", this._init(), this.scroller && (this.refresh(), this.scrollTo(this.options.startX, this.options.startY));
	    }, _init: function _init() {
	      this._initParallax(), this._initIndicators(), this._initEvent();
	    }, _initParallax: function _initParallax() {
	      this.options.parallaxElement && (this.parallaxElement = c.querySelector(this.options.parallaxElement), this.parallaxStyle = this.parallaxElement.style, this.parallaxHeight = this.parallaxElement.offsetHeight, this.parallaxImgStyle = this.parallaxElement.querySelector("img").style);
	    }, _initIndicators: function _initIndicators() {
	      var a = this;if (a.indicators = [], this.options.indicators) {
	        var b,
	            c = [];a.options.scrollY && (b = { el: this._createScrollBar(h), listenX: !1 }, this.wrapper.appendChild(b.el), c.push(b)), this.options.scrollX && (b = { el: this._createScrollBar(i), listenY: !1 }, this.wrapper.appendChild(b.el), c.push(b));for (var d = c.length; d--;) {
	          this.indicators.push(new m(this, c[d]));
	        }
	      }
	    }, _initSnap: function _initSnap() {
	      this.currentPage = {}, this.pages = [];for (var a = this.snaps, b = a.length, c = 0, d = -1, e = 0, f = 0, g = 0, h = 0, i = 0; b > i; i++) {
	        var k = a[i],
	            l = k.offsetLeft,
	            m = k.offsetWidth;(0 === i || l <= a[i - 1].offsetLeft) && (c = 0, d++), this.pages[c] || (this.pages[c] = []), e = this._getSnapX(l), h = Math.round(m * this.options.snapX), f = e - h, g = e - m + h, this.pages[c][d] = { x: e, leftX: f, rightX: g, pageX: c, element: k }, k.classList.contains(j) && (this.currentPage = this.pages[c][0]), e >= this.maxScrollX && c++;
	      }this.options.startX = this.currentPage.x || 0;
	    }, _getSnapX: function _getSnapX(a) {
	      return Math.max(Math.min(0, -a + this.wrapperWidth / 2), this.maxScrollX);
	    }, _gotoPage: function _gotoPage(a) {
	      this.currentPage = this.pages[Math.min(a, this.pages.length - 1)][0];for (var b = 0, c = this.snaps.length; c > b; b++) {
	        b === a ? this.snaps[b].classList.add(j) : this.snaps[b].classList.remove(j);
	      }this.scrollTo(this.currentPage.x, 0, this.options.scrollTime);
	    }, _nearestSnap: function _nearestSnap(a) {
	      if (!this.pages.length) return { x: 0, pageX: 0 };var b = 0,
	          c = this.pages.length;for (a > 0 ? a = 0 : a < this.maxScrollX && (a = this.maxScrollX); c > b; b++) {
	        var d = "left" === this.direction ? this.pages[b][0].leftX : this.pages[b][0].rightX;if (a >= d) return this.pages[b][0];
	      }return { x: 0, pageX: 0 };
	    }, _initEvent: function _initEvent(c) {
	      var d = c ? "removeEventListener" : "addEventListener";b[d]("orientationchange", this), b[d]("resize", this), this.scroller[d]("webkitTransitionEnd", this), this.wrapper[d](a.EVENT_START, this), this.wrapper[d](a.EVENT_CANCEL, this), this.wrapper[d](a.EVENT_END, this), this.wrapper[d]("drag", this), this.wrapper[d]("dragend", this), this.wrapper[d]("flick", this), this.wrapper[d]("scrollend", this), this.options.scrollX && this.wrapper[d]("swiperight", this);var e = this.wrapper.querySelector(".mui-segmented-control");e && mui(e)[c ? "off" : "on"]("click", "a", a.preventDefault), this.wrapper[d]("scrollstart", this), this.wrapper[d]("refresh", this);
	    }, _handleIndicatorScrollend: function _handleIndicatorScrollend() {
	      this.indicators.map(function (a) {
	        a.fade();
	      });
	    }, _handleIndicatorScrollstart: function _handleIndicatorScrollstart() {
	      this.indicators.map(function (a) {
	        a.fade(1);
	      });
	    }, _handleIndicatorRefresh: function _handleIndicatorRefresh() {
	      this.indicators.map(function (a) {
	        a.refresh();
	      });
	    }, handleEvent: function handleEvent(b) {
	      if (this.stopped) return void this.resetPosition();switch (b.type) {case a.EVENT_START:
	          this._start(b);break;case "drag":
	          this.options.stopPropagation && b.stopPropagation(), this._drag(b);break;case "dragend":case "flick":
	          this.options.stopPropagation && b.stopPropagation(), this._flick(b);break;case a.EVENT_CANCEL:case a.EVENT_END:
	          this._end(b);break;case "webkitTransitionEnd":
	          this.transitionTimer && this.transitionTimer.cancel(), this._transitionEnd(b);break;case "scrollstart":
	          this._handleIndicatorScrollstart(b);break;case "scrollend":
	          this._handleIndicatorScrollend(b), this._scrollend(b), b.stopPropagation();break;case "orientationchange":case "resize":
	          this._resize();break;case "swiperight":
	          b.stopPropagation();break;case "refresh":
	          this._handleIndicatorRefresh(b);}
	    }, _start: function _start(b) {
	      if (this.moved = this.needReset = !1, this._transitionTime(), this.isInTransition) {
	        this.needReset = !0, this.isInTransition = !1;var c = a.parseTranslateMatrix(a.getStyles(this.scroller, "webkitTransform"));this.setTranslate(Math.round(c.x), Math.round(c.y)), a.trigger(this.scroller, "scrollend", this), b.preventDefault();
	      }this.reLayout(), a.trigger(this.scroller, "beforescrollstart", this);
	    }, _getDirectionByAngle: function _getDirectionByAngle(a) {
	      return -80 > a && a > -100 ? "up" : a >= 80 && 100 > a ? "down" : a >= 170 || -170 >= a ? "left" : a >= -35 && 10 >= a ? "right" : null;
	    }, _drag: function _drag(c) {
	      var d = c.detail;if ((this.options.scrollY || "up" === d.direction || "down" === d.direction) && a.os.ios && parseFloat(a.os.version) >= 8) {
	        var e = d.gesture.touches[0].clientY;if (e + 10 > b.innerHeight || 10 > e) return void this.resetPosition(this.options.bounceTime);
	      }var f = isReturn = !1;this._getDirectionByAngle(d.angle);if ("left" === d.direction || "right" === d.direction ? this.options.scrollX ? (f = !0, this.moved || (a.gestures.session.lockDirection = !0, a.gestures.session.startDirection = d.direction)) : this.options.scrollY && !this.moved && (isReturn = !0) : "up" === d.direction || "down" === d.direction ? this.options.scrollY ? (f = !0, this.moved || (a.gestures.session.lockDirection = !0, a.gestures.session.startDirection = d.direction)) : this.options.scrollX && !this.moved && (isReturn = !0) : isReturn = !0, (this.moved || f) && (c.stopPropagation(), d.gesture && d.gesture.preventDefault()), !isReturn) {
	        this.moved ? c.stopPropagation() : a.trigger(this.scroller, "scrollstart", this);var g = 0,
	            h = 0;this.moved ? (g = d.deltaX - a.gestures.session.prevTouch.deltaX, h = d.deltaY - a.gestures.session.prevTouch.deltaY) : (g = d.deltaX, h = d.deltaY);var i = Math.abs(d.deltaX),
	            j = Math.abs(d.deltaY);i > j + this.options.directionLockThreshold ? h = 0 : j >= i + this.options.directionLockThreshold && (g = 0), g = this.hasHorizontalScroll ? g : 0, h = this.hasVerticalScroll ? h : 0;var k = this.x + g,
	            l = this.y + h;(k > 0 || k < this.maxScrollX) && (k = this.options.bounce ? this.x + g / 3 : k > 0 ? 0 : this.maxScrollX), (l > 0 || l < this.maxScrollY) && (l = this.options.bounce ? this.y + h / 3 : l > 0 ? 0 : this.maxScrollY), this.requestAnimationFrame || this._updateTranslate(), this.direction = d.deltaX > 0 ? "right" : "left", this.moved = !0, this.x = k, this.y = l, a.trigger(this.scroller, "scroll", this);
	      }
	    }, _flick: function _flick(b) {
	      if (this.moved) {
	        b.stopPropagation();var c = b.detail;if (this._clearRequestAnimationFrame(), "dragend" !== b.type || !c.flick) {
	          var d = Math.round(this.x),
	              e = Math.round(this.y);if (this.isInTransition = !1, !this.resetPosition(this.options.bounceTime)) {
	            if (this.scrollTo(d, e), "dragend" === b.type) return void a.trigger(this.scroller, "scrollend", this);var f = 0,
	                g = "";return this.options.momentum && c.flickTime < 300 && (momentumX = this.hasHorizontalScroll ? this._momentum(this.x, c.flickDistanceX, c.flickTime, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: d, duration: 0 }, momentumY = this.hasVerticalScroll ? this._momentum(this.y, c.flickDistanceY, c.flickTime, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: e, duration: 0 }, d = momentumX.destination, e = momentumY.destination, f = Math.max(momentumX.duration, momentumY.duration), this.isInTransition = !0), d != this.x || e != this.y ? ((d > 0 || d < this.maxScrollX || e > 0 || e < this.maxScrollY) && (g = k.quadratic), void this.scrollTo(d, e, f, g)) : void a.trigger(this.scroller, "scrollend", this);
	          }
	        }
	      }
	    }, _end: function _end(b) {
	      this.needReset = !1, (!this.moved && this.needReset || b.type === a.EVENT_CANCEL) && this.resetPosition();
	    }, _transitionEnd: function _transitionEnd(b) {
	      b.target == this.scroller && this.isInTransition && (this._transitionTime(), this.resetPosition(this.options.bounceTime) || (this.isInTransition = !1, a.trigger(this.scroller, "scrollend", this)));
	    }, _scrollend: function _scrollend(b) {
	      (0 === this.y && 0 === this.maxScrollY || Math.abs(this.y) > 0 && this.y <= this.maxScrollY) && a.trigger(this.scroller, "scrollbottom", this);
	    }, _resize: function _resize() {
	      var a = this;clearTimeout(a.resizeTimeout), a.resizeTimeout = setTimeout(function () {
	        a.refresh();
	      }, a.options.resizePolling);
	    }, _transitionTime: function _transitionTime(b) {
	      if (b = b || 0, this.scrollerStyle.webkitTransitionDuration = b + "ms", this.parallaxElement && this.options.scrollY && (this.parallaxStyle.webkitTransitionDuration = b + "ms"), this.options.fixedBadAndorid && !b && a.os.isBadAndroid && (this.scrollerStyle.webkitTransitionDuration = "0.001s", this.parallaxElement && this.options.scrollY && (this.parallaxStyle.webkitTransitionDuration = "0.001s")), this.indicators) for (var c = this.indicators.length; c--;) {
	        this.indicators[c].transitionTime(b);
	      }b && (this.transitionTimer && this.transitionTimer.cancel(), this.transitionTimer = a.later(function () {
	        a.trigger(this.scroller, "webkitTransitionEnd");
	      }, b + 100, this));
	    }, _transitionTimingFunction: function _transitionTimingFunction(a) {
	      if (this.scrollerStyle.webkitTransitionTimingFunction = a, this.parallaxElement && this.options.scrollY && (this.parallaxStyle.webkitTransitionDuration = a), this.indicators) for (var b = this.indicators.length; b--;) {
	        this.indicators[b].transitionTimingFunction(a);
	      }
	    }, _translate: function _translate(a, b) {
	      this.x = a, this.y = b;
	    }, _clearRequestAnimationFrame: function _clearRequestAnimationFrame() {
	      this.requestAnimationFrame && (cancelAnimationFrame(this.requestAnimationFrame), this.requestAnimationFrame = null);
	    }, _updateTranslate: function _updateTranslate() {
	      var a = this;(a.x !== a.lastX || a.y !== a.lastY) && a.setTranslate(a.x, a.y), a.requestAnimationFrame = requestAnimationFrame(function () {
	        a._updateTranslate();
	      });
	    }, _createScrollBar: function _createScrollBar(a) {
	      var b = c.createElement("div"),
	          d = c.createElement("div");return b.className = f + " " + a, d.className = g, b.appendChild(d), a === h ? (this.scrollbarY = b, this.scrollbarIndicatorY = d) : a === i && (this.scrollbarX = b, this.scrollbarIndicatorX = d), this.wrapper.appendChild(b), b;
	    }, _preventDefaultException: function _preventDefaultException(a, b) {
	      for (var c in b) {
	        if (b[c].test(a[c])) return !0;
	      }return !1;
	    }, _reLayout: function _reLayout() {
	      if (this.hasHorizontalScroll || (this.maxScrollX = 0, this.scrollerWidth = this.wrapperWidth), this.hasVerticalScroll || (this.maxScrollY = 0, this.scrollerHeight = this.wrapperHeight), this.indicators.map(function (a) {
	        a.refresh();
	      }), this.options.snap && "string" == typeof this.options.snap) {
	        var a = this.scroller.querySelectorAll(this.options.snap);this.itemLength = 0, this.snaps = [];for (var b = 0, c = a.length; c > b; b++) {
	          var d = a[b];d.parentNode === this.scroller && (this.itemLength++, this.snaps.push(d));
	        }this._initSnap();
	      }
	    }, _momentum: function _momentum(a, b, c, e, f, g) {
	      var h,
	          i,
	          j = parseFloat(Math.abs(b) / c);return g = g === d ? 6e-4 : g, h = a + j * j / (2 * g) * (0 > b ? -1 : 1), i = j / g, e > h ? (h = f ? e - f / 2.5 * (j / 8) : e, b = Math.abs(h - a), i = b / j) : h > 0 && (h = f ? f / 2.5 * (j / 8) : 0, b = Math.abs(a) + h, i = b / j), { destination: Math.round(h), duration: i };
	    }, _getTranslateStr: function _getTranslateStr(a, b) {
	      return this.options.hardwareAccelerated ? "translate3d(" + a + "px," + b + "px,0px) " + this.translateZ : "translate(" + a + "px," + b + "px) ";
	    }, setStopped: function setStopped(a) {
	      this.stopped = !!a;
	    }, setTranslate: function setTranslate(b, c) {
	      if (this.x = b, this.y = c, this.scrollerStyle.webkitTransform = this._getTranslateStr(b, c), this.parallaxElement && this.options.scrollY) {
	        var d = c * this.options.parallaxRatio,
	            e = 1 + d / ((this.parallaxHeight - d) / 2);e > 1 ? (this.parallaxImgStyle.opacity = 1 - d / 100 * this.options.parallaxRatio, this.parallaxStyle.webkitTransform = this._getTranslateStr(0, -d) + " scale(" + e + "," + e + ")") : (this.parallaxImgStyle.opacity = 1, this.parallaxStyle.webkitTransform = this._getTranslateStr(0, -1) + " scale(1,1)");
	      }if (this.indicators) for (var f = this.indicators.length; f--;) {
	        this.indicators[f].updatePosition();
	      }this.lastX = this.x, this.lastY = this.y, a.trigger(this.scroller, "scroll", this);
	    }, reLayout: function reLayout() {
	      this.wrapper.offsetHeight;var b = parseFloat(a.getStyles(this.wrapper, "padding-left")) || 0,
	          c = parseFloat(a.getStyles(this.wrapper, "padding-right")) || 0,
	          d = parseFloat(a.getStyles(this.wrapper, "padding-top")) || 0,
	          e = parseFloat(a.getStyles(this.wrapper, "padding-bottom")) || 0,
	          f = this.wrapper.clientWidth,
	          g = this.wrapper.clientHeight;this.scrollerWidth = this.scroller.offsetWidth, this.scrollerHeight = this.scroller.offsetHeight, this.wrapperWidth = f - b - c, this.wrapperHeight = g - d - e, this.maxScrollX = Math.min(this.wrapperWidth - this.scrollerWidth, 0), this.maxScrollY = Math.min(this.wrapperHeight - this.scrollerHeight, 0), this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0, this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0, this._reLayout();
	    }, resetPosition: function resetPosition(a) {
	      var b = this.x,
	          c = this.y;return a = a || 0, !this.hasHorizontalScroll || this.x > 0 ? b = 0 : this.x < this.maxScrollX && (b = this.maxScrollX), !this.hasVerticalScroll || this.y > 0 ? c = 0 : this.y < this.maxScrollY && (c = this.maxScrollY), b == this.x && c == this.y ? !1 : (this.scrollTo(b, c, a, this.options.scrollEasing), !0);
	    }, _reInit: function _reInit() {
	      for (var a = this.wrapper.querySelectorAll("." + e), b = 0, c = a.length; c > b; b++) {
	        if (a[b].parentNode === this.wrapper) {
	          this.scroller = a[b];break;
	        }
	      }this.scrollerStyle = this.scroller && this.scroller.style;
	    }, refresh: function refresh() {
	      this._reInit(), this.reLayout(), a.trigger(this.scroller, "refresh", this), this.resetPosition();
	    }, scrollTo: function scrollTo(a, b, c, d) {
	      var d = d || k.circular;this.isInTransition = c > 0, this.isInTransition ? (this._clearRequestAnimationFrame(), this._transitionTimingFunction(d.style), this._transitionTime(c), this.setTranslate(a, b)) : this.setTranslate(a, b);
	    }, scrollToBottom: function scrollToBottom(a, b) {
	      a = a || this.options.scrollTime, this.scrollTo(0, this.maxScrollY, a, b);
	    }, gotoPage: function gotoPage(a) {
	      this._gotoPage(a);
	    }, destroy: function destroy() {
	      this._initEvent(!0), delete a.data[this.wrapper.getAttribute("data-scroll")], this.wrapper.setAttribute("data-scroll", "");
	    } }),
	      m = function m(b, d) {
	    this.wrapper = "string" == typeof d.el ? c.querySelector(d.el) : d.el, this.wrapperStyle = this.wrapper.style, this.indicator = this.wrapper.children[0], this.indicatorStyle = this.indicator.style, this.scroller = b, this.options = a.extend({ listenX: !0, listenY: !0, fade: !1, speedRatioX: 0, speedRatioY: 0 }, d), this.sizeRatioX = 1, this.sizeRatioY = 1, this.maxPosX = 0, this.maxPosY = 0, this.options.fade && (this.wrapperStyle.webkitTransform = this.scroller.translateZ, this.wrapperStyle.webkitTransitionDuration = this.options.fixedBadAndorid && a.os.isBadAndroid ? "0.001s" : "0ms", this.wrapperStyle.opacity = "0");
	  };m.prototype = { handleEvent: function handleEvent(a) {}, transitionTime: function transitionTime(b) {
	      b = b || 0, this.indicatorStyle.webkitTransitionDuration = b + "ms", this.scroller.options.fixedBadAndorid && !b && a.os.isBadAndroid && (this.indicatorStyle.webkitTransitionDuration = "0.001s");
	    }, transitionTimingFunction: function transitionTimingFunction(a) {
	      this.indicatorStyle.webkitTransitionTimingFunction = a;
	    }, refresh: function refresh() {
	      this.transitionTime(), this.options.listenX && !this.options.listenY ? this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? "block" : "none" : this.options.listenY && !this.options.listenX ? this.indicatorStyle.display = this.scroller.hasVerticalScroll ? "block" : "none" : this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? "block" : "none", this.wrapper.offsetHeight, this.options.listenX && (this.wrapperWidth = this.wrapper.clientWidth, this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8), this.indicatorStyle.width = this.indicatorWidth + "px", this.maxPosX = this.wrapperWidth - this.indicatorWidth, this.minBoundaryX = 0, this.maxBoundaryX = this.maxPosX, this.sizeRatioX = this.options.speedRatioX || this.scroller.maxScrollX && this.maxPosX / this.scroller.maxScrollX), this.options.listenY && (this.wrapperHeight = this.wrapper.clientHeight, this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8), this.indicatorStyle.height = this.indicatorHeight + "px", this.maxPosY = this.wrapperHeight - this.indicatorHeight, this.minBoundaryY = 0, this.maxBoundaryY = this.maxPosY, this.sizeRatioY = this.options.speedRatioY || this.scroller.maxScrollY && this.maxPosY / this.scroller.maxScrollY), this.updatePosition();
	    }, updatePosition: function updatePosition() {
	      var a = this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x) || 0,
	          b = this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y) || 0;a < this.minBoundaryX ? (this.width = Math.max(this.indicatorWidth + a, 8), this.indicatorStyle.width = this.width + "px", a = this.minBoundaryX) : a > this.maxBoundaryX ? (this.width = Math.max(this.indicatorWidth - (a - this.maxPosX), 8), this.indicatorStyle.width = this.width + "px", a = this.maxPosX + this.indicatorWidth - this.width) : this.width != this.indicatorWidth && (this.width = this.indicatorWidth, this.indicatorStyle.width = this.width + "px"), b < this.minBoundaryY ? (this.height = Math.max(this.indicatorHeight + 3 * b, 8), this.indicatorStyle.height = this.height + "px", b = this.minBoundaryY) : b > this.maxBoundaryY ? (this.height = Math.max(this.indicatorHeight - 3 * (b - this.maxPosY), 8), this.indicatorStyle.height = this.height + "px", b = this.maxPosY + this.indicatorHeight - this.height) : this.height != this.indicatorHeight && (this.height = this.indicatorHeight, this.indicatorStyle.height = this.height + "px"), this.x = a, this.y = b, this.indicatorStyle.webkitTransform = this.scroller._getTranslateStr(a, b);
	    }, fade: function fade(a, b) {
	      if (!b || this.visible) {
	        clearTimeout(this.fadeTimeout), this.fadeTimeout = null;var c = a ? 250 : 500,
	            d = a ? 0 : 300;a = a ? "1" : "0", this.wrapperStyle.webkitTransitionDuration = c + "ms", this.fadeTimeout = setTimeout(function (a) {
	          this.wrapperStyle.opacity = a, this.visible = +a;
	        }.bind(this, a), d);
	      }
	    } }, a.Scroll = l, a.fn.scroll = function (b) {
	    var c = [];return this.each(function () {
	      var d = null,
	          e = this,
	          f = e.getAttribute("data-scroll");if (f) d = a.data[f];else {
	        f = ++a.uuid;var g = a.extend({}, b);e.classList.contains("mui-segmented-control") && (g = a.extend(g, { scrollY: !1, scrollX: !0, indicators: !1, snap: ".mui-control-item" })), a.data[f] = d = new l(e, g), e.setAttribute("data-scroll", f);
	      }c.push(d);
	    }), 1 === c.length ? c[0] : c;
	  };
	}(mui, window, document), function (a, b, c, d) {
	  var e = "mui-visibility",
	      f = "mui-hidden",
	      g = a.Scroll.extend(a.extend({ handleEvent: function handleEvent(a) {
	      this._super(a), "scrollbottom" === a.type && a.target === this.scroller && this._scrollbottom();
	    }, _scrollbottom: function _scrollbottom() {
	      this.pulldown || this.loading || (this.pulldown = !1, this._initPullupRefresh(), this.pullupLoading());
	    }, _start: function _start(a) {
	      a.touches && a.touches.length && a.touches[0].clientX > 30 && a.target && !this._preventDefaultException(a.target, this.options.preventDefaultException) && a.preventDefault(), this.loading || (this.pulldown = this.pullPocket = this.pullCaption = this.pullLoading = !1), this._super(a);
	    }, _drag: function _drag(a) {
	      this._super(a), !this.pulldown && !this.loading && this.topPocket && "down" === a.detail.direction && this.y >= 0 && this._initPulldownRefresh(), this.pulldown && this._setCaption(this.y > this.options.down.height ? this.options.down.contentover : this.options.down.contentdown);
	    }, _reLayout: function _reLayout() {
	      this.hasVerticalScroll = !0, this._super();
	    }, resetPosition: function resetPosition(a) {
	      if (this.pulldown) {
	        if (this.y >= this.options.down.height) return this.pulldownLoading(d, a || 0), !0;!this.loading && this.topPocket.classList.remove(e);
	      }return this._super(a);
	    }, pulldownLoading: function pulldownLoading(a, b) {
	      if ("undefined" == typeof a && (a = this.options.down.height), this.scrollTo(0, a, b, this.options.bounceEasing), !this.loading) {
	        this._initPulldownRefresh(), this._setCaption(this.options.down.contentrefresh), this.loading = !0, this.indicators.map(function (a) {
	          a.fade(0);
	        });var c = this.options.down.callback;c && c.call(this);
	      }
	    }, endPulldownToRefresh: function endPulldownToRefresh() {
	      var a = this;a.topPocket && a.loading && this.pulldown && (a.scrollTo(0, 0, a.options.bounceTime, a.options.bounceEasing), a.loading = !1, a._setCaption(a.options.down.contentdown, !0), setTimeout(function () {
	        a.loading || a.topPocket.classList.remove(e);
	      }, 350));
	    }, pullupLoading: function pullupLoading(a, b, c) {
	      b = b || 0, this.scrollTo(b, this.maxScrollY, c, this.options.bounceEasing), this.loading || (this._initPullupRefresh(), this._setCaption(this.options.up.contentrefresh), this.indicators.map(function (a) {
	        a.fade(0);
	      }), this.loading = !0, a = a || this.options.up.callback, a && a.call(this));
	    }, endPullupToRefresh: function endPullupToRefresh(a) {
	      var b = this;b.bottomPocket && (b.loading = !1, a ? (this.finished = !0, b._setCaption(b.options.up.contentnomore), b.wrapper.removeEventListener("scrollbottom", b)) : (b._setCaption(b.options.up.contentdown), b.loading || b.bottomPocket.classList.remove(e)));
	    }, disablePullupToRefresh: function disablePullupToRefresh() {
	      this._initPullupRefresh(), this.bottomPocket.className = "mui-pull-bottom-pocket " + f, this.wrapper.removeEventListener("scrollbottom", this);
	    }, enablePullupToRefresh: function enablePullupToRefresh() {
	      this._initPullupRefresh(), this.bottomPocket.classList.remove(f), this._setCaption(this.options.up.contentdown), this.wrapper.addEventListener("scrollbottom", this);
	    }, refresh: function refresh(a) {
	      a && this.finished && (this.enablePullupToRefresh(), this.finished = !1), this._super();
	    } }, a.PullRefresh));a.fn.pullRefresh = function (b) {
	    if (1 === this.length) {
	      var c = this[0],
	          d = null;b = b || {};var e = c.getAttribute("data-pullrefresh");return e ? d = a.data[e] : (e = ++a.uuid, a.data[e] = d = new g(c, b), c.setAttribute("data-pullrefresh", e)), b.down && b.down.auto ? d.pulldownLoading(b.down.autoY) : b.up && b.up.auto && d.pullupLoading(), d;
	    }
	  };
	}(mui, window, document), function (a, b) {
	  var c = "mui-slider",
	      d = "mui-slider-group",
	      e = "mui-slider-loop",
	      f = "mui-action-previous",
	      g = "mui-action-next",
	      h = "mui-slider-item",
	      i = "mui-active",
	      j = "." + h,
	      k = ".mui-slider-progress-bar",
	      l = a.Slider = a.Scroll.extend({ init: function init(b, c) {
	      this._super(b, a.extend(!0, { fingers: 1, interval: 0, scrollY: !1, scrollX: !0, indicators: !1, scrollTime: 1e3, startX: !1, slideTime: 0, snap: j }, c)), this.options.startX;
	    }, _init: function _init() {
	      this._reInit(), this.scroller && (this.scrollerStyle = this.scroller.style, this.progressBar = this.wrapper.querySelector(k), this.progressBar && (this.progressBarWidth = this.progressBar.offsetWidth, this.progressBarStyle = this.progressBar.style), this._super(), this._initTimer());
	    }, _triggerSlide: function _triggerSlide() {
	      var b = this;b.isInTransition = !1;b.currentPage;b.slideNumber = b._fixedSlideNumber(), b.loop && (0 === b.slideNumber ? b.setTranslate(b.pages[1][0].x, 0) : b.slideNumber === b.itemLength - 3 && b.setTranslate(b.pages[b.itemLength - 2][0].x, 0)), b.lastSlideNumber != b.slideNumber && (b.lastSlideNumber = b.slideNumber, b.lastPage = b.currentPage, a.trigger(b.wrapper, "slide", { slideNumber: b.slideNumber })), b._initTimer();
	    }, _handleSlide: function _handleSlide(b) {
	      var c = this;if (b.target === c.wrapper) {
	        var d = b.detail;d.slideNumber = d.slideNumber || 0;for (var e = c.scroller.querySelectorAll(j), f = [], g = 0, h = e.length; h > g; g++) {
	          var k = e[g];k.parentNode === c.scroller && f.push(k);
	        }var l = d.slideNumber;if (c.loop && (l += 1), !c.wrapper.classList.contains("mui-segmented-control")) for (var g = 0, h = f.length; h > g; g++) {
	          var k = f[g];k.parentNode === c.scroller && (g === l ? k.classList.add(i) : k.classList.remove(i));
	        }var m = c.wrapper.querySelector(".mui-slider-indicator");if (m) {
	          m.getAttribute("data-scroll") && a(m).scroll().gotoPage(d.slideNumber);var n = m.querySelectorAll(".mui-indicator");if (n.length > 0) for (var g = 0, h = n.length; h > g; g++) {
	            n[g].classList[g === d.slideNumber ? "add" : "remove"](i);
	          } else {
	            var o = m.querySelector(".mui-number span");if (o) o.innerText = d.slideNumber + 1;else for (var p = m.querySelectorAll(".mui-control-item"), g = 0, h = p.length; h > g; g++) {
	              p[g].classList[g === d.slideNumber ? "add" : "remove"](i);
	            }
	          }
	        }b.stopPropagation();
	      }
	    }, _handleTabShow: function _handleTabShow(a) {
	      var b = this;b.gotoItem(a.detail.tabNumber || 0, b.options.slideTime);
	    }, _handleIndicatorTap: function _handleIndicatorTap(a) {
	      var b = this,
	          c = a.target;(c.classList.contains(f) || c.classList.contains(g)) && (b[c.classList.contains(f) ? "prevItem" : "nextItem"](), a.stopPropagation());
	    }, _initEvent: function _initEvent(b) {
	      var c = this;c._super(b);var d = b ? "removeEventListener" : "addEventListener";c.wrapper[d]("slide", this), c.wrapper[d](a.eventName("shown", "tab"), this);
	    }, handleEvent: function handleEvent(b) {
	      switch (this._super(b), b.type) {case "slide":
	          this._handleSlide(b);break;case a.eventName("shown", "tab"):
	          ~this.snaps.indexOf(b.target) && this._handleTabShow(b);}
	    }, _scrollend: function _scrollend(a) {
	      this._super(a), this._triggerSlide(a);
	    }, _drag: function _drag(a) {
	      this._super(a);var c = a.detail.direction;if ("left" === c || "right" === c) {
	        var d = this.wrapper.getAttribute("data-slidershowTimer");d && b.clearTimeout(d), a.stopPropagation();
	      }
	    }, _initTimer: function _initTimer() {
	      var a = this,
	          c = a.wrapper,
	          d = a.options.interval,
	          e = c.getAttribute("data-slidershowTimer");e && b.clearTimeout(e), d && (e = b.setTimeout(function () {
	        c && ((c.offsetWidth || c.offsetHeight) && a.nextItem(!0), a._initTimer());
	      }, d), c.setAttribute("data-slidershowTimer", e));
	    }, _fixedSlideNumber: function _fixedSlideNumber(a) {
	      a = a || this.currentPage;
	      var b = a.pageX;return this.loop && (b = 0 === a.pageX ? this.itemLength - 3 : a.pageX === this.itemLength - 1 ? 0 : a.pageX - 1), b;
	    }, _reLayout: function _reLayout() {
	      this.hasHorizontalScroll = !0, this.loop = this.scroller.classList.contains(e), this._super();
	    }, _getScroll: function _getScroll() {
	      var b = a.parseTranslateMatrix(a.getStyles(this.scroller, "webkitTransform"));return b ? b.x : 0;
	    }, _transitionEnd: function _transitionEnd(b) {
	      b.target === this.scroller && this.isInTransition && (this._transitionTime(), this.isInTransition = !1, a.trigger(this.wrapper, "scrollend", this));
	    }, _flick: function _flick(a) {
	      if (this.moved) {
	        var b = a.detail,
	            c = b.direction;this._clearRequestAnimationFrame(), this.isInTransition = !0, "flick" === a.type ? (b.deltaTime < 200 && (this.x = this._getPage(this.slideNumber + ("right" === c ? -1 : 1), !0).x), this.resetPosition(this.options.bounceTime)) : "dragend" !== a.type || b.flick || this.resetPosition(this.options.bounceTime), a.stopPropagation();
	      }
	    }, _initSnap: function _initSnap() {
	      if (this.scrollerWidth = this.itemLength * this.scrollerWidth, this.maxScrollX = Math.min(this.wrapperWidth - this.scrollerWidth, 0), this._super(), this.currentPage.x) this.slideNumber = this._fixedSlideNumber(), this.lastSlideNumber = "undefined" == typeof this.lastSlideNumber ? this.slideNumber : this.lastSlideNumber;else {
	        var a = this.pages[this.loop ? 1 : 0];if (a = a || this.pages[0], !a) return;this.currentPage = a[0], this.slideNumber = 0, this.lastSlideNumber = "undefined" == typeof this.lastSlideNumber ? 0 : this.lastSlideNumber;
	      }this.options.startX = this.currentPage.x || 0;
	    }, _getSnapX: function _getSnapX(a) {
	      return Math.max(-a, this.maxScrollX);
	    }, _getPage: function _getPage(a, b) {
	      return this.loop ? a > this.itemLength - (b ? 2 : 3) ? (a = 1, time = 0) : (b ? -1 : 0) > a ? (a = this.itemLength - 2, time = 0) : a += 1 : (b || (a > this.itemLength - 1 ? (a = 0, time = 0) : 0 > a && (a = this.itemLength - 1, time = 0)), a = Math.min(Math.max(0, a), this.itemLength - 1)), this.pages[a][0];
	    }, _gotoItem: function _gotoItem(b, c) {
	      this.currentPage = this._getPage(b, !0), this.scrollTo(this.currentPage.x, 0, c, this.options.scrollEasing), 0 === c && a.trigger(this.wrapper, "scrollend", this);
	    }, setTranslate: function setTranslate(a, b) {
	      this._super(a, b);var c = this.progressBar;c && (this.progressBarStyle.webkitTransform = this._getTranslateStr(-a * (this.progressBarWidth / this.wrapperWidth), 0));
	    }, resetPosition: function resetPosition(a) {
	      return a = a || 0, this.x > 0 ? this.x = 0 : this.x < this.maxScrollX && (this.x = this.maxScrollX), this.currentPage = this._nearestSnap(this.x), this.scrollTo(this.currentPage.x, 0, a, this.options.scrollEasing), !0;
	    }, gotoItem: function gotoItem(a, b) {
	      this._gotoItem(a, "undefined" == typeof b ? this.options.scrollTime : b);
	    }, nextItem: function nextItem() {
	      this._gotoItem(this.slideNumber + 1, this.options.scrollTime);
	    }, prevItem: function prevItem() {
	      this._gotoItem(this.slideNumber - 1, this.options.scrollTime);
	    }, getSlideNumber: function getSlideNumber() {
	      return this.slideNumber || 0;
	    }, _reInit: function _reInit() {
	      for (var a = this.wrapper.querySelectorAll("." + d), b = 0, c = a.length; c > b; b++) {
	        if (a[b].parentNode === this.wrapper) {
	          this.scroller = a[b];break;
	        }
	      }this.scrollerStyle = this.scroller && this.scroller.style, this.progressBar && (this.progressBarWidth = this.progressBar.offsetWidth, this.progressBarStyle = this.progressBar.style);
	    }, refresh: function refresh(b) {
	      b ? (a.extend(this.options, b), this._super(), this._initTimer()) : this._super();
	    }, destroy: function destroy() {
	      this._initEvent(!0), delete a.data[this.wrapper.getAttribute("data-slider")], this.wrapper.setAttribute("data-slider", "");
	    } });a.fn.slider = function (b) {
	    var d = null;return this.each(function () {
	      var e = this;if (this.classList.contains(c) || (e = this.querySelector("." + c)), e && e.querySelector(j)) {
	        var f = e.getAttribute("data-slider");f ? (d = a.data[f], d && b && d.refresh(b)) : (f = ++a.uuid, a.data[f] = d = new l(e, b), e.setAttribute("data-slider", f));
	      }
	    }), d;
	  }, a.ready(function () {
	    a(".mui-slider").slider(), a(".mui-scroll-wrapper.mui-slider-indicator.mui-segmented-control").scroll({ scrollY: !1, scrollX: !0, indicators: !1, snap: ".mui-control-item" });
	  });
	}(mui, window), function (a, b) {
	  if (a.os.plus && a.os.android) {
	    var c = "mui-plus-pullrefresh",
	        d = "mui-visibility",
	        e = "mui-hidden",
	        f = "mui-block",
	        g = "mui-pull-caption",
	        h = "mui-pull-caption-down",
	        i = "mui-pull-caption-refresh",
	        j = "mui-pull-caption-nomore",
	        k = a.Class.extend({ init: function init(a, b) {
	        this.element = a, this.options = b, this.wrapper = this.scroller = a, this._init(), this._initPulldownRefreshEvent();
	      }, _init: function _init() {
	        var a = this;window.addEventListener("dragup", a), b.addEventListener("plusscrollbottom", a), a.scrollInterval = window.setInterval(function () {
	          a.isScroll && !a.loading && window.pageYOffset + window.innerHeight + 10 >= b.documentElement.scrollHeight && (a.isScroll = !1, a.bottomPocket && a.pullupLoading());
	        }, 100);
	      }, _initPulldownRefreshEvent: function _initPulldownRefreshEvent() {
	        var b = this;b.topPocket && b.options.webviewId && a.plusReady(function () {
	          var a = plus.webview.getWebviewById(b.options.webviewId);if (a) {
	            b.options.webview = a;var c = b.options.down,
	                d = c.height;a.addEventListener("dragBounce", function (d) {
	              switch (b.pulldown ? b.pullPocket.classList.add(f) : b._initPulldownRefresh(), d.status) {case "beforeChangeOffset":
	                  b._setCaption(c.contentdown);break;case "afterChangeOffset":
	                  b._setCaption(c.contentover);break;case "dragEndAfterChangeOffset":
	                  a.evalJS("mui&&mui.options.pullRefresh.down.callback()"), b._setCaption(c.contentrefresh);}
	            }, !1), a.setBounce({ position: { top: 2 * d + "px" }, changeoffset: { top: d + "px" } });
	          }
	        });
	      }, handleEvent: function handleEvent(a) {
	        var b = this;b.stopped || (b.isScroll = !1, ("dragup" === a.type || "plusscrollbottom" === a.type) && (b.isScroll = !0, setTimeout(function () {
	          b.isScroll = !1;
	        }, 1e3)));
	      } }).extend(a.extend({ setStopped: function setStopped(a) {
	        this.stopped = !!a;var b = plus.webview.currentWebview();if (this.stopped) b.setStyle({ bounce: "none" }), b.setBounce({ position: { top: "none" } });else {
	          var c = this.options.down.height;b.setStyle({ bounce: "vertical" }), b.setBounce({ position: { top: 2 * c + "px" }, changeoffset: { top: c + "px" } });
	        }
	      }, pulldownLoading: function pulldownLoading() {
	        a.plusReady(function () {
	          plus.webview.currentWebview().setBounce({ offset: { top: this.options.down.height + "px" } });
	        }.bind(this));
	      }, endPulldownToRefresh: function endPulldownToRefresh() {
	        var a = plus.webview.currentWebview();a.parent().evalJS("mui&&mui(document.querySelector('.mui-content')).pullRefresh('" + (0, _stringify2.default)({ webviewId: a.id }) + "')._endPulldownToRefresh()");
	      }, _endPulldownToRefresh: function _endPulldownToRefresh() {
	        var a = this;a.topPocket && a.options.webview && (a.options.webview.endPullToRefresh(), a.loading = !1, a._setCaption(a.options.down.contentdown, !0), setTimeout(function () {
	          a.loading || a.topPocket.classList.remove(f);
	        }, 350));
	      }, pullupLoading: function pullupLoading(a) {
	        var b = this;b.isLoading || (b.isLoading = !0, b.pulldown !== !1 ? b._initPullupRefresh() : this.pullPocket.classList.add(f), setTimeout(function () {
	          b.pullLoading.classList.add(d), b.pullLoading.classList.remove(e), b.pullCaption.innerHTML = "", b.pullCaption.className = g + " " + i, b.pullCaption.innerHTML = b.options.up.contentrefresh, a = a || b.options.up.callback, a && a.call(b);
	        }, 300));
	      }, endPullupToRefresh: function endPullupToRefresh(a) {
	        var c = this;c.pullLoading && (c.pullLoading.classList.remove(d), c.pullLoading.classList.add(e), c.isLoading = !1, a ? (c.finished = !0, c.pullCaption.className = g + " " + j, c.pullCaption.innerHTML = c.options.up.contentnomore, b.removeEventListener("plusscrollbottom", c), window.removeEventListener("dragup", c)) : (c.pullCaption.className = g + " " + h, c.pullCaption.innerHTML = c.options.up.contentdown));
	      }, disablePullupToRefresh: function disablePullupToRefresh() {
	        this._initPullupRefresh(), this.bottomPocket.className = "mui-pull-bottom-pocket " + e, window.removeEventListener("dragup", this);
	      }, enablePullupToRefresh: function enablePullupToRefresh() {
	        this._initPullupRefresh(), this.bottomPocket.classList.remove(e), this.pullCaption.className = g + " " + h, this.pullCaption.innerHTML = this.options.up.contentdown, b.addEventListener("plusscrollbottom", this), window.addEventListener("dragup", this);
	      }, scrollTo: function scrollTo(b, c, d) {
	        a.scrollTo(c, d);
	      }, refresh: function refresh(a) {
	        a && this.finished && (this.enablePullupToRefresh(), this.finished = !1);
	      } }, a.PullRefresh));a.fn.pullRefresh = function (d) {
	      var e;0 === this.length ? (e = b.createElement("div"), e.className = "mui-content", b.body.appendChild(e)) : e = this[0], d = d || {}, "string" == typeof d && (d = a.parseJSON(d)), !d.webviewId && (d.webviewId = plus.webview.currentWebview().id || plus.webview.currentWebview().getURL());var f = null,
	          g = d.webviewId && d.webviewId.replace(/\//g, "_"),
	          h = e.getAttribute("data-pullrefresh-plus-" + g);return h ? f = a.data[h] : (h = ++a.uuid, e.setAttribute("data-pullrefresh-plus-" + g, h), b.body.classList.add(c), a.data[h] = f = new k(e, d)), d.down && d.down.auto ? f.pulldownLoading() : d.up && d.up.auto && f.pullupLoading(), f;
	    };
	  }
	}(mui, document), function (a, b, c, d) {
	  var e = "mui-off-canvas-left",
	      f = "mui-off-canvas-right",
	      g = "mui-off-canvas-backdrop",
	      h = "mui-off-canvas-wrap",
	      i = "mui-slide-in",
	      j = "mui-active",
	      k = "mui-transitioning",
	      l = ".mui-inner-wrap",
	      m = a.Class.extend({ init: function init(b, d) {
	      this.wrapper = this.element = b, this.scroller = this.wrapper.querySelector(l), this.classList = this.wrapper.classList, this.scroller && (this.options = a.extend(!0, { dragThresholdX: 10, scale: .8, opacity: .1, preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|VIDEO)$/ } }, d), c.body.classList.add("mui-fullscreen"), this.refresh(), this.initEvent());
	    }, _preventDefaultException: function _preventDefaultException(a, b) {
	      for (var c in b) {
	        if (b[c].test(a[c])) return !0;
	      }return !1;
	    }, refresh: function refresh(a) {
	      this.slideIn = this.classList.contains(i), this.scalable = this.classList.contains("mui-scalable") && !this.slideIn, this.scroller = this.wrapper.querySelector(l), this.offCanvasLefts = this.wrapper.querySelectorAll("." + e), this.offCanvasRights = this.wrapper.querySelectorAll("." + f), a ? a.classList.contains(e) ? this.offCanvasLeft = a : a.classList.contains(f) && (this.offCanvasRight = a) : (this.offCanvasRight = this.wrapper.querySelector("." + f), this.offCanvasLeft = this.wrapper.querySelector("." + e)), this.offCanvasRightWidth = this.offCanvasLeftWidth = 0, this.offCanvasLeftSlideIn = this.offCanvasRightSlideIn = !1, this.offCanvasRight && (this.offCanvasRightWidth = this.offCanvasRight.offsetWidth, this.offCanvasRightSlideIn = this.slideIn && this.offCanvasRight.parentNode === this.wrapper), this.offCanvasLeft && (this.offCanvasLeftWidth = this.offCanvasLeft.offsetWidth, this.offCanvasLeftSlideIn = this.slideIn && this.offCanvasLeft.parentNode === this.wrapper), this.backdrop = this.scroller.querySelector("." + g), this.options.dragThresholdX = this.options.dragThresholdX || 10, this.visible = !1, this.startX = null, this.lastX = null, this.offsetX = null, this.lastTranslateX = null;
	    }, handleEvent: function handleEvent(b) {
	      switch (b.type) {case a.EVENT_START:
	          b.target && !this._preventDefaultException(b.target, this.options.preventDefaultException) && b.preventDefault();break;case "webkitTransitionEnd":
	          b.target === this.scroller && this._dispatchEvent();break;case "drag":
	          var c = b.detail;this.startX ? this.lastX = c.center.x : (this.startX = c.center.x, this.lastX = this.startX), !this.isDragging && Math.abs(this.lastX - this.startX) > this.options.dragThresholdX && ("left" === c.direction || "right" === c.direction) && (this.slideIn ? (this.scroller = this.wrapper.querySelector(l), this.classList.contains(j) ? this.offCanvasRight && this.offCanvasRight.classList.contains(j) ? (this.offCanvas = this.offCanvasRight, this.offCanvasWidth = this.offCanvasRightWidth) : (this.offCanvas = this.offCanvasLeft, this.offCanvasWidth = this.offCanvasLeftWidth) : "left" === c.direction && this.offCanvasRight ? (this.offCanvas = this.offCanvasRight, this.offCanvasWidth = this.offCanvasRightWidth) : "right" === c.direction && this.offCanvasLeft ? (this.offCanvas = this.offCanvasLeft, this.offCanvasWidth = this.offCanvasLeftWidth) : this.scroller = null) : this.classList.contains(j) ? "left" === c.direction ? (this.offCanvas = this.offCanvasLeft, this.offCanvasWidth = this.offCanvasLeftWidth) : (this.offCanvas = this.offCanvasRight, this.offCanvasWidth = this.offCanvasRightWidth) : "right" === c.direction ? (this.offCanvas = this.offCanvasLeft, this.offCanvasWidth = this.offCanvasLeftWidth) : (this.offCanvas = this.offCanvasRight, this.offCanvasWidth = this.offCanvasRightWidth), this.offCanvas && this.scroller && (this.startX = this.lastX, this.isDragging = !0, a.gestures.session.lockDirection = !0, a.gestures.session.startDirection = c.direction, this.offCanvas.classList.remove(k), this.scroller.classList.remove(k), this.offsetX = this.getTranslateX(), this._initOffCanvasVisible())), this.isDragging && (this.updateTranslate(this.offsetX + (this.lastX - this.startX)), c.gesture.preventDefault(), b.stopPropagation());break;case "dragend":
	          if (this.isDragging) {
	            var c = b.detail,
	                d = c.direction;this.isDragging = !1, this.offCanvas.classList.add(k), this.scroller.classList.add(k);var e = 0,
	                f = this.getTranslateX();if (this.slideIn) {
	              if (e = f >= 0 ? this.offCanvasRightWidth && f / this.offCanvasRightWidth || 0 : this.offCanvasLeftWidth && f / this.offCanvasLeftWidth || 0, "right" === d && 0 >= e && (e >= -.5 || c.swipe) ? this.openPercentage(100) : "right" === d && e > 0 && (e >= .5 || c.swipe) ? this.openPercentage(0) : "right" === d && -.5 >= e ? this.openPercentage(0) : "right" === d && e > 0 && .5 >= e ? this.openPercentage(-100) : "left" === d && e >= 0 && (.5 >= e || c.swipe) ? this.openPercentage(-100) : "left" === d && 0 > e && (-.5 >= e || c.swipe) ? this.openPercentage(0) : "left" === d && e >= .5 ? this.openPercentage(0) : "left" === d && e >= -.5 && 0 > e ? this.openPercentage(100) : this.openPercentage(0), 1 === e || -1 === e || 0 === e) return void this._dispatchEvent();
	            } else {
	              if (e = f >= 0 ? this.offCanvasLeftWidth && f / this.offCanvasLeftWidth || 0 : this.offCanvasRightWidth && f / this.offCanvasRightWidth || 0, 0 === e) return this.openPercentage(0), void this._dispatchEvent();"right" === d && e >= 0 && (e >= .5 || c.swipe) ? this.openPercentage(100) : "right" === d && 0 > e && (e > -.5 || c.swipe) ? this.openPercentage(0) : "right" === d && e > 0 && .5 > e ? this.openPercentage(0) : "right" === d && .5 > e ? this.openPercentage(-100) : "left" === d && 0 >= e && (-.5 >= e || c.swipe) ? this.openPercentage(-100) : "left" === d && e > 0 && (.5 >= e || c.swipe) ? this.openPercentage(0) : "left" === d && 0 > e && e >= -.5 ? this.openPercentage(0) : "left" === d && e > .5 ? this.openPercentage(100) : this.openPercentage(0), (1 === e || -1 === e) && this._dispatchEvent();
	            }
	          }}
	    }, _dispatchEvent: function _dispatchEvent() {
	      this.classList.contains(j) ? a.trigger(this.wrapper, "shown", this) : a.trigger(this.wrapper, "hidden", this);
	    }, _initOffCanvasVisible: function _initOffCanvasVisible() {
	      this.visible || (this.visible = !0, this.offCanvasLeft && (this.offCanvasLeft.style.visibility = "visible"), this.offCanvasRight && (this.offCanvasRight.style.visibility = "visible"));
	    }, initEvent: function initEvent() {
	      var b = this;b.backdrop && b.backdrop.addEventListener("tap", function (a) {
	        b.close(), a.detail.gesture.preventDefault();
	      }), this.classList.contains("mui-draggable") && (this.wrapper.addEventListener(a.EVENT_START, this), this.wrapper.addEventListener("drag", this), this.wrapper.addEventListener("dragend", this)), this.wrapper.addEventListener("webkitTransitionEnd", this);
	    }, openPercentage: function openPercentage(a) {
	      var b = a / 100;this.slideIn ? (this.offCanvasLeft && a >= 0 ? (b = 0 === b ? -1 : 0, this.updateTranslate(this.offCanvasLeftWidth * b), this.offCanvasLeft.classList[0 !== a ? "add" : "remove"](j)) : this.offCanvasRight && 0 >= a && (b = 0 === b ? 1 : 0, this.updateTranslate(this.offCanvasRightWidth * b), this.offCanvasRight.classList[0 !== a ? "add" : "remove"](j)), this.classList[0 !== a ? "add" : "remove"](j)) : (this.offCanvasLeft && a >= 0 ? (this.updateTranslate(this.offCanvasLeftWidth * b), this.offCanvasLeft.classList[0 !== b ? "add" : "remove"](j)) : this.offCanvasRight && 0 >= a && (this.updateTranslate(this.offCanvasRightWidth * b), this.offCanvasRight.classList[0 !== b ? "add" : "remove"](j)), this.classList[0 !== b ? "add" : "remove"](j));
	    }, updateTranslate: function updateTranslate(b) {
	      if (b !== this.lastTranslateX) {
	        if (this.slideIn) {
	          if (this.offCanvas.classList.contains(f)) {
	            if (0 > b) return void this.setTranslateX(0);if (b > this.offCanvasRightWidth) return void this.setTranslateX(this.offCanvasRightWidth);
	          } else {
	            if (b > 0) return void this.setTranslateX(0);if (b < -this.offCanvasLeftWidth) return void this.setTranslateX(-this.offCanvasLeftWidth);
	          }this.setTranslateX(b);
	        } else {
	          if (!this.offCanvasLeft && b > 0 || !this.offCanvasRight && 0 > b) return void this.setTranslateX(0);if (this.leftShowing && b > this.offCanvasLeftWidth) return void this.setTranslateX(this.offCanvasLeftWidth);if (this.rightShowing && b < -this.offCanvasRightWidth) return void this.setTranslateX(-this.offCanvasRightWidth);this.setTranslateX(b), b >= 0 ? (this.leftShowing = !0, this.rightShowing = !1, b > 0 && (this.offCanvasLeft && a.each(this.offCanvasLefts, function (a, b) {
	            b === this.offCanvasLeft ? this.offCanvasLeft.style.zIndex = 0 : b.style.zIndex = -1;
	          }.bind(this)), this.offCanvasRight && (this.offCanvasRight.style.zIndex = -1))) : (this.rightShowing = !0, this.leftShowing = !1, this.offCanvasRight && a.each(this.offCanvasRights, function (a, b) {
	            b === this.offCanvasRight ? b.style.zIndex = 0 : b.style.zIndex = -1;
	          }.bind(this)), this.offCanvasLeft && (this.offCanvasLeft.style.zIndex = -1));
	        }this.lastTranslateX = b;
	      }
	    }, setTranslateX: a.animationFrame(function (a) {
	      if (this.scroller) if (this.scalable && this.offCanvas.parentNode === this.wrapper) {
	        var b = Math.abs(a) / this.offCanvasWidth,
	            c = 1 - (1 - this.options.scale) * b,
	            d = this.options.scale + (1 - this.options.scale) * b,
	            f = (1 - (1 - this.options.opacity) * b, this.options.opacity + (1 - this.options.opacity) * b);this.offCanvas.classList.contains(e) ? (this.offCanvas.style.webkitTransformOrigin = "-100%", this.scroller.style.webkitTransformOrigin = "left") : (this.offCanvas.style.webkitTransformOrigin = "200%", this.scroller.style.webkitTransformOrigin = "right"), this.offCanvas.style.opacity = f, this.offCanvas.style.webkitTransform = "translate3d(0,0,0) scale(" + d + ")", this.scroller.style.webkitTransform = "translate3d(" + a + "px,0,0) scale(" + c + ")";
	      } else this.slideIn ? this.offCanvas.style.webkitTransform = "translate3d(" + a + "px,0,0)" : this.scroller.style.webkitTransform = "translate3d(" + a + "px,0,0)";
	    }), getTranslateX: function getTranslateX() {
	      if (this.offCanvas) {
	        var b = this.slideIn ? this.offCanvas : this.scroller,
	            c = a.parseTranslateMatrix(a.getStyles(b, "webkitTransform"));return c && c.x || 0;
	      }return 0;
	    }, isShown: function isShown(a) {
	      var b = !1;if (this.slideIn) b = "left" === a ? this.classList.contains(j) && this.wrapper.querySelector("." + e + "." + j) : "right" === a ? this.classList.contains(j) && this.wrapper.querySelector("." + f + "." + j) : this.classList.contains(j) && (this.wrapper.querySelector("." + e + "." + j) || this.wrapper.querySelector("." + f + "." + j));else {
	        var c = this.getTranslateX();b = "right" === a ? this.classList.contains(j) && 0 > c : "left" === a ? this.classList.contains(j) && c > 0 : this.classList.contains(j) && 0 !== c;
	      }return b;
	    }, close: function close() {
	      this._initOffCanvasVisible(), this.offCanvas = this.wrapper.querySelector("." + f + "." + j) || this.wrapper.querySelector("." + e + "." + j), this.offCanvasWidth = this.offCanvas.offsetWidth, this.scroller && (this.offCanvas.offsetHeight, this.offCanvas.classList.add(k), this.scroller.classList.add(k), this.openPercentage(0));
	    }, show: function show(a) {
	      return this._initOffCanvasVisible(), this.isShown(a) ? !1 : (a || (a = this.wrapper.querySelector("." + f) ? "right" : "left"), "right" === a ? (this.offCanvas = this.offCanvasRight, this.offCanvasWidth = this.offCanvasRightWidth) : (this.offCanvas = this.offCanvasLeft, this.offCanvasWidth = this.offCanvasLeftWidth), this.scroller && (this.offCanvas.offsetHeight, this.offCanvas.classList.add(k), this.scroller.classList.add(k), this.openPercentage("left" === a ? 100 : -100)), !0);
	    }, toggle: function toggle(a) {
	      var b = a;a && a.classList && (b = a.classList.contains(e) ? "left" : "right", this.refresh(a)), this.show(b) || this.close();
	    } }),
	      n = function n(a) {
	    if (parentNode = a.parentNode, parentNode) {
	      if (parentNode.classList.contains(h)) return parentNode;if (parentNode = parentNode.parentNode, parentNode.classList.contains(h)) return parentNode;
	    }
	  },
	      o = function o(b, d) {
	    if ("A" === d.tagName && d.hash) {
	      var e = c.getElementById(d.hash.replace("#", ""));if (e) {
	        var f = n(e);if (f) return a.targets._container = f, e;
	      }
	    }return !1;
	  };a.registerTarget({ name: d, index: 60, handle: o, target: !1, isReset: !1, isContinue: !0 }), b.addEventListener("tap", function (b) {
	    if (a.targets.offcanvas) for (var d = b.target; d && d !== c; d = d.parentNode) {
	      if ("A" === d.tagName && d.hash && d.hash === "#" + a.targets.offcanvas.id) {
	        b.detail && b.detail.gesture && b.detail.gesture.preventDefault(), a(a.targets._container).offCanvas().toggle(a.targets.offcanvas), a.targets.offcanvas = a.targets._container = null;break;
	      }
	    }
	  }), a.fn.offCanvas = function (b) {
	    var c = [];return this.each(function () {
	      var d = null,
	          e = this;e.classList.contains(h) || (e = n(e));var f = e.getAttribute("data-offCanvas");f ? d = a.data[f] : (f = ++a.uuid, a.data[f] = d = new m(e, b), e.setAttribute("data-offCanvas", f)), ("show" === b || "close" === b || "toggle" === b) && d.toggle(), c.push(d);
	    }), 1 === c.length ? c[0] : c;
	  }, a.ready(function () {
	    a(".mui-off-canvas-wrap").offCanvas();
	  });
	}(mui, window, document, "offcanvas"), function (a, b) {
	  var c = "mui-action",
	      d = function d(a, b) {
	    var d = b.className || "";return "string" != typeof d && (d = ""), d && ~d.indexOf(c) ? (b.classList.contains("mui-action-back") && a.preventDefault(), b) : !1;
	  };a.registerTarget({ name: b, index: 50, handle: d, target: !1, isContinue: !0 });
	}(mui, "action"), function (a, b, c, d) {
	  var e = "mui-modal",
	      f = function f(a, b) {
	    if ("A" === b.tagName && b.hash) {
	      var d = c.getElementById(b.hash.replace("#", ""));if (d && d.classList.contains(e)) return d;
	    }return !1;
	  };a.registerTarget({ name: d, index: 50, handle: f, target: !1, isReset: !1, isContinue: !0 }), b.addEventListener("tap", function (b) {
	    a.targets.modal && (b.detail.gesture.preventDefault(), a.targets.modal.classList.toggle("mui-active"));
	  });
	}(mui, window, document, "modal"), function (a, b, c, d) {
	  var e = "mui-popover",
	      f = "mui-popover-arrow",
	      g = "mui-popover-action",
	      h = "mui-backdrop",
	      i = "mui-bar-popover",
	      j = "mui-bar-backdrop",
	      k = "mui-backdrop-action",
	      l = "mui-active",
	      m = "mui-bottom",
	      n = function n(b, d) {
	    if ("A" === d.tagName && d.hash) {
	      if (a.targets._popover = c.getElementById(d.hash.replace("#", "")), a.targets._popover && a.targets._popover.classList.contains(e)) return d;a.targets._popover = null;
	    }return !1;
	  };a.registerTarget({ name: d, index: 60, handle: n, target: !1, isReset: !1, isContinue: !0 });var o,
	      p = function p(a) {},
	      q = function q(b) {
	    this.removeEventListener("webkitTransitionEnd", q), this.addEventListener(a.EVENT_MOVE, a.preventDefault), a.trigger(this, "shown", this);
	  },
	      r = function r(b) {
	    v(this, "none"), this.removeEventListener("webkitTransitionEnd", r), this.removeEventListener(a.EVENT_MOVE, a.preventDefault), p(!1), a.trigger(this, "hidden", this);
	  },
	      s = function () {
	    var b = c.createElement("div");return b.classList.add(h), b.addEventListener(a.EVENT_MOVE, a.preventDefault), b.addEventListener("tap", function (b) {
	      var d = a.targets._popover;d && (d.addEventListener("webkitTransitionEnd", r), d.classList.remove(l), t(d), c.body.setAttribute("style", ""));
	    }), b;
	  }(),
	      t = function t(b) {
	    s.setAttribute("style", "opacity:0"), a.targets.popover = a.targets._popover = null, o = a.later(function () {
	      !b.classList.contains(l) && s.parentNode && s.parentNode === c.body && c.body.removeChild(s);
	    }, 350);
	  };b.addEventListener("tap", function (b) {
	    if (a.targets.popover) {
	      for (var d = !1, e = b.target; e && e !== c; e = e.parentNode) {
	        e === a.targets.popover && (d = !0);
	      }d && (b.detail.gesture.preventDefault(), u(a.targets._popover, a.targets.popover));
	    }
	  });var u = function u(a, b, d) {
	    if (!("show" === d && a.classList.contains(l) || "hide" === d && !a.classList.contains(l))) {
	      o && o.cancel(), a.removeEventListener("webkitTransitionEnd", q), a.removeEventListener("webkitTransitionEnd", r), s.classList.remove(j), s.classList.remove(k);var e = c.querySelector(".mui-popover.mui-active");if (e && (e.addEventListener("webkitTransitionEnd", r), e.classList.remove(l), a === e)) return void t(e);var f = !1;(a.classList.contains(i) || a.classList.contains(g)) && (a.classList.contains(g) ? (f = !0, s.classList.add(k)) : s.classList.add(j)), v(a, "block"), a.offsetHeight, a.classList.add(l), s.setAttribute("style", ""), c.body.appendChild(s), p(!0), w(a, b, f), s.classList.add(l), a.addEventListener("webkitTransitionEnd", q);
	    }
	  },
	      v = function v(a, b, c, d) {
	    var e = a.style;"undefined" != typeof b && (e.display = b), "undefined" != typeof c && (e.top = c + "px"), "undefined" != typeof d && (e.left = d + "px");
	  },
	      w = function w(d, e, h) {
	    if (d && e) {
	      if (h) return void v(d, "block");var i = b.innerWidth,
	          j = b.innerHeight,
	          k = d.offsetWidth,
	          l = d.offsetHeight,
	          n = e.offsetWidth,
	          o = e.offsetHeight,
	          p = a.offset(e),
	          q = d.querySelector("." + f);q || (q = c.createElement("div"), q.className = f, d.appendChild(q));var r = q && q.offsetWidth / 2 || 0,
	          s = 0,
	          t = 0,
	          u = 0,
	          w = 0,
	          x = d.classList.contains(g) ? 0 : 5,
	          y = "top";l + r < p.top - b.pageYOffset ? s = p.top - l - r : l + r < j - (p.top - b.pageYOffset) - o ? (y = "bottom", s = p.top + o + r) : (y = "middle", s = Math.max((j - l) / 2 + b.pageYOffset, 0), t = Math.max((i - k) / 2 + b.pageXOffset, 0)), "top" === y || "bottom" === y ? (t = n / 2 + p.left - k / 2, u = t, x > t && (t = x), t + k > i && (t = i - k - x), q && ("top" === y ? q.classList.add(m) : q.classList.remove(m), u -= t, w = k / 2 - r / 2 + u, w = Math.max(Math.min(w, k - 2 * r - 6), 6), q.setAttribute("style", "left:" + w + "px"))) : "middle" === y && q.setAttribute("style", "display:none"), v(d, "block", s, t);
	    }
	  };a.createMask = function (b) {
	    var d = c.createElement("div");d.classList.add(h), d.addEventListener(a.EVENT_MOVE, a.preventDefault), d.addEventListener("tap", function () {
	      e.close();
	    });var e = [d];return e._show = !1, e.show = function () {
	      return e._show = !0, d.setAttribute("style", "opacity:1"), c.body.appendChild(d), e;
	    }, e._remove = function () {
	      return e._show && (e._show = !1, d.setAttribute("style", "opacity:0"), a.later(function () {
	        var a = c.body;d.parentNode === a && a.removeChild(d);
	      }, 350)), e;
	    }, e.close = function () {
	      b ? b() !== !1 && e._remove() : e._remove();
	    }, e;
	  }, a.fn.popover = function () {
	    var b = arguments;this.each(function () {
	      a.targets._popover = this, ("show" === b[0] || "hide" === b[0] || "toggle" === b[0]) && u(this, b[1], b[0]);
	    });
	  };
	}(mui, window, document, "popover"), function (a, b, c, d, e) {
	  var f = "mui-control-item",
	      g = "mui-segmented-control",
	      h = "mui-segmented-control-vertical",
	      i = "mui-control-content",
	      j = "mui-bar-tab",
	      k = "mui-tab-item",
	      l = function l(a, b) {
	    return b.classList && (b.classList.contains(f) || b.classList.contains(k)) ? (b.parentNode && b.parentNode.classList && b.parentNode.classList.contains(h) || a.preventDefault(), b) : !1;
	  };a.registerTarget({ name: d, index: 80, handle: l, target: !1 }), b.addEventListener("tap", function (b) {
	    var e = a.targets.tab;if (e) {
	      for (var h, l, m, n = "mui-active", o = "." + n, p = e.parentNode; p && p !== c; p = p.parentNode) {
	        if (p.classList.contains(g)) {
	          h = p.querySelector(o + "." + f);break;
	        }p.classList.contains(j) && (h = p.querySelector(o + "." + k));
	      }h && h.classList.remove(n);var q = e === h;if (e && e.classList.add(n), e.hash && (m = c.getElementById(e.hash.replace("#", "")))) {
	        if (!m.classList.contains(i)) return void e.classList[q ? "remove" : "add"](n);if (!q) {
	          var r = m.parentNode;l = r.querySelectorAll("." + i + o);for (var s = 0; s < l.length; s++) {
	            var t = l[s];t.parentNode === r && t.classList.remove(n);
	          }m.classList.add(n);for (var u = [], v = r.querySelectorAll("." + i), s = 0; s < v.length; s++) {
	            v[s].parentNode === r && u.push(v[s]);
	          }a.trigger(m, a.eventName("shown", d), { tabNumber: Array.prototype.indexOf.call(u, m) }), b.detail && b.detail.gesture.preventDefault();
	        }
	      }
	    }
	  });
	}(mui, window, document, "tab"), function (a, b, c) {
	  var d = "mui-switch",
	      e = "mui-switch-handle",
	      f = "mui-active",
	      g = "mui-dragging",
	      h = "mui-disabled",
	      i = "." + e,
	      j = function j(a, b) {
	    return b.classList && b.classList.contains(d) ? b : !1;
	  };a.registerTarget({ name: c, index: 100, handle: j, target: !1 });var k = function k(a) {
	    this.element = a, this.classList = this.element.classList, this.handle = this.element.querySelector(i), this.init(), this.initEvent();
	  };k.prototype.init = function () {
	    this.toggleWidth = this.element.offsetWidth, this.handleWidth = this.handle.offsetWidth, this.handleX = this.toggleWidth - this.handleWidth - 3;
	  }, k.prototype.initEvent = function () {
	    this.element.addEventListener(a.EVENT_START, this), this.element.addEventListener("drag", this), this.element.addEventListener("swiperight", this), this.element.addEventListener(a.EVENT_END, this), this.element.addEventListener(a.EVENT_CANCEL, this);
	  }, k.prototype.handleEvent = function (b) {
	    if (!this.classList.contains(h)) switch (b.type) {case a.EVENT_START:
	        this.start(b);break;case "drag":
	        this.drag(b);break;case "swiperight":
	        this.swiperight();break;case a.EVENT_END:case a.EVENT_CANCEL:
	        this.end(b);}
	  }, k.prototype.start = function (a) {
	    this.handle.style.webkitTransitionDuration = this.element.style.webkitTransitionDuration = ".2s", this.classList.add(g), (0 === this.toggleWidth || 0 === this.handleWidth) && this.init();
	  }, k.prototype.drag = function (a) {
	    var b = a.detail;this.isDragging || ("left" === b.direction || "right" === b.direction) && (this.isDragging = !0, this.lastChanged = void 0, this.initialState = this.classList.contains(f)), this.isDragging && (this.setTranslateX(b.deltaX), a.stopPropagation(), b.gesture.preventDefault());
	  }, k.prototype.swiperight = function (a) {
	    this.isDragging && a.stopPropagation();
	  }, k.prototype.end = function (b) {
	    this.classList.remove(g), this.isDragging ? (this.isDragging = !1, b.stopPropagation(), a.trigger(this.element, "toggle", { isActive: this.classList.contains(f) })) : this.toggle();
	  }, k.prototype.toggle = function (b) {
	    var c = this.classList;b === !1 ? this.handle.style.webkitTransitionDuration = this.element.style.webkitTransitionDuration = "0s" : this.handle.style.webkitTransitionDuration = this.element.style.webkitTransitionDuration = ".2s", c.contains(f) ? (c.remove(f), this.handle.style.webkitTransform = "translate(0,0)") : (c.add(f), this.handle.style.webkitTransform = "translate(" + this.handleX + "px,0)"), a.trigger(this.element, "toggle", { isActive: this.classList.contains(f) });
	  }, k.prototype.setTranslateX = a.animationFrame(function (a) {
	    if (this.isDragging) {
	      var b = !1;(this.initialState && -a > this.handleX / 2 || !this.initialState && a > this.handleX / 2) && (b = !0), this.lastChanged !== b && (b ? (this.handle.style.webkitTransform = "translate(" + (this.initialState ? 0 : this.handleX) + "px,0)", this.classList[this.initialState ? "remove" : "add"](f)) : (this.handle.style.webkitTransform = "translate(" + (this.initialState ? this.handleX : 0) + "px,0)", this.classList[this.initialState ? "add" : "remove"](f)), this.lastChanged = b);
	    }
	  }), a.fn["switch"] = function (b) {
	    var c = [];return this.each(function () {
	      var b = null,
	          d = this.getAttribute("data-switch");d ? b = a.data[d] : (d = ++a.uuid, a.data[d] = new k(this), this.setAttribute("data-switch", d)), c.push(b);
	    }), c.length > 1 ? c : c[0];
	  }, a.ready(function () {
	    a("." + d)["switch"]();
	  });
	}(mui, window, "toggle"), function (a, b, c) {
	  function d(a, b) {
	    var c = b ? "removeEventListener" : "addEventListener";a[c]("drag", F), a[c]("dragend", F), a[c]("swiperight", F), a[c]("swipeleft", F), a[c]("flick", F);
	  }var e,
	      f,
	      g = "mui-active",
	      h = "mui-selected",
	      i = "mui-grid-view",
	      j = "mui-table-view-radio",
	      k = "mui-table-view-cell",
	      l = "mui-collapse-content",
	      m = "mui-disabled",
	      n = "mui-switch",
	      o = "mui-btn",
	      p = "mui-slider-handle",
	      q = "mui-slider-left",
	      r = "mui-slider-right",
	      s = "mui-transitioning",
	      t = "." + p,
	      u = "." + q,
	      v = "." + r,
	      w = "." + h,
	      x = "." + o,
	      y = .8,
	      z = isOpened = openedActions = progress = !1,
	      A = sliderActionLeft = sliderActionRight = buttonsLeft = buttonsRight = sliderDirection = sliderRequestAnimationFrame = !1,
	      B = translateX = lastTranslateX = sliderActionLeftWidth = sliderActionRightWidth = 0,
	      C = function C(a) {
	    a ? f ? f.classList.add(g) : e && e.classList.add(g) : (B && B.cancel(), f ? f.classList.remove(g) : e && e.classList.remove(g));
	  },
	      D = function D() {
	    if (translateX !== lastTranslateX) {
	      if (buttonsRight && buttonsRight.length > 0) {
	        progress = translateX / sliderActionRightWidth, translateX < -sliderActionRightWidth && (translateX = -sliderActionRightWidth - Math.pow(-translateX - sliderActionRightWidth, y));for (var a = 0, b = buttonsRight.length; b > a; a++) {
	          var c = buttonsRight[a];"undefined" == typeof c._buttonOffset && (c._buttonOffset = c.offsetLeft), buttonOffset = c._buttonOffset, E(c, translateX - buttonOffset * (1 + Math.max(progress, -1)));
	        }
	      }if (buttonsLeft && buttonsLeft.length > 0) {
	        progress = translateX / sliderActionLeftWidth, translateX > sliderActionLeftWidth && (translateX = sliderActionLeftWidth + Math.pow(translateX - sliderActionLeftWidth, y));for (var a = 0, b = buttonsLeft.length; b > a; a++) {
	          var d = buttonsLeft[a];"undefined" == typeof d._buttonOffset && (d._buttonOffset = sliderActionLeftWidth - d.offsetLeft - d.offsetWidth), buttonOffset = d._buttonOffset, buttonsLeft.length > 1 && (d.style.zIndex = buttonsLeft.length - a), E(d, translateX + buttonOffset * (1 - Math.min(progress, 1)));
	        }
	      }E(A, translateX), lastTranslateX = translateX;
	    }sliderRequestAnimationFrame = requestAnimationFrame(function () {
	      D();
	    });
	  },
	      E = function E(a, b) {
	    a && (a.style.webkitTransform = "translate(" + b + "px,0)");
	  };b.addEventListener(a.EVENT_START, function (b) {
	    e && C(!1), e = f = !1, z = isOpened = openedActions = !1;for (var g = b.target, h = !1; g && g !== c; g = g.parentNode) {
	      if (g.classList) {
	        var p = g.classList;if (("INPUT" === g.tagName && "radio" !== g.type && "checkbox" !== g.type || "BUTTON" === g.tagName || p.contains(n) || p.contains(o) || p.contains(m)) && (h = !0), p.contains(l)) break;if (p.contains(k)) {
	          e = g;var q = e.parentNode.querySelector(w);if (!e.parentNode.classList.contains(j) && q && q !== e) return a.swipeoutClose(q), void (e = h = !1);if (!e.parentNode.classList.contains(i)) {
	            var r = e.querySelector("a");r && r.parentNode === e && (f = r);
	          }var s = e.querySelector(t);s && (d(e), b.stopPropagation()), h || (s ? (B && B.cancel(), B = a.later(function () {
	            C(!0);
	          }, 100)) : C(!0));break;
	        }
	      }
	    }
	  }), b.addEventListener(a.EVENT_MOVE, function (a) {
	    C(!1);
	  });var F = { handleEvent: function handleEvent(a) {
	      switch (a.type) {case "drag":
	          this.drag(a);break;case "dragend":
	          this.dragend(a);break;case "flick":
	          this.flick(a);break;case "swiperight":
	          this.swiperight(a);break;case "swipeleft":
	          this.swipeleft(a);}
	    }, drag: function drag(a) {
	      if (e) {
	        z || (A = sliderActionLeft = sliderActionRight = buttonsLeft = buttonsRight = sliderDirection = sliderRequestAnimationFrame = !1, A = e.querySelector(t), A && (sliderActionLeft = e.querySelector(u), sliderActionRight = e.querySelector(v), sliderActionLeft && (sliderActionLeftWidth = sliderActionLeft.offsetWidth, buttonsLeft = sliderActionLeft.querySelectorAll(x)), sliderActionRight && (sliderActionRightWidth = sliderActionRight.offsetWidth, buttonsRight = sliderActionRight.querySelectorAll(x)), e.classList.remove(s), isOpened = e.classList.contains(h), isOpened && (openedActions = e.querySelector(u + w) ? "left" : "right")));
	        var b = a.detail,
	            c = b.direction,
	            d = b.angle;if ("left" === c && (d > 150 || -150 > d) ? (buttonsRight || buttonsLeft && isOpened) && (z = !0) : "right" === c && d > -30 && 30 > d && (buttonsLeft || buttonsRight && isOpened) && (z = !0), z) {
	          a.stopPropagation(), a.detail.gesture.preventDefault();var f = a.detail.deltaX;if (isOpened && ("right" === openedActions ? f -= sliderActionRightWidth : f += sliderActionLeftWidth), f > 0 && !buttonsLeft || 0 > f && !buttonsRight) {
	            if (!isOpened) return;f = 0;
	          }0 > f ? sliderDirection = "toLeft" : f > 0 ? sliderDirection = "toRight" : sliderDirection || (sliderDirection = "toLeft"), sliderRequestAnimationFrame || D(), translateX = f;
	        }
	      }
	    }, flick: function flick(a) {
	      z && a.stopPropagation();
	    }, swipeleft: function swipeleft(a) {
	      z && a.stopPropagation();
	    }, swiperight: function swiperight(a) {
	      z && a.stopPropagation();
	    }, dragend: function dragend(b) {
	      if (z) {
	        b.stopPropagation(), sliderRequestAnimationFrame && (cancelAnimationFrame(sliderRequestAnimationFrame), sliderRequestAnimationFrame = null);var c = b.detail;z = !1;var d = "close",
	            f = "toLeft" === sliderDirection ? sliderActionRightWidth : sliderActionLeftWidth,
	            g = c.swipe || Math.abs(translateX) > f / 2;g && (isOpened ? "left" === c.direction && "right" === openedActions ? d = "open" : "right" === c.direction && "left" === openedActions && (d = "open") : d = "open"), e.classList.add(s);var i;if ("open" === d) {
	          var j = "toLeft" === sliderDirection ? -f : f;if (E(A, j), i = "toLeft" === sliderDirection ? buttonsRight : buttonsLeft, "undefined" != typeof i) {
	            for (var k = null, l = 0; l < i.length; l++) {
	              k = i[l], E(k, j);
	            }k.parentNode.classList.add(h), e.classList.add(h), isOpened || a.trigger(e, "toLeft" === sliderDirection ? "slideleft" : "slideright");
	          }
	        } else E(A, 0), sliderActionLeft && sliderActionLeft.classList.remove(h), sliderActionRight && sliderActionRight.classList.remove(h), e.classList.remove(h);var m;if (buttonsLeft && buttonsLeft.length > 0 && buttonsLeft !== i) for (var l = 0, n = buttonsLeft.length; n > l; l++) {
	          var o = buttonsLeft[l];m = o._buttonOffset, "undefined" == typeof m && (o._buttonOffset = sliderActionLeftWidth - o.offsetLeft - o.offsetWidth), E(o, m);
	        }if (buttonsRight && buttonsRight.length > 0 && buttonsRight !== i) for (var l = 0, n = buttonsRight.length; n > l; l++) {
	          var p = buttonsRight[l];m = p._buttonOffset, "undefined" == typeof m && (p._buttonOffset = p.offsetLeft), E(p, -m);
	        }
	      }
	    } };a.swipeoutOpen = function (b, c) {
	    if (b) {
	      var d = b.classList;if (!d.contains(h)) {
	        c || (c = b.querySelector(v) ? "right" : "left");var e = b.querySelector(a.classSelector(".slider-" + c));if (e) {
	          e.classList.add(h), d.add(h), d.remove(s);for (var f, g = e.querySelectorAll(x), i = e.offsetWidth, j = "right" === c ? -i : i, k = g.length, l = 0; k > l; l++) {
	            f = g[l], "right" === c ? E(f, -f.offsetLeft) : E(f, i - f.offsetWidth - f.offsetLeft);
	          }d.add(s);for (var l = 0; k > l; l++) {
	            E(g[l], j);
	          }E(b.querySelector(t), j);
	        }
	      }
	    }
	  }, a.swipeoutClose = function (b) {
	    if (b) {
	      var c = b.classList;if (c.contains(h)) {
	        var d = b.querySelector(v + w) ? "right" : "left",
	            e = b.querySelector(a.classSelector(".slider-" + d));if (e) {
	          e.classList.remove(h), c.remove(h), c.add(s);var f,
	              g = e.querySelectorAll(x),
	              i = e.offsetWidth,
	              j = g.length;E(b.querySelector(t), 0);for (var k = 0; j > k; k++) {
	            f = g[k], "right" === d ? E(f, -f.offsetLeft) : E(f, i - f.offsetWidth - f.offsetLeft);
	          }
	        }
	      }
	    }
	  }, b.addEventListener(a.EVENT_END, function (a) {
	    e && (C(!1), A && d(e, !0));
	  }), b.addEventListener(a.EVENT_CANCEL, function (a) {
	    e && (C(!1), A && d(e, !0));
	  });var G = function G(b) {
	    var c = b.target && b.target.type || "";if ("radio" !== c && "checkbox" !== c) {
	      var d = e.classList;if (d.contains("mui-radio")) {
	        var f = e.querySelector("input[type=radio]");f && (f.disabled || f.readOnly || (f.checked = !f.checked, a.trigger(f, "change")));
	      } else if (d.contains("mui-checkbox")) {
	        var f = e.querySelector("input[type=checkbox]");f && (f.disabled || f.readOnly || (f.checked = !f.checked, a.trigger(f, "change")));
	      }
	    }
	  };b.addEventListener(a.EVENT_CLICK, function (a) {
	    e && e.classList.contains("mui-collapse") && a.preventDefault();
	  }), b.addEventListener("doubletap", function (a) {
	    e && G(a);
	  });var H = /^(INPUT|TEXTAREA|BUTTON|SELECT)$/;b.addEventListener("tap", function (b) {
	    if (e) {
	      var c = !1,
	          d = e.classList,
	          f = e.parentNode;if (f && f.classList.contains(j)) {
	        if (d.contains(h)) return;var i = f.querySelector("li" + w);return i && i.classList.remove(h), d.add(h), void a.trigger(e, "selected", { el: e });
	      }if (d.contains("mui-collapse") && !e.parentNode.classList.contains("mui-unfold")) {
	        if (H.test(b.target.tagName) || b.detail.gesture.preventDefault(), !d.contains(g)) {
	          var k = e.parentNode.querySelector(".mui-collapse.mui-active");k && k.classList.remove(g), c = !0;
	        }d.toggle(g), c && a.trigger(e, "expand");
	      } else G(b);
	    }
	  });
	}(mui, window, document), function (a, b) {
	  a.alert = function (c, d, e, f) {
	    if (a.os.plus) {
	      if ("undefined" == typeof c) return;"function" == typeof d ? (f = d, d = null, e = "确定") : "function" == typeof e && (f = e, e = null), a.plusReady(function () {
	        plus.nativeUI.alert(c, f, d, e);
	      });
	    } else b.alert(c);
	  };
	}(mui, window), function (a, b) {
	  a.confirm = function (c, d, e, f) {
	    if (a.os.plus) {
	      if ("undefined" == typeof c) return;"function" == typeof d ? (f = d, d = null, e = null) : "function" == typeof e && (f = e, e = null), a.plusReady(function () {
	        plus.nativeUI.confirm(c, f, d, e);
	      });
	    } else f(b.confirm(c) ? { index: 0 } : { index: 1 });
	  };
	}(mui, window), function (a, b) {
	  a.prompt = function (c, d, e, f, g) {
	    if (a.os.plus) {
	      if ("undefined" == typeof message) return;"function" == typeof d ? (g = d, d = null, e = null, f = null) : "function" == typeof e ? (g = e, e = null, f = null) : "function" == typeof f && (g = f, f = null), a.plusReady(function () {
	        plus.nativeUI.prompt(c, g, e, d, f);
	      });
	    } else {
	      var h = b.prompt(c);g(h ? { index: 0, value: h } : { index: 1, value: "" });
	    }
	  };
	}(mui, window), function (a, b) {
	  var c = "mui-active";a.toast = function (b) {
	    if (a.os.plus) a.plusReady(function () {
	      plus.nativeUI.toast(b, { verticalAlign: "bottom" });
	    });else {
	      var d = document.createElement("div");d.classList.add("mui-toast-container"), d.innerHTML = '<div class="mui-toast-message">' + b + "</div>", d.addEventListener("webkitTransitionEnd", function () {
	        d.classList.contains(c) || d.parentNode.removeChild(d);
	      }), document.body.appendChild(d), d.offsetHeight, d.classList.add(c), setTimeout(function () {
	        d.classList.remove(c);
	      }, 2e3);
	    }
	  };
	}(mui, window), function (a, b, c) {
	  var d = "mui-popup",
	      e = "mui-popup-backdrop",
	      f = "mui-popup-in",
	      g = "mui-popup-out",
	      h = "mui-popup-inner",
	      i = "mui-popup-title",
	      j = "mui-popup-text",
	      k = "mui-popup-input",
	      l = "mui-popup-buttons",
	      m = "mui-popup-button",
	      n = "mui-popup-button-bold",
	      e = "mui-popup-backdrop",
	      o = "mui-active",
	      p = [],
	      q = function () {
	    var b = c.createElement("div");return b.classList.add(e), b.addEventListener(a.EVENT_MOVE, a.preventDefault), b.addEventListener("webkitTransitionEnd", function () {
	      this.classList.contains(o) || b.parentNode && b.parentNode.removeChild(b);
	    }), b;
	  }(),
	      r = function r(a) {
	    return '<div class="' + k + '"><input type="text" autofocus placeholder="' + (a || "") + '"/></div>';
	  },
	      s = function s(a, b, c) {
	    return '<div class="' + h + '"><div class="' + i + '">' + b + '</div><div class="' + j + '">' + a.replace(/\r\n/g, "<br/>").replace(/\n/g, "<br/>") + "</div>" + (c || "") + "</div>";
	  },
	      t = function t(a) {
	    for (var b = a.length, c = [], d = 0; b > d; d++) {
	      c.push('<span class="' + m + (d === b - 1 ? " " + n : "") + '">' + a[d] + "</span>");
	    }return '<div class="' + l + '">' + c.join("") + "</div>";
	  },
	      u = function u(b, e) {
	    var h = c.createElement("div");h.className = d, h.innerHTML = b;var i = function i() {
	      h.parentNode && h.parentNode.removeChild(h), h = null;
	    };h.addEventListener(a.EVENT_MOVE, a.preventDefault), h.addEventListener("webkitTransitionEnd", function (a) {
	      h && a.target === h && h.classList.contains(g) && i();
	    }), h.style.display = "block", c.body.appendChild(h), h.offsetHeight, h.classList.add(f), q.classList.contains(o) || (q.style.display = "block", c.body.appendChild(q), q.offsetHeight, q.classList.add(o));var j = a.qsa("." + m, h),
	        l = h.querySelector("." + k + " input"),
	        n = { element: h, close: function close(a, b) {
	        h && (e && e({ index: a || 0, value: l && l.value || "" }), b !== !1 ? (h.classList.remove(f), h.classList.add(g)) : i(), p.pop(), p.length ? p[p.length - 1].show(b) : q.classList.remove(o));
	      } },
	        r = function r(a) {
	      n.close(j.indexOf(a.target));
	    };return a(h).on("tap", "." + m, r), p.length && p[p.length - 1].hide(), p.push({ close: n.close, show: function show(a) {
	        h.style.display = "block", h.offsetHeight, h.classList.add(f);
	      }, hide: function hide() {
	        h.style.display = "none", h.classList.remove(f);
	      } }), n;
	  },
	      v = function v(b, c, d, e, f) {
	    return "undefined" != typeof b ? ("function" == typeof c ? (e = c, f = d, c = null, d = null) : "function" == typeof d && (f = e, e = d, d = null), a.os.plus && "div" !== f ? plus.nativeUI.alert(b, e, c || "提示", d || "确定") : u(s(b, c || "提示") + t([d || "确定"]), e)) : void 0;
	  },
	      w = function w(b, c, d, e, f) {
	    return "undefined" != typeof b ? ("function" == typeof c ? (e = c, f = d, c = null, d = null) : "function" == typeof d && (f = e, e = d, d = null), a.os.plus && "div" !== f ? plus.nativeUI.confirm(b, e, c, d || ["取消", "确认"]) : u(s(b, c || "提示") + t(d || ["取消", "确认"]), e)) : void 0;
	  },
	      x = function x(b, c, d, e, f, g) {
	    return "undefined" != typeof b ? ("function" == typeof c ? (f = c, g = d, c = null, d = null, e = null) : "function" == typeof d ? (f = d, g = e, d = null, e = null) : "function" == typeof e && (g = f, f = e, e = null), a.os.plus && "div" !== g ? plus.nativeUI.prompt(b, f, d || "提示", c, e || ["取消", "确认"]) : u(s(b, d || "提示", r(c)) + t(e || ["取消", "确认"]), f)) : void 0;
	  },
	      y = function y() {
	    return p.length ? (p[p.length - 1].close(), !0) : !1;
	  },
	      z = function z() {
	    for (; p.length;) {
	      p[p.length - 1].close();
	    }
	  };a.closePopup = y, a.closePopups = z, a.alert = v, a.confirm = w, a.prompt = x;
	}(mui, window, document), function (a, b) {
	  var c = "mui-progressbar",
	      d = "mui-progressbar-in",
	      e = "mui-progressbar-out",
	      f = "mui-progressbar-infinite",
	      g = ".mui-progressbar",
	      h = function h(b) {
	    if (b = a(b || "body"), 0 !== b.length) {
	      if (b = b[0], b.classList.contains(c)) return b;var d = b.querySelectorAll(g);if (d) for (var e = 0, f = d.length; f > e; e++) {
	        var h = d[e];if (h.parentNode === b) return h;
	      }
	    }
	  },
	      i = function i(h, _i, j) {
	    if ("number" == typeof h && (j = _i, _i = h, h = "body"), h = a(h || "body"), 0 !== h.length) {
	      h = h[0];var l;if (h.classList.contains(c)) l = h;else {
	        var m = h.querySelectorAll(g + ":not(." + e + ")");if (m) for (var n = 0, o = m.length; o > n; n++) {
	          var p = m[n];if (p.parentNode === h) {
	            l = p;break;
	          }
	        }l ? l.classList.add(d) : (l = b.createElement("span"), l.className = c + " " + d + ("undefined" != typeof _i ? "" : " " + f) + (j ? " " + c + "-" + j : ""), "undefined" != typeof _i && (l.innerHTML = "<span></span>"), h.appendChild(l));
	      }return _i && k(h, _i), l;
	    }
	  },
	      j = function j(a) {
	    var b = h(a);if (b) {
	      var c = b.classList;c.contains(d) && !c.contains(e) && (c.remove(d), c.add(e), b.addEventListener("webkitAnimationEnd", function () {
	        b.parentNode && b.parentNode.removeChild(b), b = null;
	      }));
	    }
	  },
	      k = function k(a, b, c) {
	    "number" == typeof a && (c = b, b = a, a = !1);var d = h(a);if (d && !d.classList.contains(f)) {
	      b && (b = Math.min(Math.max(b, 0), 100)), d.offsetHeight;var e = d.querySelector("span");if (e) {
	        var g = e.style;g.webkitTransform = "translate3d(" + (-100 + b) + "%,0,0)", "undefined" != typeof c ? g.webkitTransitionDuration = c + "ms" : g.webkitTransitionDuration = "";
	      }return d;
	    }
	  };a.fn.progressbar = function (a) {
	    var b = [];return a = a || {}, this.each(function () {
	      var c = this,
	          d = c.mui_plugin_progressbar;d ? a && d.setOptions(a) : c.mui_plugin_progressbar = d = { options: a, setOptions: function setOptions(a) {
	          this.options = a;
	        }, show: function show() {
	          return i(c, this.options.progress, this.options.color);
	        }, setProgress: function setProgress(a) {
	          return k(c, a);
	        }, hide: function hide() {
	          return j(c);
	        } }, b.push(d);
	    }), 1 === b.length ? b[0] : b;
	  };
	}(mui, document), function (a, b, c) {
	  var d = "mui-icon",
	      e = "mui-icon-clear",
	      f = "mui-icon-speech",
	      g = "mui-icon-search",
	      h = "mui-icon-eye",
	      i = "mui-input-row",
	      j = "mui-placeholder",
	      k = "mui-tooltip",
	      l = "mui-hidden",
	      m = "mui-focusin",
	      n = "." + e,
	      o = "." + f,
	      p = "." + h,
	      q = "." + j,
	      r = "." + k,
	      s = function s(a) {
	    for (; a && a !== c; a = a.parentNode) {
	      if (a.classList && a.classList.contains(i)) return a;
	    }return null;
	  },
	      t = function t(a, b) {
	    this.element = a, this.options = b || { actions: "clear" }, ~this.options.actions.indexOf("slider") ? (this.sliderActionClass = k + " " + l, this.sliderActionSelector = r) : (~this.options.actions.indexOf("clear") && (this.clearActionClass = d + " " + e + " " + l, this.clearActionSelector = n), ~this.options.actions.indexOf("speech") && (this.speechActionClass = d + " " + f, this.speechActionSelector = o), ~this.options.actions.indexOf("search") && (this.searchActionClass = j, this.searchActionSelector = q), ~this.options.actions.indexOf("password") && (this.passwordActionClass = d + " " + h, this.passwordActionSelector = p)), this.init();
	  };t.prototype.init = function () {
	    this.initAction(), this.initElementEvent();
	  }, t.prototype.initAction = function () {
	    var b = this,
	        c = b.element.parentNode;c && (b.sliderActionClass ? b.sliderAction = b.createAction(c, b.sliderActionClass, b.sliderActionSelector) : (b.searchActionClass && (b.searchAction = b.createAction(c, b.searchActionClass, b.searchActionSelector), b.searchAction.addEventListener("tap", function (c) {
	      a.focus(b.element), c.stopPropagation();
	    })), b.speechActionClass && (b.speechAction = b.createAction(c, b.speechActionClass, b.speechActionSelector), b.speechAction.addEventListener("click", a.stopPropagation), b.speechAction.addEventListener("tap", function (a) {
	      b.speechActionClick(a);
	    })), b.clearActionClass && (b.clearAction = b.createAction(c, b.clearActionClass, b.clearActionSelector), b.clearAction.addEventListener("tap", function (a) {
	      b.clearActionClick(a);
	    })), b.passwordActionClass && (b.passwordAction = b.createAction(c, b.passwordActionClass, b.passwordActionSelector), b.passwordAction.addEventListener("tap", function (a) {
	      b.passwordActionClick(a);
	    }))));
	  }, t.prototype.createAction = function (a, b, e) {
	    var f = a.querySelector(e);if (!f) {
	      var f = c.createElement("span");f.className = b, b === this.searchActionClass && (f.innerHTML = '<span class="' + d + " " + g + '"></span><span>' + this.element.getAttribute("placeholder") + "</span>", this.element.setAttribute("placeholder", ""), this.element.value.trim() && a.classList.add("mui-active")), a.insertBefore(f, this.element.nextSibling);
	    }return f;
	  }, t.prototype.initElementEvent = function () {
	    var b = this.element;if (this.sliderActionClass) {
	      var c = this.sliderAction,
	          d = null,
	          e = function e() {
	        c.classList.remove(l);var a = b.offsetLeft,
	            e = b.offsetWidth - 28,
	            f = c.offsetWidth,
	            g = Math.abs(b.max - b.min),
	            h = e / g * Math.abs(b.value - b.min);c.style.left = 14 + a + h - f / 2 + "px", c.innerText = b.value, d && clearTimeout(d), d = setTimeout(function () {
	          c.classList.add(l);
	        }, 1e3);
	      };b.addEventListener("input", e), b.addEventListener("tap", e), b.addEventListener(a.EVENT_MOVE, function (a) {
	        a.stopPropagation();
	      });
	    } else {
	      if (this.clearActionClass) {
	        var f = this.clearAction;if (!f) return;a.each(["keyup", "change", "input", "focus", "cut", "paste"], function (a, c) {
	          !function (a) {
	            b.addEventListener(a, function () {
	              f.classList[b.value.trim() ? "remove" : "add"](l);
	            });
	          }(c);
	        }), b.addEventListener("blur", function () {
	          f.classList.add(l);
	        });
	      }this.searchActionClass && (b.addEventListener("focus", function () {
	        b.parentNode.classList.add("mui-active");
	      }), b.addEventListener("blur", function () {
	        b.value.trim() || b.parentNode.classList.remove("mui-active");
	      }));
	    }
	  }, t.prototype.setPlaceholder = function (a) {
	    if (this.searchActionClass) {
	      var b = this.element.parentNode.querySelector(q);b && (b.getElementsByTagName("span")[1].innerText = a);
	    } else this.element.setAttribute("placeholder", a);
	  }, t.prototype.passwordActionClick = function (a) {
	    "text" === this.element.type ? this.element.type = "password" : this.element.type = "text", this.passwordAction.classList.toggle("mui-active"), a.preventDefault();
	  }, t.prototype.clearActionClick = function (b) {
	    var c = this;c.element.value = "", a.focus(c.element), c.clearAction.classList.add(l), b.preventDefault();
	  }, t.prototype.speechActionClick = function (d) {
	    if (b.plus) {
	      var e = this,
	          f = e.element.value;e.element.value = "", c.body.classList.add(m), plus.speech.startRecognize({ engine: "iFly" }, function (b) {
	        e.element.value += b, a.focus(e.element), plus.speech.stopRecognize(), a.trigger(e.element, "recognized", { value: e.element.value }), f !== e.element.value && (a.trigger(e.element, "change"), a.trigger(e.element, "input"));
	      }, function (a) {
	        c.body.classList.remove(m);
	      });
	    } else alert("only for 5+");d.preventDefault();
	  }, a.fn.input = function (b) {
	    var c = [];return this.each(function () {
	      var b = null,
	          d = [],
	          e = s(this.parentNode);if ("range" === this.type && e.classList.contains("mui-input-range")) d.push("slider");else {
	        var f = this.classList;f.contains("mui-input-clear") && d.push("clear"), a.os.android && a.os.stream || !f.contains("mui-input-speech") || d.push("speech"), f.contains("mui-input-password") && d.push("password"), "search" === this.type && e.classList.contains("mui-search") && d.push("search");
	      }var g = this.getAttribute("data-input-" + d[0]);if (g) b = a.data[g];else {
	        g = ++a.uuid, b = a.data[g] = new t(this, { actions: d.join(",") });for (var h = 0, i = d.length; i > h; h++) {
	          this.setAttribute("data-input-" + d[h], g);
	        }
	      }c.push(b);
	    }), 1 === c.length ? c[0] : c;
	  }, a.ready(function () {
	    a(".mui-input-row input").input();
	  });
	}(mui, window, document), function (a, b) {
	  var c = /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
	      d = function d(a) {
	    var b = a.match(c);return b && 5 === b.length ? [b[1], b[2], b[3], b[4]] : [];
	  },
	      e = function e(b, c) {
	    this.element = b, this.options = a.extend({ top: 0, offset: 150, duration: 16 }, c || {}), this._style = this.element.style, this._bgColor = this._style.backgroundColor;var e = d(mui.getStyles(this.element, "backgroundColor"));if (!e.length) throw new Error("元素背景颜色必须为RGBA");this._R = e[0], this._G = e[1], this._B = e[2], this._A = e[3], this._bufferFn = a.buffer(this.handleScroll, this.options.duration, this), this.initEvent();
	  };e.prototype.initEvent = function () {
	    b.addEventListener("scroll", this._bufferFn), b.addEventListener(a.EVENT_MOVE, this._bufferFn);
	  }, e.prototype.handleScroll = function () {
	    this._style.backgroundColor = "rgba(" + this._R + "," + this._G + "," + this._B + "," + (b.scrollY - this.options.top) / this.options.offset + ")";
	  }, e.prototype.destory = function () {
	    b.removeEventListener("scroll", this._bufferFn), b.removeEventListener(a.EVENT_MOVE, this._bufferFn), this.element.style.backgroundColor = this._bgColor, this.element.mui_plugin_transparent = null;
	  }, a.fn.transparent = function (a) {
	    a = a || {};var b = [];return this.each(function () {
	      var c = this.mui_plugin_transparent;if (!c) {
	        var d = this.getAttribute("data-top"),
	            f = this.getAttribute("data-offset"),
	            g = this.getAttribute("data-duration");null !== d && "undefined" == typeof a.top && (a.top = d), null !== f && "undefined" == typeof a.offset && (a.offset = f), null !== g && "undefined" == typeof a.duration && (a.duration = g), c = this.mui_plugin_transparent = new e(this, a);
	      }b.push(c);
	    }), 1 === b.length ? b[0] : b;
	  }, a.ready(function () {
	    a(".mui-bar-transparent").transparent();
	  });
	}(mui, window), function (a) {
	  var b = "ontouchstart" in document,
	      c = b ? "tap" : "click",
	      d = "change",
	      e = "mui-numbox",
	      f = ".mui-btn-numbox-plus,.mui-numbox-btn-plus",
	      g = ".mui-btn-numbox-minus,.mui-numbox-btn-minus",
	      h = ".mui-input-numbox,.mui-numbox-input",
	      i = a.Numbox = a.Class.extend({ init: function init(b, c) {
	      var d = this;if (!b) throw "构造 numbox 时缺少容器元素";d.holder = b, c = c || {}, c.step = parseInt(c.step || 1), d.options = c, d.input = a.qsa(h, d.holder)[0], d.plus = a.qsa(f, d.holder)[0], d.minus = a.qsa(g, d.holder)[0], d.checkValue(), d.initEvent();
	    }, initEvent: function initEvent() {
	      var b = this;b.plus.addEventListener(c, function (c) {
	        var e = parseInt(b.input.value) + b.options.step;b.input.value = e.toString(), a.trigger(b.input, d, null);
	      }), b.minus.addEventListener(c, function (c) {
	        var e = parseInt(b.input.value) - b.options.step;b.input.value = e.toString(), a.trigger(b.input, d, null);
	      }), b.input.addEventListener(d, function (c) {
	        b.checkValue();var e = parseInt(b.input.value);a.trigger(b.holder, d, { value: e });
	      });
	    }, getValue: function getValue() {
	      var a = this;return parseInt(a.input.value);
	    }, checkValue: function checkValue() {
	      var a = this,
	          b = a.input.value;if (null == b || "" == b || isNaN(b)) a.input.value = a.options.min || 0, a.minus.disabled = null != a.options.min;else {
	        var b = parseInt(b);null != a.options.max && !isNaN(a.options.max) && b >= parseInt(a.options.max) ? (b = a.options.max, a.plus.disabled = !0) : a.plus.disabled = !1, null != a.options.min && !isNaN(a.options.min) && b <= parseInt(a.options.min) ? (b = a.options.min, a.minus.disabled = !0) : a.minus.disabled = !1, a.input.value = b;
	      }
	    }, setOption: function setOption(a, b) {
	      var c = this;c.options[a] = b;
	    } });a.fn.numbox = function (a) {
	    return this.each(function (a, b) {
	      if (!b.numbox) if (d) b.numbox = new i(b, d);else {
	        var c = b.getAttribute("data-numbox-options"),
	            d = c ? JSON.parse(c) : {};d.step = b.getAttribute("data-numbox-step") || d.step, d.min = b.getAttribute("data-numbox-min") || d.min, d.max = b.getAttribute("data-numbox-max") || d.max, b.numbox = new i(b, d);
	      }
	    }), this[0] ? this[0].numbox : null;
	  }, a.ready(function () {
	    a("." + e).numbox();
	  });
	}(mui);

/***/ },
/* 50 */
/*!***************************************************!*\
  !*** ./~/babel-runtime/core-js/json/stringify.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(/*! core-js/library/fn/json/stringify */ 51), __esModule: true };

/***/ },
/* 51 */
/*!****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/fn/json/stringify.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var core  = __webpack_require__(/*! ../../modules/_core */ 52)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};

/***/ },
/* 52 */
/*!************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_core.js ***!
  \************************************************************/
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 53 */
/*!***********************************************************!*\
  !*** ./~/babel-runtime/core-js/object/define-property.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/define-property */ 54), __esModule: true };

/***/ },
/* 54 */
/*!************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/fn/object/define-property.js ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ../../modules/es6.object.define-property */ 55);
	var $Object = __webpack_require__(/*! ../../modules/_core */ 52).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 55 */
/*!*********************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/es6.object.define-property.js ***!
  \*********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(/*! ./_export */ 56);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ 65), 'Object', {defineProperty: __webpack_require__(/*! ./_object-dp */ 61).f});

/***/ },
/* 56 */
/*!**************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_export.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(/*! ./_global */ 57)
	  , core      = __webpack_require__(/*! ./_core */ 52)
	  , ctx       = __webpack_require__(/*! ./_ctx */ 58)
	  , hide      = __webpack_require__(/*! ./_hide */ 60)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 57 */
/*!**************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_global.js ***!
  \**************************************************************/
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 58 */
/*!***********************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_ctx.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(/*! ./_a-function */ 59);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 59 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_a-function.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 60 */
/*!************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_hide.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(/*! ./_object-dp */ 61)
	  , createDesc = __webpack_require__(/*! ./_property-desc */ 69);
	module.exports = __webpack_require__(/*! ./_descriptors */ 65) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 61 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-dp.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(/*! ./_an-object */ 62)
	  , IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ 64)
	  , toPrimitive    = __webpack_require__(/*! ./_to-primitive */ 68)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(/*! ./_descriptors */ 65) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 62 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_an-object.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(/*! ./_is-object */ 63);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 63 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_is-object.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 64 */
/*!**********************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_ie8-dom-define.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(/*! ./_descriptors */ 65) && !__webpack_require__(/*! ./_fails */ 66)(function(){
	  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ 67)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 65 */
/*!*******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_descriptors.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(/*! ./_fails */ 66)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 66 */
/*!*************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_fails.js ***!
  \*************************************************************/
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 67 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_dom-create.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(/*! ./_is-object */ 63)
	  , document = __webpack_require__(/*! ./_global */ 57).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 68 */
/*!********************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_to-primitive.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(/*! ./_is-object */ 63);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 69 */
/*!*********************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_property-desc.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 70 */
/*!************************************************************!*\
  !*** ./~/babel-runtime/core-js/object/get-prototype-of.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/get-prototype-of */ 71), __esModule: true };

/***/ },
/* 71 */
/*!*************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/fn/object/get-prototype-of.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ../../modules/es6.object.get-prototype-of */ 72);
	module.exports = __webpack_require__(/*! ../../modules/_core */ 52).Object.getPrototypeOf;

/***/ },
/* 72 */
/*!**********************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/es6.object.get-prototype-of.js ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(/*! ./_to-object */ 73)
	  , $getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ 75);
	
	__webpack_require__(/*! ./_object-sap */ 80)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});

/***/ },
/* 73 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_to-object.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(/*! ./_defined */ 74);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 74 */
/*!***************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_defined.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 75 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-gpo.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(/*! ./_has */ 76)
	  , toObject    = __webpack_require__(/*! ./_to-object */ 73)
	  , IE_PROTO    = __webpack_require__(/*! ./_shared-key */ 77)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 76 */
/*!***********************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_has.js ***!
  \***********************************************************/
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 77 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_shared-key.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(/*! ./_shared */ 78)('keys')
	  , uid    = __webpack_require__(/*! ./_uid */ 79);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 78 */
/*!**************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_shared.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(/*! ./_global */ 57)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 79 */
/*!***********************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_uid.js ***!
  \***********************************************************/
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 80 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-sap.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(/*! ./_export */ 56)
	  , core    = __webpack_require__(/*! ./_core */ 52)
	  , fails   = __webpack_require__(/*! ./_fails */ 66);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 81 */
/*!************************************************************!*\
  !*** ./~/babel-runtime/core-js/object/set-prototype-of.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(/*! core-js/library/fn/object/set-prototype-of */ 82), __esModule: true };

/***/ },
/* 82 */
/*!*************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/fn/object/set-prototype-of.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ../../modules/es6.object.set-prototype-of */ 83);
	module.exports = __webpack_require__(/*! ../../modules/_core */ 52).Object.setPrototypeOf;

/***/ },
/* 83 */
/*!**********************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/es6.object.set-prototype-of.js ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(/*! ./_export */ 56);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(/*! ./_set-proto */ 84).set});

/***/ },
/* 84 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_set-proto.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(/*! ./_is-object */ 63)
	  , anObject = __webpack_require__(/*! ./_an-object */ 62);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(/*! ./_ctx */ 58)(Function.call, __webpack_require__(/*! ./_object-gopd */ 85).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 85 */
/*!*******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-gopd.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(/*! ./_object-pie */ 86)
	  , createDesc     = __webpack_require__(/*! ./_property-desc */ 69)
	  , toIObject      = __webpack_require__(/*! ./_to-iobject */ 87)
	  , toPrimitive    = __webpack_require__(/*! ./_to-primitive */ 68)
	  , has            = __webpack_require__(/*! ./_has */ 76)
	  , IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ 64)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(/*! ./_descriptors */ 65) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 86 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-pie.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 87 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_to-iobject.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(/*! ./_iobject */ 88)
	  , defined = __webpack_require__(/*! ./_defined */ 74);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 88 */
/*!***************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_iobject.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(/*! ./_cof */ 89);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 89 */
/*!***********************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_cof.js ***!
  \***********************************************************/
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 90 */
/*!*******************************************!*\
  !*** ./~/babel-runtime/helpers/typeof.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(/*! ../core-js/symbol/iterator */ 91);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(/*! ../core-js/symbol */ 117);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 91 */
/*!****************************************************!*\
  !*** ./~/babel-runtime/core-js/symbol/iterator.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(/*! core-js/library/fn/symbol/iterator */ 92), __esModule: true };

/***/ },
/* 92 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/fn/symbol/iterator.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ../../modules/es6.string.iterator */ 93);
	__webpack_require__(/*! ../../modules/web.dom.iterable */ 112);
	module.exports = __webpack_require__(/*! ../../modules/_wks-ext */ 116).f('iterator');

/***/ },
/* 93 */
/*!**************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/es6.string.iterator.js ***!
  \**************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(/*! ./_string-at */ 94)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(/*! ./_iter-define */ 96)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 94 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_string-at.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(/*! ./_to-integer */ 95)
	  , defined   = __webpack_require__(/*! ./_defined */ 74);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 95 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_to-integer.js ***!
  \******************************************************************/
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 96 */
/*!*******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_iter-define.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(/*! ./_library */ 97)
	  , $export        = __webpack_require__(/*! ./_export */ 56)
	  , redefine       = __webpack_require__(/*! ./_redefine */ 98)
	  , hide           = __webpack_require__(/*! ./_hide */ 60)
	  , has            = __webpack_require__(/*! ./_has */ 76)
	  , Iterators      = __webpack_require__(/*! ./_iterators */ 99)
	  , $iterCreate    = __webpack_require__(/*! ./_iter-create */ 100)
	  , setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ 110)
	  , getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ 75)
	  , ITERATOR       = __webpack_require__(/*! ./_wks */ 111)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 97 */
/*!***************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_library.js ***!
  \***************************************************************/
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 98 */
/*!****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_redefine.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./_hide */ 60);

/***/ },
/* 99 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_iterators.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 100 */
/*!*******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_iter-create.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(/*! ./_object-create */ 101)
	  , descriptor     = __webpack_require__(/*! ./_property-desc */ 69)
	  , setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ 110)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(/*! ./_hide */ 60)(IteratorPrototype, __webpack_require__(/*! ./_wks */ 111)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 101 */
/*!*********************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-create.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(/*! ./_an-object */ 62)
	  , dPs         = __webpack_require__(/*! ./_object-dps */ 102)
	  , enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ 108)
	  , IE_PROTO    = __webpack_require__(/*! ./_shared-key */ 77)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(/*! ./_dom-create */ 67)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(/*! ./_html */ 109).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 102 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-dps.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(/*! ./_object-dp */ 61)
	  , anObject = __webpack_require__(/*! ./_an-object */ 62)
	  , getKeys  = __webpack_require__(/*! ./_object-keys */ 103);
	
	module.exports = __webpack_require__(/*! ./_descriptors */ 65) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 103 */
/*!*******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-keys.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(/*! ./_object-keys-internal */ 104)
	  , enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ 108);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 104 */
/*!****************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-keys-internal.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(/*! ./_has */ 76)
	  , toIObject    = __webpack_require__(/*! ./_to-iobject */ 87)
	  , arrayIndexOf = __webpack_require__(/*! ./_array-includes */ 105)(false)
	  , IE_PROTO     = __webpack_require__(/*! ./_shared-key */ 77)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 105 */
/*!**********************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_array-includes.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(/*! ./_to-iobject */ 87)
	  , toLength  = __webpack_require__(/*! ./_to-length */ 106)
	  , toIndex   = __webpack_require__(/*! ./_to-index */ 107);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 106 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_to-length.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(/*! ./_to-integer */ 95)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 107 */
/*!****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_to-index.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(/*! ./_to-integer */ 95)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 108 */
/*!*********************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_enum-bug-keys.js ***!
  \*********************************************************************/
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 109 */
/*!************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_html.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./_global */ 57).document && document.documentElement;

/***/ },
/* 110 */
/*!*************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_set-to-string-tag.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(/*! ./_object-dp */ 61).f
	  , has = __webpack_require__(/*! ./_has */ 76)
	  , TAG = __webpack_require__(/*! ./_wks */ 111)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 111 */
/*!***********************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_wks.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(/*! ./_shared */ 78)('wks')
	  , uid        = __webpack_require__(/*! ./_uid */ 79)
	  , Symbol     = __webpack_require__(/*! ./_global */ 57).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 112 */
/*!***********************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/web.dom.iterable.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ./es6.array.iterator */ 113);
	var global        = __webpack_require__(/*! ./_global */ 57)
	  , hide          = __webpack_require__(/*! ./_hide */ 60)
	  , Iterators     = __webpack_require__(/*! ./_iterators */ 99)
	  , TO_STRING_TAG = __webpack_require__(/*! ./_wks */ 111)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 113 */
/*!*************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/es6.array.iterator.js ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ 114)
	  , step             = __webpack_require__(/*! ./_iter-step */ 115)
	  , Iterators        = __webpack_require__(/*! ./_iterators */ 99)
	  , toIObject        = __webpack_require__(/*! ./_to-iobject */ 87);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(/*! ./_iter-define */ 96)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 114 */
/*!**************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_add-to-unscopables.js ***!
  \**************************************************************************/
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 115 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_iter-step.js ***!
  \*****************************************************************/
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 116 */
/*!***************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_wks-ext.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(/*! ./_wks */ 111);

/***/ },
/* 117 */
/*!*******************************************!*\
  !*** ./~/babel-runtime/core-js/symbol.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(/*! core-js/library/fn/symbol */ 118), __esModule: true };

/***/ },
/* 118 */
/*!**************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/fn/symbol/index.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ../../modules/es6.symbol */ 119);
	__webpack_require__(/*! ../../modules/es6.object.to-string */ 128);
	__webpack_require__(/*! ../../modules/es7.symbol.async-iterator */ 129);
	__webpack_require__(/*! ../../modules/es7.symbol.observable */ 130);
	module.exports = __webpack_require__(/*! ../../modules/_core */ 52).Symbol;

/***/ },
/* 119 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/es6.symbol.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(/*! ./_global */ 57)
	  , has            = __webpack_require__(/*! ./_has */ 76)
	  , DESCRIPTORS    = __webpack_require__(/*! ./_descriptors */ 65)
	  , $export        = __webpack_require__(/*! ./_export */ 56)
	  , redefine       = __webpack_require__(/*! ./_redefine */ 98)
	  , META           = __webpack_require__(/*! ./_meta */ 120).KEY
	  , $fails         = __webpack_require__(/*! ./_fails */ 66)
	  , shared         = __webpack_require__(/*! ./_shared */ 78)
	  , setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ 110)
	  , uid            = __webpack_require__(/*! ./_uid */ 79)
	  , wks            = __webpack_require__(/*! ./_wks */ 111)
	  , wksExt         = __webpack_require__(/*! ./_wks-ext */ 116)
	  , wksDefine      = __webpack_require__(/*! ./_wks-define */ 121)
	  , keyOf          = __webpack_require__(/*! ./_keyof */ 122)
	  , enumKeys       = __webpack_require__(/*! ./_enum-keys */ 123)
	  , isArray        = __webpack_require__(/*! ./_is-array */ 125)
	  , anObject       = __webpack_require__(/*! ./_an-object */ 62)
	  , toIObject      = __webpack_require__(/*! ./_to-iobject */ 87)
	  , toPrimitive    = __webpack_require__(/*! ./_to-primitive */ 68)
	  , createDesc     = __webpack_require__(/*! ./_property-desc */ 69)
	  , _create        = __webpack_require__(/*! ./_object-create */ 101)
	  , gOPNExt        = __webpack_require__(/*! ./_object-gopn-ext */ 126)
	  , $GOPD          = __webpack_require__(/*! ./_object-gopd */ 85)
	  , $DP            = __webpack_require__(/*! ./_object-dp */ 61)
	  , $keys          = __webpack_require__(/*! ./_object-keys */ 103)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(/*! ./_object-gopn */ 127).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(/*! ./_object-pie */ 86).f  = $propertyIsEnumerable;
	  __webpack_require__(/*! ./_object-gops */ 124).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(/*! ./_library */ 97)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ 60)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 120 */
/*!************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_meta.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(/*! ./_uid */ 79)('meta')
	  , isObject = __webpack_require__(/*! ./_is-object */ 63)
	  , has      = __webpack_require__(/*! ./_has */ 76)
	  , setDesc  = __webpack_require__(/*! ./_object-dp */ 61).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(/*! ./_fails */ 66)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 121 */
/*!******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_wks-define.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(/*! ./_global */ 57)
	  , core           = __webpack_require__(/*! ./_core */ 52)
	  , LIBRARY        = __webpack_require__(/*! ./_library */ 97)
	  , wksExt         = __webpack_require__(/*! ./_wks-ext */ 116)
	  , defineProperty = __webpack_require__(/*! ./_object-dp */ 61).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 122 */
/*!*************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_keyof.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(/*! ./_object-keys */ 103)
	  , toIObject = __webpack_require__(/*! ./_to-iobject */ 87);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 123 */
/*!*****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_enum-keys.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(/*! ./_object-keys */ 103)
	  , gOPS    = __webpack_require__(/*! ./_object-gops */ 124)
	  , pIE     = __webpack_require__(/*! ./_object-pie */ 86);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 124 */
/*!*******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-gops.js ***!
  \*******************************************************************/
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 125 */
/*!****************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_is-array.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(/*! ./_cof */ 89);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 126 */
/*!***********************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-gopn-ext.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(/*! ./_to-iobject */ 87)
	  , gOPN      = __webpack_require__(/*! ./_object-gopn */ 127).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 127 */
/*!*******************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/_object-gopn.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(/*! ./_object-keys-internal */ 104)
	  , hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ 108).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 128 */
/*!***************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/es6.object.to-string.js ***!
  \***************************************************************************/
/***/ function(module, exports) {



/***/ },
/* 129 */
/*!********************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/es7.symbol.async-iterator.js ***!
  \********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ./_wks-define */ 121)('asyncIterator');

/***/ },
/* 130 */
/*!****************************************************************************!*\
  !*** ./~/babel-runtime/~/core-js/library/modules/es7.symbol.observable.js ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ./_wks-define */ 121)('observable');

/***/ },
/* 131 */
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 132 */
/*!*****************************************!*\
  !*** ./~/vue-router/dist/vue-router.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * vue-router v0.7.13
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  global.VueRouter = factory();
	}(this, function () { 'use strict';
	
	  var babelHelpers = {};
	
	  babelHelpers.classCallCheck = function (instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  };
	  function Target(path, matcher, delegate) {
	    this.path = path;
	    this.matcher = matcher;
	    this.delegate = delegate;
	  }
	
	  Target.prototype = {
	    to: function to(target, callback) {
	      var delegate = this.delegate;
	
	      if (delegate && delegate.willAddRoute) {
	        target = delegate.willAddRoute(this.matcher.target, target);
	      }
	
	      this.matcher.add(this.path, target);
	
	      if (callback) {
	        if (callback.length === 0) {
	          throw new Error("You must have an argument in the function passed to `to`");
	        }
	        this.matcher.addChild(this.path, target, callback, this.delegate);
	      }
	      return this;
	    }
	  };
	
	  function Matcher(target) {
	    this.routes = {};
	    this.children = {};
	    this.target = target;
	  }
	
	  Matcher.prototype = {
	    add: function add(path, handler) {
	      this.routes[path] = handler;
	    },
	
	    addChild: function addChild(path, target, callback, delegate) {
	      var matcher = new Matcher(target);
	      this.children[path] = matcher;
	
	      var match = generateMatch(path, matcher, delegate);
	
	      if (delegate && delegate.contextEntered) {
	        delegate.contextEntered(target, match);
	      }
	
	      callback(match);
	    }
	  };
	
	  function generateMatch(startingPath, matcher, delegate) {
	    return function (path, nestedCallback) {
	      var fullPath = startingPath + path;
	
	      if (nestedCallback) {
	        nestedCallback(generateMatch(fullPath, matcher, delegate));
	      } else {
	        return new Target(startingPath + path, matcher, delegate);
	      }
	    };
	  }
	
	  function addRoute(routeArray, path, handler) {
	    var len = 0;
	    for (var i = 0, l = routeArray.length; i < l; i++) {
	      len += routeArray[i].path.length;
	    }
	
	    path = path.substr(len);
	    var route = { path: path, handler: handler };
	    routeArray.push(route);
	  }
	
	  function eachRoute(baseRoute, matcher, callback, binding) {
	    var routes = matcher.routes;
	
	    for (var path in routes) {
	      if (routes.hasOwnProperty(path)) {
	        var routeArray = baseRoute.slice();
	        addRoute(routeArray, path, routes[path]);
	
	        if (matcher.children[path]) {
	          eachRoute(routeArray, matcher.children[path], callback, binding);
	        } else {
	          callback.call(binding, routeArray);
	        }
	      }
	    }
	  }
	
	  function map (callback, addRouteCallback) {
	    var matcher = new Matcher();
	
	    callback(generateMatch("", matcher, this.delegate));
	
	    eachRoute([], matcher, function (route) {
	      if (addRouteCallback) {
	        addRouteCallback(this, route);
	      } else {
	        this.add(route);
	      }
	    }, this);
	  }
	
	  var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];
	
	  var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');
	
	  var noWarning = false;
	  function warn(msg) {
	    if (!noWarning && typeof console !== 'undefined') {
	      console.error('[vue-router] ' + msg);
	    }
	  }
	
	  function tryDecode(uri, asComponent) {
	    try {
	      return asComponent ? decodeURIComponent(uri) : decodeURI(uri);
	    } catch (e) {
	      warn('malformed URI' + (asComponent ? ' component: ' : ': ') + uri);
	    }
	  }
	
	  function isArray(test) {
	    return Object.prototype.toString.call(test) === "[object Array]";
	  }
	
	  // A Segment represents a segment in the original route description.
	  // Each Segment type provides an `eachChar` and `regex` method.
	  //
	  // The `eachChar` method invokes the callback with one or more character
	  // specifications. A character specification consumes one or more input
	  // characters.
	  //
	  // The `regex` method returns a regex fragment for the segment. If the
	  // segment is a dynamic of star segment, the regex fragment also includes
	  // a capture.
	  //
	  // A character specification contains:
	  //
	  // * `validChars`: a String with a list of all valid characters, or
	  // * `invalidChars`: a String with a list of all invalid characters
	  // * `repeat`: true if the character specification can repeat
	
	  function StaticSegment(string) {
	    this.string = string;
	  }
	  StaticSegment.prototype = {
	    eachChar: function eachChar(callback) {
	      var string = this.string,
	          ch;
	
	      for (var i = 0, l = string.length; i < l; i++) {
	        ch = string.charAt(i);
	        callback({ validChars: ch });
	      }
	    },
	
	    regex: function regex() {
	      return this.string.replace(escapeRegex, '\\$1');
	    },
	
	    generate: function generate() {
	      return this.string;
	    }
	  };
	
	  function DynamicSegment(name) {
	    this.name = name;
	  }
	  DynamicSegment.prototype = {
	    eachChar: function eachChar(callback) {
	      callback({ invalidChars: "/", repeat: true });
	    },
	
	    regex: function regex() {
	      return "([^/]+)";
	    },
	
	    generate: function generate(params) {
	      var val = params[this.name];
	      return val == null ? ":" + this.name : val;
	    }
	  };
	
	  function StarSegment(name) {
	    this.name = name;
	  }
	  StarSegment.prototype = {
	    eachChar: function eachChar(callback) {
	      callback({ invalidChars: "", repeat: true });
	    },
	
	    regex: function regex() {
	      return "(.+)";
	    },
	
	    generate: function generate(params) {
	      var val = params[this.name];
	      return val == null ? ":" + this.name : val;
	    }
	  };
	
	  function EpsilonSegment() {}
	  EpsilonSegment.prototype = {
	    eachChar: function eachChar() {},
	    regex: function regex() {
	      return "";
	    },
	    generate: function generate() {
	      return "";
	    }
	  };
	
	  function parse(route, names, specificity) {
	    // normalize route as not starting with a "/". Recognition will
	    // also normalize.
	    if (route.charAt(0) === "/") {
	      route = route.substr(1);
	    }
	
	    var segments = route.split("/"),
	        results = [];
	
	    // A routes has specificity determined by the order that its different segments
	    // appear in. This system mirrors how the magnitude of numbers written as strings
	    // works.
	    // Consider a number written as: "abc". An example would be "200". Any other number written
	    // "xyz" will be smaller than "abc" so long as `a > z`. For instance, "199" is smaller
	    // then "200", even though "y" and "z" (which are both 9) are larger than "0" (the value
	    // of (`b` and `c`). This is because the leading symbol, "2", is larger than the other
	    // leading symbol, "1".
	    // The rule is that symbols to the left carry more weight than symbols to the right
	    // when a number is written out as a string. In the above strings, the leading digit
	    // represents how many 100's are in the number, and it carries more weight than the middle
	    // number which represents how many 10's are in the number.
	    // This system of number magnitude works well for route specificity, too. A route written as
	    // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than
	    // `x`, irrespective of the other parts.
	    // Because of this similarity, we assign each type of segment a number value written as a
	    // string. We can find the specificity of compound routes by concatenating these strings
	    // together, from left to right. After we have looped through all of the segments,
	    // we convert the string to a number.
	    specificity.val = '';
	
	    for (var i = 0, l = segments.length; i < l; i++) {
	      var segment = segments[i],
	          match;
	
	      if (match = segment.match(/^:([^\/]+)$/)) {
	        results.push(new DynamicSegment(match[1]));
	        names.push(match[1]);
	        specificity.val += '3';
	      } else if (match = segment.match(/^\*([^\/]+)$/)) {
	        results.push(new StarSegment(match[1]));
	        specificity.val += '2';
	        names.push(match[1]);
	      } else if (segment === "") {
	        results.push(new EpsilonSegment());
	        specificity.val += '1';
	      } else {
	        results.push(new StaticSegment(segment));
	        specificity.val += '4';
	      }
	    }
	
	    specificity.val = +specificity.val;
	
	    return results;
	  }
	
	  // A State has a character specification and (`charSpec`) and a list of possible
	  // subsequent states (`nextStates`).
	  //
	  // If a State is an accepting state, it will also have several additional
	  // properties:
	  //
	  // * `regex`: A regular expression that is used to extract parameters from paths
	  //   that reached this accepting state.
	  // * `handlers`: Information on how to convert the list of captures into calls
	  //   to registered handlers with the specified parameters
	  // * `types`: How many static, dynamic or star segments in this route. Used to
	  //   decide which route to use if multiple registered routes match a path.
	  //
	  // Currently, State is implemented naively by looping over `nextStates` and
	  // comparing a character specification against a character. A more efficient
	  // implementation would use a hash of keys pointing at one or more next states.
	
	  function State(charSpec) {
	    this.charSpec = charSpec;
	    this.nextStates = [];
	  }
	
	  State.prototype = {
	    get: function get(charSpec) {
	      var nextStates = this.nextStates;
	
	      for (var i = 0, l = nextStates.length; i < l; i++) {
	        var child = nextStates[i];
	
	        var isEqual = child.charSpec.validChars === charSpec.validChars;
	        isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;
	
	        if (isEqual) {
	          return child;
	        }
	      }
	    },
	
	    put: function put(charSpec) {
	      var state;
	
	      // If the character specification already exists in a child of the current
	      // state, just return that state.
	      if (state = this.get(charSpec)) {
	        return state;
	      }
	
	      // Make a new state for the character spec
	      state = new State(charSpec);
	
	      // Insert the new state as a child of the current state
	      this.nextStates.push(state);
	
	      // If this character specification repeats, insert the new state as a child
	      // of itself. Note that this will not trigger an infinite loop because each
	      // transition during recognition consumes a character.
	      if (charSpec.repeat) {
	        state.nextStates.push(state);
	      }
	
	      // Return the new state
	      return state;
	    },
	
	    // Find a list of child states matching the next character
	    match: function match(ch) {
	      // DEBUG "Processing `" + ch + "`:"
	      var nextStates = this.nextStates,
	          child,
	          charSpec,
	          chars;
	
	      // DEBUG "  " + debugState(this)
	      var returned = [];
	
	      for (var i = 0, l = nextStates.length; i < l; i++) {
	        child = nextStates[i];
	
	        charSpec = child.charSpec;
	
	        if (typeof (chars = charSpec.validChars) !== 'undefined') {
	          if (chars.indexOf(ch) !== -1) {
	            returned.push(child);
	          }
	        } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {
	          if (chars.indexOf(ch) === -1) {
	            returned.push(child);
	          }
	        }
	      }
	
	      return returned;
	    }
	
	    /** IF DEBUG
	    , debug: function() {
	      var charSpec = this.charSpec,
	          debug = "[",
	          chars = charSpec.validChars || charSpec.invalidChars;
	       if (charSpec.invalidChars) { debug += "^"; }
	      debug += chars;
	      debug += "]";
	       if (charSpec.repeat) { debug += "+"; }
	       return debug;
	    }
	    END IF **/
	  };
	
	  /** IF DEBUG
	  function debug(log) {
	    console.log(log);
	  }
	
	  function debugState(state) {
	    return state.nextStates.map(function(n) {
	      if (n.nextStates.length === 0) { return "( " + n.debug() + " [accepting] )"; }
	      return "( " + n.debug() + " <then> " + n.nextStates.map(function(s) { return s.debug() }).join(" or ") + " )";
	    }).join(", ")
	  }
	  END IF **/
	
	  // Sort the routes by specificity
	  function sortSolutions(states) {
	    return states.sort(function (a, b) {
	      return b.specificity.val - a.specificity.val;
	    });
	  }
	
	  function recognizeChar(states, ch) {
	    var nextStates = [];
	
	    for (var i = 0, l = states.length; i < l; i++) {
	      var state = states[i];
	
	      nextStates = nextStates.concat(state.match(ch));
	    }
	
	    return nextStates;
	  }
	
	  var oCreate = Object.create || function (proto) {
	    function F() {}
	    F.prototype = proto;
	    return new F();
	  };
	
	  function RecognizeResults(queryParams) {
	    this.queryParams = queryParams || {};
	  }
	  RecognizeResults.prototype = oCreate({
	    splice: Array.prototype.splice,
	    slice: Array.prototype.slice,
	    push: Array.prototype.push,
	    length: 0,
	    queryParams: null
	  });
	
	  function findHandler(state, path, queryParams) {
	    var handlers = state.handlers,
	        regex = state.regex;
	    var captures = path.match(regex),
	        currentCapture = 1;
	    var result = new RecognizeResults(queryParams);
	
	    for (var i = 0, l = handlers.length; i < l; i++) {
	      var handler = handlers[i],
	          names = handler.names,
	          params = {};
	
	      for (var j = 0, m = names.length; j < m; j++) {
	        params[names[j]] = captures[currentCapture++];
	      }
	
	      result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });
	    }
	
	    return result;
	  }
	
	  function addSegment(currentState, segment) {
	    segment.eachChar(function (ch) {
	      var state;
	
	      currentState = currentState.put(ch);
	    });
	
	    return currentState;
	  }
	
	  function decodeQueryParamPart(part) {
	    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
	    part = part.replace(/\+/gm, '%20');
	    return tryDecode(part, true);
	  }
	
	  // The main interface
	
	  var RouteRecognizer = function RouteRecognizer() {
	    this.rootState = new State();
	    this.names = {};
	  };
	
	  RouteRecognizer.prototype = {
	    add: function add(routes, options) {
	      var currentState = this.rootState,
	          regex = "^",
	          specificity = {},
	          handlers = [],
	          allSegments = [],
	          name;
	
	      var isEmpty = true;
	
	      for (var i = 0, l = routes.length; i < l; i++) {
	        var route = routes[i],
	            names = [];
	
	        var segments = parse(route.path, names, specificity);
	
	        allSegments = allSegments.concat(segments);
	
	        for (var j = 0, m = segments.length; j < m; j++) {
	          var segment = segments[j];
	
	          if (segment instanceof EpsilonSegment) {
	            continue;
	          }
	
	          isEmpty = false;
	
	          // Add a "/" for the new segment
	          currentState = currentState.put({ validChars: "/" });
	          regex += "/";
	
	          // Add a representation of the segment to the NFA and regex
	          currentState = addSegment(currentState, segment);
	          regex += segment.regex();
	        }
	
	        var handler = { handler: route.handler, names: names };
	        handlers.push(handler);
	      }
	
	      if (isEmpty) {
	        currentState = currentState.put({ validChars: "/" });
	        regex += "/";
	      }
	
	      currentState.handlers = handlers;
	      currentState.regex = new RegExp(regex + "$");
	      currentState.specificity = specificity;
	
	      if (name = options && options.as) {
	        this.names[name] = {
	          segments: allSegments,
	          handlers: handlers
	        };
	      }
	    },
	
	    handlersFor: function handlersFor(name) {
	      var route = this.names[name],
	          result = [];
	      if (!route) {
	        throw new Error("There is no route named " + name);
	      }
	
	      for (var i = 0, l = route.handlers.length; i < l; i++) {
	        result.push(route.handlers[i]);
	      }
	
	      return result;
	    },
	
	    hasRoute: function hasRoute(name) {
	      return !!this.names[name];
	    },
	
	    generate: function generate(name, params) {
	      var route = this.names[name],
	          output = "";
	      if (!route) {
	        throw new Error("There is no route named " + name);
	      }
	
	      var segments = route.segments;
	
	      for (var i = 0, l = segments.length; i < l; i++) {
	        var segment = segments[i];
	
	        if (segment instanceof EpsilonSegment) {
	          continue;
	        }
	
	        output += "/";
	        output += segment.generate(params);
	      }
	
	      if (output.charAt(0) !== '/') {
	        output = '/' + output;
	      }
	
	      if (params && params.queryParams) {
	        output += this.generateQueryString(params.queryParams);
	      }
	
	      return output;
	    },
	
	    generateQueryString: function generateQueryString(params) {
	      var pairs = [];
	      var keys = [];
	      for (var key in params) {
	        if (params.hasOwnProperty(key)) {
	          keys.push(key);
	        }
	      }
	      keys.sort();
	      for (var i = 0, len = keys.length; i < len; i++) {
	        key = keys[i];
	        var value = params[key];
	        if (value == null) {
	          continue;
	        }
	        var pair = encodeURIComponent(key);
	        if (isArray(value)) {
	          for (var j = 0, l = value.length; j < l; j++) {
	            var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);
	            pairs.push(arrayPair);
	          }
	        } else {
	          pair += "=" + encodeURIComponent(value);
	          pairs.push(pair);
	        }
	      }
	
	      if (pairs.length === 0) {
	        return '';
	      }
	
	      return "?" + pairs.join("&");
	    },
	
	    parseQueryString: function parseQueryString(queryString) {
	      var pairs = queryString.split("&"),
	          queryParams = {};
	      for (var i = 0; i < pairs.length; i++) {
	        var pair = pairs[i].split('='),
	            key = decodeQueryParamPart(pair[0]),
	            keyLength = key.length,
	            isArray = false,
	            value;
	        if (pair.length === 1) {
	          value = 'true';
	        } else {
	          //Handle arrays
	          if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {
	            isArray = true;
	            key = key.slice(0, keyLength - 2);
	            if (!queryParams[key]) {
	              queryParams[key] = [];
	            }
	          }
	          value = pair[1] ? decodeQueryParamPart(pair[1]) : '';
	        }
	        if (isArray) {
	          queryParams[key].push(value);
	        } else {
	          queryParams[key] = value;
	        }
	      }
	      return queryParams;
	    },
	
	    recognize: function recognize(path, silent) {
	      noWarning = silent;
	      var states = [this.rootState],
	          pathLen,
	          i,
	          l,
	          queryStart,
	          queryParams = {},
	          isSlashDropped = false;
	
	      queryStart = path.indexOf('?');
	      if (queryStart !== -1) {
	        var queryString = path.substr(queryStart + 1, path.length);
	        path = path.substr(0, queryStart);
	        if (queryString) {
	          queryParams = this.parseQueryString(queryString);
	        }
	      }
	
	      path = tryDecode(path);
	      if (!path) return;
	
	      // DEBUG GROUP path
	
	      if (path.charAt(0) !== "/") {
	        path = "/" + path;
	      }
	
	      pathLen = path.length;
	      if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
	        path = path.substr(0, pathLen - 1);
	        isSlashDropped = true;
	      }
	
	      for (i = 0, l = path.length; i < l; i++) {
	        states = recognizeChar(states, path.charAt(i));
	        if (!states.length) {
	          break;
	        }
	      }
	
	      // END DEBUG GROUP
	
	      var solutions = [];
	      for (i = 0, l = states.length; i < l; i++) {
	        if (states[i].handlers) {
	          solutions.push(states[i]);
	        }
	      }
	
	      states = sortSolutions(solutions);
	
	      var state = solutions[0];
	
	      if (state && state.handlers) {
	        // if a trailing slash was dropped and a star segment is the last segment
	        // specified, put the trailing slash back
	        if (isSlashDropped && state.regex.source.slice(-5) === "(.+)$") {
	          path = path + "/";
	        }
	        return findHandler(state, path, queryParams);
	      }
	    }
	  };
	
	  RouteRecognizer.prototype.map = map;
	
	  var genQuery = RouteRecognizer.prototype.generateQueryString;
	
	  // export default for holding the Vue reference
	  var exports$1 = {};
	  /**
	   * Warn stuff.
	   *
	   * @param {String} msg
	   */
	
	  function warn$1(msg) {
	    /* istanbul ignore next */
	    if (typeof console !== 'undefined') {
	      console.error('[vue-router] ' + msg);
	    }
	  }
	
	  /**
	   * Resolve a relative path.
	   *
	   * @param {String} base
	   * @param {String} relative
	   * @param {Boolean} append
	   * @return {String}
	   */
	
	  function resolvePath(base, relative, append) {
	    var query = base.match(/(\?.*)$/);
	    if (query) {
	      query = query[1];
	      base = base.slice(0, -query.length);
	    }
	    // a query!
	    if (relative.charAt(0) === '?') {
	      return base + relative;
	    }
	    var stack = base.split('/');
	    // remove trailing segment if:
	    // - not appending
	    // - appending to trailing slash (last segment is empty)
	    if (!append || !stack[stack.length - 1]) {
	      stack.pop();
	    }
	    // resolve relative path
	    var segments = relative.replace(/^\//, '').split('/');
	    for (var i = 0; i < segments.length; i++) {
	      var segment = segments[i];
	      if (segment === '.') {
	        continue;
	      } else if (segment === '..') {
	        stack.pop();
	      } else {
	        stack.push(segment);
	      }
	    }
	    // ensure leading slash
	    if (stack[0] !== '') {
	      stack.unshift('');
	    }
	    return stack.join('/');
	  }
	
	  /**
	   * Forgiving check for a promise
	   *
	   * @param {Object} p
	   * @return {Boolean}
	   */
	
	  function isPromise(p) {
	    return p && typeof p.then === 'function';
	  }
	
	  /**
	   * Retrive a route config field from a component instance
	   * OR a component contructor.
	   *
	   * @param {Function|Vue} component
	   * @param {String} name
	   * @return {*}
	   */
	
	  function getRouteConfig(component, name) {
	    var options = component && (component.$options || component.options);
	    return options && options.route && options.route[name];
	  }
	
	  /**
	   * Resolve an async component factory. Have to do a dirty
	   * mock here because of Vue core's internal API depends on
	   * an ID check.
	   *
	   * @param {Object} handler
	   * @param {Function} cb
	   */
	
	  var resolver = undefined;
	
	  function resolveAsyncComponent(handler, cb) {
	    if (!resolver) {
	      resolver = {
	        resolve: exports$1.Vue.prototype._resolveComponent,
	        $options: {
	          components: {
	            _: handler.component
	          }
	        }
	      };
	    } else {
	      resolver.$options.components._ = handler.component;
	    }
	    resolver.resolve('_', function (Component) {
	      handler.component = Component;
	      cb(Component);
	    });
	  }
	
	  /**
	   * Map the dynamic segments in a path to params.
	   *
	   * @param {String} path
	   * @param {Object} params
	   * @param {Object} query
	   */
	
	  function mapParams(path, params, query) {
	    if (params === undefined) params = {};
	
	    path = path.replace(/:([^\/]+)/g, function (_, key) {
	      var val = params[key];
	      /* istanbul ignore if */
	      if (!val) {
	        warn$1('param "' + key + '" not found when generating ' + 'path for "' + path + '" with params ' + JSON.stringify(params));
	      }
	      return val || '';
	    });
	    if (query) {
	      path += genQuery(query);
	    }
	    return path;
	  }
	
	  var hashRE = /#.*$/;
	
	  var HTML5History = (function () {
	    function HTML5History(_ref) {
	      var root = _ref.root;
	      var onChange = _ref.onChange;
	      babelHelpers.classCallCheck(this, HTML5History);
	
	      if (root && root !== '/') {
	        // make sure there's the starting slash
	        if (root.charAt(0) !== '/') {
	          root = '/' + root;
	        }
	        // remove trailing slash
	        this.root = root.replace(/\/$/, '');
	        this.rootRE = new RegExp('^\\' + this.root);
	      } else {
	        this.root = null;
	      }
	      this.onChange = onChange;
	      // check base tag
	      var baseEl = document.querySelector('base');
	      this.base = baseEl && baseEl.getAttribute('href');
	    }
	
	    HTML5History.prototype.start = function start() {
	      var _this = this;
	
	      this.listener = function (e) {
	        var url = location.pathname + location.search;
	        if (_this.root) {
	          url = url.replace(_this.rootRE, '');
	        }
	        _this.onChange(url, e && e.state, location.hash);
	      };
	      window.addEventListener('popstate', this.listener);
	      this.listener();
	    };
	
	    HTML5History.prototype.stop = function stop() {
	      window.removeEventListener('popstate', this.listener);
	    };
	
	    HTML5History.prototype.go = function go(path, replace, append) {
	      var url = this.formatPath(path, append);
	      if (replace) {
	        history.replaceState({}, '', url);
	      } else {
	        // record scroll position by replacing current state
	        history.replaceState({
	          pos: {
	            x: window.pageXOffset,
	            y: window.pageYOffset
	          }
	        }, '', location.href);
	        // then push new state
	        history.pushState({}, '', url);
	      }
	      var hashMatch = path.match(hashRE);
	      var hash = hashMatch && hashMatch[0];
	      path = url
	      // strip hash so it doesn't mess up params
	      .replace(hashRE, '')
	      // remove root before matching
	      .replace(this.rootRE, '');
	      this.onChange(path, null, hash);
	    };
	
	    HTML5History.prototype.formatPath = function formatPath(path, append) {
	      return path.charAt(0) === '/'
	      // absolute path
	      ? this.root ? this.root + '/' + path.replace(/^\//, '') : path : resolvePath(this.base || location.pathname, path, append);
	    };
	
	    return HTML5History;
	  })();
	
	  var HashHistory = (function () {
	    function HashHistory(_ref) {
	      var hashbang = _ref.hashbang;
	      var onChange = _ref.onChange;
	      babelHelpers.classCallCheck(this, HashHistory);
	
	      this.hashbang = hashbang;
	      this.onChange = onChange;
	    }
	
	    HashHistory.prototype.start = function start() {
	      var self = this;
	      this.listener = function () {
	        var path = location.hash;
	        var raw = path.replace(/^#!?/, '');
	        // always
	        if (raw.charAt(0) !== '/') {
	          raw = '/' + raw;
	        }
	        var formattedPath = self.formatPath(raw);
	        if (formattedPath !== path) {
	          location.replace(formattedPath);
	          return;
	        }
	        // determine query
	        // note it's possible to have queries in both the actual URL
	        // and the hash fragment itself.
	        var query = location.search && path.indexOf('?') > -1 ? '&' + location.search.slice(1) : location.search;
	        self.onChange(path.replace(/^#!?/, '') + query);
	      };
	      window.addEventListener('hashchange', this.listener);
	      this.listener();
	    };
	
	    HashHistory.prototype.stop = function stop() {
	      window.removeEventListener('hashchange', this.listener);
	    };
	
	    HashHistory.prototype.go = function go(path, replace, append) {
	      path = this.formatPath(path, append);
	      if (replace) {
	        location.replace(path);
	      } else {
	        location.hash = path;
	      }
	    };
	
	    HashHistory.prototype.formatPath = function formatPath(path, append) {
	      var isAbsoloute = path.charAt(0) === '/';
	      var prefix = '#' + (this.hashbang ? '!' : '');
	      return isAbsoloute ? prefix + path : prefix + resolvePath(location.hash.replace(/^#!?/, ''), path, append);
	    };
	
	    return HashHistory;
	  })();
	
	  var AbstractHistory = (function () {
	    function AbstractHistory(_ref) {
	      var onChange = _ref.onChange;
	      babelHelpers.classCallCheck(this, AbstractHistory);
	
	      this.onChange = onChange;
	      this.currentPath = '/';
	    }
	
	    AbstractHistory.prototype.start = function start() {
	      this.onChange('/');
	    };
	
	    AbstractHistory.prototype.stop = function stop() {
	      // noop
	    };
	
	    AbstractHistory.prototype.go = function go(path, replace, append) {
	      path = this.currentPath = this.formatPath(path, append);
	      this.onChange(path);
	    };
	
	    AbstractHistory.prototype.formatPath = function formatPath(path, append) {
	      return path.charAt(0) === '/' ? path : resolvePath(this.currentPath, path, append);
	    };
	
	    return AbstractHistory;
	  })();
	
	  /**
	   * Determine the reusability of an existing router view.
	   *
	   * @param {Directive} view
	   * @param {Object} handler
	   * @param {Transition} transition
	   */
	
	  function canReuse(view, handler, transition) {
	    var component = view.childVM;
	    if (!component || !handler) {
	      return false;
	    }
	    // important: check view.Component here because it may
	    // have been changed in activate hook
	    if (view.Component !== handler.component) {
	      return false;
	    }
	    var canReuseFn = getRouteConfig(component, 'canReuse');
	    return typeof canReuseFn === 'boolean' ? canReuseFn : canReuseFn ? canReuseFn.call(component, {
	      to: transition.to,
	      from: transition.from
	    }) : true; // defaults to true
	  }
	
	  /**
	   * Check if a component can deactivate.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   * @param {Function} next
	   */
	
	  function canDeactivate(view, transition, next) {
	    var fromComponent = view.childVM;
	    var hook = getRouteConfig(fromComponent, 'canDeactivate');
	    if (!hook) {
	      next();
	    } else {
	      transition.callHook(hook, fromComponent, next, {
	        expectBoolean: true
	      });
	    }
	  }
	
	  /**
	   * Check if a component can activate.
	   *
	   * @param {Object} handler
	   * @param {Transition} transition
	   * @param {Function} next
	   */
	
	  function canActivate(handler, transition, next) {
	    resolveAsyncComponent(handler, function (Component) {
	      // have to check due to async-ness
	      if (transition.aborted) {
	        return;
	      }
	      // determine if this component can be activated
	      var hook = getRouteConfig(Component, 'canActivate');
	      if (!hook) {
	        next();
	      } else {
	        transition.callHook(hook, null, next, {
	          expectBoolean: true
	        });
	      }
	    });
	  }
	
	  /**
	   * Call deactivate hooks for existing router-views.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   * @param {Function} next
	   */
	
	  function deactivate(view, transition, next) {
	    var component = view.childVM;
	    var hook = getRouteConfig(component, 'deactivate');
	    if (!hook) {
	      next();
	    } else {
	      transition.callHooks(hook, component, next);
	    }
	  }
	
	  /**
	   * Activate / switch component for a router-view.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   * @param {Number} depth
	   * @param {Function} [cb]
	   */
	
	  function activate(view, transition, depth, cb, reuse) {
	    var handler = transition.activateQueue[depth];
	    if (!handler) {
	      saveChildView(view);
	      if (view._bound) {
	        view.setComponent(null);
	      }
	      cb && cb();
	      return;
	    }
	
	    var Component = view.Component = handler.component;
	    var activateHook = getRouteConfig(Component, 'activate');
	    var dataHook = getRouteConfig(Component, 'data');
	    var waitForData = getRouteConfig(Component, 'waitForData');
	
	    view.depth = depth;
	    view.activated = false;
	
	    var component = undefined;
	    var loading = !!(dataHook && !waitForData);
	
	    // "reuse" is a flag passed down when the parent view is
	    // either reused via keep-alive or as a child of a kept-alive view.
	    // of course we can only reuse if the current kept-alive instance
	    // is of the correct type.
	    reuse = reuse && view.childVM && view.childVM.constructor === Component;
	
	    if (reuse) {
	      // just reuse
	      component = view.childVM;
	      component.$loadingRouteData = loading;
	    } else {
	      saveChildView(view);
	
	      // unbuild current component. this step also destroys
	      // and removes all nested child views.
	      view.unbuild(true);
	
	      // build the new component. this will also create the
	      // direct child view of the current one. it will register
	      // itself as view.childView.
	      component = view.build({
	        _meta: {
	          $loadingRouteData: loading
	        },
	        created: function created() {
	          this._routerView = view;
	        }
	      });
	
	      // handle keep-alive.
	      // when a kept-alive child vm is restored, we need to
	      // add its cached child views into the router's view list,
	      // and also properly update current view's child view.
	      if (view.keepAlive) {
	        component.$loadingRouteData = loading;
	        var cachedChildView = component._keepAliveRouterView;
	        if (cachedChildView) {
	          view.childView = cachedChildView;
	          component._keepAliveRouterView = null;
	        }
	      }
	    }
	
	    // cleanup the component in case the transition is aborted
	    // before the component is ever inserted.
	    var cleanup = function cleanup() {
	      component.$destroy();
	    };
	
	    // actually insert the component and trigger transition
	    var insert = function insert() {
	      if (reuse) {
	        cb && cb();
	        return;
	      }
	      var router = transition.router;
	      if (router._rendered || router._transitionOnLoad) {
	        view.transition(component);
	      } else {
	        // no transition on first render, manual transition
	        /* istanbul ignore if */
	        if (view.setCurrent) {
	          // 0.12 compat
	          view.setCurrent(component);
	        } else {
	          // 1.0
	          view.childVM = component;
	        }
	        component.$before(view.anchor, null, false);
	      }
	      cb && cb();
	    };
	
	    var afterData = function afterData() {
	      // activate the child view
	      if (view.childView) {
	        activate(view.childView, transition, depth + 1, null, reuse || view.keepAlive);
	      }
	      insert();
	    };
	
	    // called after activation hook is resolved
	    var afterActivate = function afterActivate() {
	      view.activated = true;
	      if (dataHook && waitForData) {
	        // wait until data loaded to insert
	        loadData(component, transition, dataHook, afterData, cleanup);
	      } else {
	        // load data and insert at the same time
	        if (dataHook) {
	          loadData(component, transition, dataHook);
	        }
	        afterData();
	      }
	    };
	
	    if (activateHook) {
	      transition.callHooks(activateHook, component, afterActivate, {
	        cleanup: cleanup,
	        postActivate: true
	      });
	    } else {
	      afterActivate();
	    }
	  }
	
	  /**
	   * Reuse a view, just reload data if necessary.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   */
	
	  function reuse(view, transition) {
	    var component = view.childVM;
	    var dataHook = getRouteConfig(component, 'data');
	    if (dataHook) {
	      loadData(component, transition, dataHook);
	    }
	  }
	
	  /**
	   * Asynchronously load and apply data to component.
	   *
	   * @param {Vue} component
	   * @param {Transition} transition
	   * @param {Function} hook
	   * @param {Function} cb
	   * @param {Function} cleanup
	   */
	
	  function loadData(component, transition, hook, cb, cleanup) {
	    component.$loadingRouteData = true;
	    transition.callHooks(hook, component, function () {
	      component.$loadingRouteData = false;
	      component.$emit('route-data-loaded', component);
	      cb && cb();
	    }, {
	      cleanup: cleanup,
	      postActivate: true,
	      processData: function processData(data) {
	        // handle promise sugar syntax
	        var promises = [];
	        if (isPlainObject(data)) {
	          Object.keys(data).forEach(function (key) {
	            var val = data[key];
	            if (isPromise(val)) {
	              promises.push(val.then(function (resolvedVal) {
	                component.$set(key, resolvedVal);
	              }));
	            } else {
	              component.$set(key, val);
	            }
	          });
	        }
	        if (promises.length) {
	          return promises[0].constructor.all(promises);
	        }
	      }
	    });
	  }
	
	  /**
	   * Save the child view for a kept-alive view so that
	   * we can restore it when it is switched back to.
	   *
	   * @param {Directive} view
	   */
	
	  function saveChildView(view) {
	    if (view.keepAlive && view.childVM && view.childView) {
	      view.childVM._keepAliveRouterView = view.childView;
	    }
	    view.childView = null;
	  }
	
	  /**
	   * Check plain object.
	   *
	   * @param {*} val
	   */
	
	  function isPlainObject(val) {
	    return Object.prototype.toString.call(val) === '[object Object]';
	  }
	
	  /**
	   * A RouteTransition object manages the pipeline of a
	   * router-view switching process. This is also the object
	   * passed into user route hooks.
	   *
	   * @param {Router} router
	   * @param {Route} to
	   * @param {Route} from
	   */
	
	  var RouteTransition = (function () {
	    function RouteTransition(router, to, from) {
	      babelHelpers.classCallCheck(this, RouteTransition);
	
	      this.router = router;
	      this.to = to;
	      this.from = from;
	      this.next = null;
	      this.aborted = false;
	      this.done = false;
	    }
	
	    /**
	     * Abort current transition and return to previous location.
	     */
	
	    RouteTransition.prototype.abort = function abort() {
	      if (!this.aborted) {
	        this.aborted = true;
	        // if the root path throws an error during validation
	        // on initial load, it gets caught in an infinite loop.
	        var abortingOnLoad = !this.from.path && this.to.path === '/';
	        if (!abortingOnLoad) {
	          this.router.replace(this.from.path || '/');
	        }
	      }
	    };
	
	    /**
	     * Abort current transition and redirect to a new location.
	     *
	     * @param {String} path
	     */
	
	    RouteTransition.prototype.redirect = function redirect(path) {
	      if (!this.aborted) {
	        this.aborted = true;
	        if (typeof path === 'string') {
	          path = mapParams(path, this.to.params, this.to.query);
	        } else {
	          path.params = path.params || this.to.params;
	          path.query = path.query || this.to.query;
	        }
	        this.router.replace(path);
	      }
	    };
	
	    /**
	     * A router view transition's pipeline can be described as
	     * follows, assuming we are transitioning from an existing
	     * <router-view> chain [Component A, Component B] to a new
	     * chain [Component A, Component C]:
	     *
	     *  A    A
	     *  | => |
	     *  B    C
	     *
	     * 1. Reusablity phase:
	     *   -> canReuse(A, A)
	     *   -> canReuse(B, C)
	     *   -> determine new queues:
	     *      - deactivation: [B]
	     *      - activation: [C]
	     *
	     * 2. Validation phase:
	     *   -> canDeactivate(B)
	     *   -> canActivate(C)
	     *
	     * 3. Activation phase:
	     *   -> deactivate(B)
	     *   -> activate(C)
	     *
	     * Each of these steps can be asynchronous, and any
	     * step can potentially abort the transition.
	     *
	     * @param {Function} cb
	     */
	
	    RouteTransition.prototype.start = function start(cb) {
	      var transition = this;
	
	      // determine the queue of views to deactivate
	      var deactivateQueue = [];
	      var view = this.router._rootView;
	      while (view) {
	        deactivateQueue.unshift(view);
	        view = view.childView;
	      }
	      var reverseDeactivateQueue = deactivateQueue.slice().reverse();
	
	      // determine the queue of route handlers to activate
	      var activateQueue = this.activateQueue = toArray(this.to.matched).map(function (match) {
	        return match.handler;
	      });
	
	      // 1. Reusability phase
	      var i = undefined,
	          reuseQueue = undefined;
	      for (i = 0; i < reverseDeactivateQueue.length; i++) {
	        if (!canReuse(reverseDeactivateQueue[i], activateQueue[i], transition)) {
	          break;
	        }
	      }
	      if (i > 0) {
	        reuseQueue = reverseDeactivateQueue.slice(0, i);
	        deactivateQueue = reverseDeactivateQueue.slice(i).reverse();
	        activateQueue = activateQueue.slice(i);
	      }
	
	      // 2. Validation phase
	      transition.runQueue(deactivateQueue, canDeactivate, function () {
	        transition.runQueue(activateQueue, canActivate, function () {
	          transition.runQueue(deactivateQueue, deactivate, function () {
	            // 3. Activation phase
	
	            // Update router current route
	            transition.router._onTransitionValidated(transition);
	
	            // trigger reuse for all reused views
	            reuseQueue && reuseQueue.forEach(function (view) {
	              return reuse(view, transition);
	            });
	
	            // the root of the chain that needs to be replaced
	            // is the top-most non-reusable view.
	            if (deactivateQueue.length) {
	              var _view = deactivateQueue[deactivateQueue.length - 1];
	              var depth = reuseQueue ? reuseQueue.length : 0;
	              activate(_view, transition, depth, cb);
	            } else {
	              cb();
	            }
	          });
	        });
	      });
	    };
	
	    /**
	     * Asynchronously and sequentially apply a function to a
	     * queue.
	     *
	     * @param {Array} queue
	     * @param {Function} fn
	     * @param {Function} cb
	     */
	
	    RouteTransition.prototype.runQueue = function runQueue(queue, fn, cb) {
	      var transition = this;
	      step(0);
	      function step(index) {
	        if (index >= queue.length) {
	          cb();
	        } else {
	          fn(queue[index], transition, function () {
	            step(index + 1);
	          });
	        }
	      }
	    };
	
	    /**
	     * Call a user provided route transition hook and handle
	     * the response (e.g. if the user returns a promise).
	     *
	     * If the user neither expects an argument nor returns a
	     * promise, the hook is assumed to be synchronous.
	     *
	     * @param {Function} hook
	     * @param {*} [context]
	     * @param {Function} [cb]
	     * @param {Object} [options]
	     *                 - {Boolean} expectBoolean
	     *                 - {Boolean} postActive
	     *                 - {Function} processData
	     *                 - {Function} cleanup
	     */
	
	    RouteTransition.prototype.callHook = function callHook(hook, context, cb) {
	      var _ref = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	
	      var _ref$expectBoolean = _ref.expectBoolean;
	      var expectBoolean = _ref$expectBoolean === undefined ? false : _ref$expectBoolean;
	      var _ref$postActivate = _ref.postActivate;
	      var postActivate = _ref$postActivate === undefined ? false : _ref$postActivate;
	      var processData = _ref.processData;
	      var cleanup = _ref.cleanup;
	
	      var transition = this;
	      var nextCalled = false;
	
	      // abort the transition
	      var abort = function abort() {
	        cleanup && cleanup();
	        transition.abort();
	      };
	
	      // handle errors
	      var onError = function onError(err) {
	        postActivate ? next() : abort();
	        if (err && !transition.router._suppress) {
	          warn$1('Uncaught error during transition: ');
	          throw err instanceof Error ? err : new Error(err);
	        }
	      };
	
	      // since promise swallows errors, we have to
	      // throw it in the next tick...
	      var onPromiseError = function onPromiseError(err) {
	        try {
	          onError(err);
	        } catch (e) {
	          setTimeout(function () {
	            throw e;
	          }, 0);
	        }
	      };
	
	      // advance the transition to the next step
	      var next = function next() {
	        if (nextCalled) {
	          warn$1('transition.next() should be called only once.');
	          return;
	        }
	        nextCalled = true;
	        if (transition.aborted) {
	          cleanup && cleanup();
	          return;
	        }
	        cb && cb();
	      };
	
	      var nextWithBoolean = function nextWithBoolean(res) {
	        if (typeof res === 'boolean') {
	          res ? next() : abort();
	        } else if (isPromise(res)) {
	          res.then(function (ok) {
	            ok ? next() : abort();
	          }, onPromiseError);
	        } else if (!hook.length) {
	          next();
	        }
	      };
	
	      var nextWithData = function nextWithData(data) {
	        var res = undefined;
	        try {
	          res = processData(data);
	        } catch (err) {
	          return onError(err);
	        }
	        if (isPromise(res)) {
	          res.then(next, onPromiseError);
	        } else {
	          next();
	        }
	      };
	
	      // expose a clone of the transition object, so that each
	      // hook gets a clean copy and prevent the user from
	      // messing with the internals.
	      var exposed = {
	        to: transition.to,
	        from: transition.from,
	        abort: abort,
	        next: processData ? nextWithData : next,
	        redirect: function redirect() {
	          transition.redirect.apply(transition, arguments);
	        }
	      };
	
	      // actually call the hook
	      var res = undefined;
	      try {
	        res = hook.call(context, exposed);
	      } catch (err) {
	        return onError(err);
	      }
	
	      if (expectBoolean) {
	        // boolean hooks
	        nextWithBoolean(res);
	      } else if (isPromise(res)) {
	        // promise
	        if (processData) {
	          res.then(nextWithData, onPromiseError);
	        } else {
	          res.then(next, onPromiseError);
	        }
	      } else if (processData && isPlainOjbect(res)) {
	        // data promise sugar
	        nextWithData(res);
	      } else if (!hook.length) {
	        next();
	      }
	    };
	
	    /**
	     * Call a single hook or an array of async hooks in series.
	     *
	     * @param {Array} hooks
	     * @param {*} context
	     * @param {Function} cb
	     * @param {Object} [options]
	     */
	
	    RouteTransition.prototype.callHooks = function callHooks(hooks, context, cb, options) {
	      var _this = this;
	
	      if (Array.isArray(hooks)) {
	        this.runQueue(hooks, function (hook, _, next) {
	          if (!_this.aborted) {
	            _this.callHook(hook, context, next, options);
	          }
	        }, cb);
	      } else {
	        this.callHook(hooks, context, cb, options);
	      }
	    };
	
	    return RouteTransition;
	  })();
	
	  function isPlainOjbect(val) {
	    return Object.prototype.toString.call(val) === '[object Object]';
	  }
	
	  function toArray(val) {
	    return val ? Array.prototype.slice.call(val) : [];
	  }
	
	  var internalKeysRE = /^(component|subRoutes|fullPath)$/;
	
	  /**
	   * Route Context Object
	   *
	   * @param {String} path
	   * @param {Router} router
	   */
	
	  var Route = function Route(path, router) {
	    var _this = this;
	
	    babelHelpers.classCallCheck(this, Route);
	
	    var matched = router._recognizer.recognize(path);
	    if (matched) {
	      // copy all custom fields from route configs
	      [].forEach.call(matched, function (match) {
	        for (var key in match.handler) {
	          if (!internalKeysRE.test(key)) {
	            _this[key] = match.handler[key];
	          }
	        }
	      });
	      // set query and params
	      this.query = matched.queryParams;
	      this.params = [].reduce.call(matched, function (prev, cur) {
	        if (cur.params) {
	          for (var key in cur.params) {
	            prev[key] = cur.params[key];
	          }
	        }
	        return prev;
	      }, {});
	    }
	    // expose path and router
	    this.path = path;
	    // for internal use
	    this.matched = matched || router._notFoundHandler;
	    // internal reference to router
	    Object.defineProperty(this, 'router', {
	      enumerable: false,
	      value: router
	    });
	    // Important: freeze self to prevent observation
	    Object.freeze(this);
	  };
	
	  function applyOverride (Vue) {
	    var _Vue$util = Vue.util;
	    var extend = _Vue$util.extend;
	    var isArray = _Vue$util.isArray;
	    var defineReactive = _Vue$util.defineReactive;
	
	    // override Vue's init and destroy process to keep track of router instances
	    var init = Vue.prototype._init;
	    Vue.prototype._init = function (options) {
	      options = options || {};
	      var root = options._parent || options.parent || this;
	      var router = root.$router;
	      var route = root.$route;
	      if (router) {
	        // expose router
	        this.$router = router;
	        router._children.push(this);
	        /* istanbul ignore if */
	        if (this._defineMeta) {
	          // 0.12
	          this._defineMeta('$route', route);
	        } else {
	          // 1.0
	          defineReactive(this, '$route', route);
	        }
	      }
	      init.call(this, options);
	    };
	
	    var destroy = Vue.prototype._destroy;
	    Vue.prototype._destroy = function () {
	      if (!this._isBeingDestroyed && this.$router) {
	        this.$router._children.$remove(this);
	      }
	      destroy.apply(this, arguments);
	    };
	
	    // 1.0 only: enable route mixins
	    var strats = Vue.config.optionMergeStrategies;
	    var hooksToMergeRE = /^(data|activate|deactivate)$/;
	
	    if (strats) {
	      strats.route = function (parentVal, childVal) {
	        if (!childVal) return parentVal;
	        if (!parentVal) return childVal;
	        var ret = {};
	        extend(ret, parentVal);
	        for (var key in childVal) {
	          var a = ret[key];
	          var b = childVal[key];
	          // for data, activate and deactivate, we need to merge them into
	          // arrays similar to lifecycle hooks.
	          if (a && hooksToMergeRE.test(key)) {
	            ret[key] = (isArray(a) ? a : [a]).concat(b);
	          } else {
	            ret[key] = b;
	          }
	        }
	        return ret;
	      };
	    }
	  }
	
	  function View (Vue) {
	
	    var _ = Vue.util;
	    var componentDef =
	    // 0.12
	    Vue.directive('_component') ||
	    // 1.0
	    Vue.internalDirectives.component;
	    // <router-view> extends the internal component directive
	    var viewDef = _.extend({}, componentDef);
	
	    // with some overrides
	    _.extend(viewDef, {
	
	      _isRouterView: true,
	
	      bind: function bind() {
	        var route = this.vm.$route;
	        /* istanbul ignore if */
	        if (!route) {
	          warn$1('<router-view> can only be used inside a ' + 'router-enabled app.');
	          return;
	        }
	        // force dynamic directive so v-component doesn't
	        // attempt to build right now
	        this._isDynamicLiteral = true;
	        // finally, init by delegating to v-component
	        componentDef.bind.call(this);
	
	        // locate the parent view
	        var parentView = undefined;
	        var parent = this.vm;
	        while (parent) {
	          if (parent._routerView) {
	            parentView = parent._routerView;
	            break;
	          }
	          parent = parent.$parent;
	        }
	        if (parentView) {
	          // register self as a child of the parent view,
	          // instead of activating now. This is so that the
	          // child's activate hook is called after the
	          // parent's has resolved.
	          this.parentView = parentView;
	          parentView.childView = this;
	        } else {
	          // this is the root view!
	          var router = route.router;
	          router._rootView = this;
	        }
	
	        // handle late-rendered view
	        // two possibilities:
	        // 1. root view rendered after transition has been
	        //    validated;
	        // 2. child view rendered after parent view has been
	        //    activated.
	        var transition = route.router._currentTransition;
	        if (!parentView && transition.done || parentView && parentView.activated) {
	          var depth = parentView ? parentView.depth + 1 : 0;
	          activate(this, transition, depth);
	        }
	      },
	
	      unbind: function unbind() {
	        if (this.parentView) {
	          this.parentView.childView = null;
	        }
	        componentDef.unbind.call(this);
	      }
	    });
	
	    Vue.elementDirective('router-view', viewDef);
	  }
	
	  var trailingSlashRE = /\/$/;
	  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
	  var queryStringRE = /\?.*$/;
	
	  // install v-link, which provides navigation support for
	  // HTML5 history mode
	  function Link (Vue) {
	    var _Vue$util = Vue.util;
	    var _bind = _Vue$util.bind;
	    var isObject = _Vue$util.isObject;
	    var addClass = _Vue$util.addClass;
	    var removeClass = _Vue$util.removeClass;
	
	    var onPriority = Vue.directive('on').priority;
	    var LINK_UPDATE = '__vue-router-link-update__';
	
	    var activeId = 0;
	
	    Vue.directive('link-active', {
	      priority: 9999,
	      bind: function bind() {
	        var _this = this;
	
	        var id = String(activeId++);
	        // collect v-links contained within this element.
	        // we need do this here before the parent-child relationship
	        // gets messed up by terminal directives (if, for, components)
	        var childLinks = this.el.querySelectorAll('[v-link]');
	        for (var i = 0, l = childLinks.length; i < l; i++) {
	          var link = childLinks[i];
	          var existingId = link.getAttribute(LINK_UPDATE);
	          var value = existingId ? existingId + ',' + id : id;
	          // leave a mark on the link element which can be persisted
	          // through fragment clones.
	          link.setAttribute(LINK_UPDATE, value);
	        }
	        this.vm.$on(LINK_UPDATE, this.cb = function (link, path) {
	          if (link.activeIds.indexOf(id) > -1) {
	            link.updateClasses(path, _this.el);
	          }
	        });
	      },
	      unbind: function unbind() {
	        this.vm.$off(LINK_UPDATE, this.cb);
	      }
	    });
	
	    Vue.directive('link', {
	      priority: onPriority - 2,
	
	      bind: function bind() {
	        var vm = this.vm;
	        /* istanbul ignore if */
	        if (!vm.$route) {
	          warn$1('v-link can only be used inside a router-enabled app.');
	          return;
	        }
	        this.router = vm.$route.router;
	        // update things when the route changes
	        this.unwatch = vm.$watch('$route', _bind(this.onRouteUpdate, this));
	        // check v-link-active ids
	        var activeIds = this.el.getAttribute(LINK_UPDATE);
	        if (activeIds) {
	          this.el.removeAttribute(LINK_UPDATE);
	          this.activeIds = activeIds.split(',');
	        }
	        // no need to handle click if link expects to be opened
	        // in a new window/tab.
	        /* istanbul ignore if */
	        if (this.el.tagName === 'A' && this.el.getAttribute('target') === '_blank') {
	          return;
	        }
	        // handle click
	        this.handler = _bind(this.onClick, this);
	        this.el.addEventListener('click', this.handler);
	      },
	
	      update: function update(target) {
	        this.target = target;
	        if (isObject(target)) {
	          this.append = target.append;
	          this.exact = target.exact;
	          this.prevActiveClass = this.activeClass;
	          this.activeClass = target.activeClass;
	        }
	        this.onRouteUpdate(this.vm.$route);
	      },
	
	      onClick: function onClick(e) {
	        // don't redirect with control keys
	        /* istanbul ignore if */
	        if (e.metaKey || e.ctrlKey || e.shiftKey) return;
	        // don't redirect when preventDefault called
	        /* istanbul ignore if */
	        if (e.defaultPrevented) return;
	        // don't redirect on right click
	        /* istanbul ignore if */
	        if (e.button !== 0) return;
	
	        var target = this.target;
	        if (target) {
	          // v-link with expression, just go
	          e.preventDefault();
	          this.router.go(target);
	        } else {
	          // no expression, delegate for an <a> inside
	          var el = e.target;
	          while (el.tagName !== 'A' && el !== this.el) {
	            el = el.parentNode;
	          }
	          if (el.tagName === 'A' && sameOrigin(el)) {
	            e.preventDefault();
	            var path = el.pathname;
	            if (this.router.history.root) {
	              path = path.replace(this.router.history.rootRE, '');
	            }
	            this.router.go({
	              path: path,
	              replace: target && target.replace,
	              append: target && target.append
	            });
	          }
	        }
	      },
	
	      onRouteUpdate: function onRouteUpdate(route) {
	        // router.stringifyPath is dependent on current route
	        // and needs to be called again whenver route changes.
	        var newPath = this.router.stringifyPath(this.target);
	        if (this.path !== newPath) {
	          this.path = newPath;
	          this.updateActiveMatch();
	          this.updateHref();
	        }
	        if (this.activeIds) {
	          this.vm.$emit(LINK_UPDATE, this, route.path);
	        } else {
	          this.updateClasses(route.path, this.el);
	        }
	      },
	
	      updateActiveMatch: function updateActiveMatch() {
	        this.activeRE = this.path && !this.exact ? new RegExp('^' + this.path.replace(/\/$/, '').replace(queryStringRE, '').replace(regexEscapeRE, '\\$&') + '(\\/|$)') : null;
	      },
	
	      updateHref: function updateHref() {
	        if (this.el.tagName !== 'A') {
	          return;
	        }
	        var path = this.path;
	        var router = this.router;
	        var isAbsolute = path.charAt(0) === '/';
	        // do not format non-hash relative paths
	        var href = path && (router.mode === 'hash' || isAbsolute) ? router.history.formatPath(path, this.append) : path;
	        if (href) {
	          this.el.href = href;
	        } else {
	          this.el.removeAttribute('href');
	        }
	      },
	
	      updateClasses: function updateClasses(path, el) {
	        var activeClass = this.activeClass || this.router._linkActiveClass;
	        // clear old class
	        if (this.prevActiveClass && this.prevActiveClass !== activeClass) {
	          toggleClasses(el, this.prevActiveClass, removeClass);
	        }
	        // remove query string before matching
	        var dest = this.path.replace(queryStringRE, '');
	        path = path.replace(queryStringRE, '');
	        // add new class
	        if (this.exact) {
	          if (dest === path ||
	          // also allow additional trailing slash
	          dest.charAt(dest.length - 1) !== '/' && dest === path.replace(trailingSlashRE, '')) {
	            toggleClasses(el, activeClass, addClass);
	          } else {
	            toggleClasses(el, activeClass, removeClass);
	          }
	        } else {
	          if (this.activeRE && this.activeRE.test(path)) {
	            toggleClasses(el, activeClass, addClass);
	          } else {
	            toggleClasses(el, activeClass, removeClass);
	          }
	        }
	      },
	
	      unbind: function unbind() {
	        this.el.removeEventListener('click', this.handler);
	        this.unwatch && this.unwatch();
	      }
	    });
	
	    function sameOrigin(link) {
	      return link.protocol === location.protocol && link.hostname === location.hostname && link.port === location.port;
	    }
	
	    // this function is copied from v-bind:class implementation until
	    // we properly expose it...
	    function toggleClasses(el, key, fn) {
	      key = key.trim();
	      if (key.indexOf(' ') === -1) {
	        fn(el, key);
	        return;
	      }
	      var keys = key.split(/\s+/);
	      for (var i = 0, l = keys.length; i < l; i++) {
	        fn(el, keys[i]);
	      }
	    }
	  }
	
	  var historyBackends = {
	    abstract: AbstractHistory,
	    hash: HashHistory,
	    html5: HTML5History
	  };
	
	  // late bind during install
	  var Vue = undefined;
	
	  /**
	   * Router constructor
	   *
	   * @param {Object} [options]
	   */
	
	  var Router = (function () {
	    function Router() {
	      var _this = this;
	
	      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	      var _ref$hashbang = _ref.hashbang;
	      var hashbang = _ref$hashbang === undefined ? true : _ref$hashbang;
	      var _ref$abstract = _ref.abstract;
	      var abstract = _ref$abstract === undefined ? false : _ref$abstract;
	      var _ref$history = _ref.history;
	      var history = _ref$history === undefined ? false : _ref$history;
	      var _ref$saveScrollPosition = _ref.saveScrollPosition;
	      var saveScrollPosition = _ref$saveScrollPosition === undefined ? false : _ref$saveScrollPosition;
	      var _ref$transitionOnLoad = _ref.transitionOnLoad;
	      var transitionOnLoad = _ref$transitionOnLoad === undefined ? false : _ref$transitionOnLoad;
	      var _ref$suppressTransitionError = _ref.suppressTransitionError;
	      var suppressTransitionError = _ref$suppressTransitionError === undefined ? false : _ref$suppressTransitionError;
	      var _ref$root = _ref.root;
	      var root = _ref$root === undefined ? null : _ref$root;
	      var _ref$linkActiveClass = _ref.linkActiveClass;
	      var linkActiveClass = _ref$linkActiveClass === undefined ? 'v-link-active' : _ref$linkActiveClass;
	      babelHelpers.classCallCheck(this, Router);
	
	      /* istanbul ignore if */
	      if (!Router.installed) {
	        throw new Error('Please install the Router with Vue.use() before ' + 'creating an instance.');
	      }
	
	      // Vue instances
	      this.app = null;
	      this._children = [];
	
	      // route recognizer
	      this._recognizer = new RouteRecognizer();
	      this._guardRecognizer = new RouteRecognizer();
	
	      // state
	      this._started = false;
	      this._startCb = null;
	      this._currentRoute = {};
	      this._currentTransition = null;
	      this._previousTransition = null;
	      this._notFoundHandler = null;
	      this._notFoundRedirect = null;
	      this._beforeEachHooks = [];
	      this._afterEachHooks = [];
	
	      // trigger transition on initial render?
	      this._rendered = false;
	      this._transitionOnLoad = transitionOnLoad;
	
	      // history mode
	      this._root = root;
	      this._abstract = abstract;
	      this._hashbang = hashbang;
	
	      // check if HTML5 history is available
	      var hasPushState = typeof window !== 'undefined' && window.history && window.history.pushState;
	      this._history = history && hasPushState;
	      this._historyFallback = history && !hasPushState;
	
	      // create history object
	      var inBrowser = Vue.util.inBrowser;
	      this.mode = !inBrowser || this._abstract ? 'abstract' : this._history ? 'html5' : 'hash';
	
	      var History = historyBackends[this.mode];
	      this.history = new History({
	        root: root,
	        hashbang: this._hashbang,
	        onChange: function onChange(path, state, anchor) {
	          _this._match(path, state, anchor);
	        }
	      });
	
	      // other options
	      this._saveScrollPosition = saveScrollPosition;
	      this._linkActiveClass = linkActiveClass;
	      this._suppress = suppressTransitionError;
	    }
	
	    /**
	     * Allow directly passing components to a route
	     * definition.
	     *
	     * @param {String} path
	     * @param {Object} handler
	     */
	
	    // API ===================================================
	
	    /**
	    * Register a map of top-level paths.
	    *
	    * @param {Object} map
	    */
	
	    Router.prototype.map = function map(_map) {
	      for (var route in _map) {
	        this.on(route, _map[route]);
	      }
	      return this;
	    };
	
	    /**
	     * Register a single root-level path
	     *
	     * @param {String} rootPath
	     * @param {Object} handler
	     *                 - {String} component
	     *                 - {Object} [subRoutes]
	     *                 - {Boolean} [forceRefresh]
	     *                 - {Function} [before]
	     *                 - {Function} [after]
	     */
	
	    Router.prototype.on = function on(rootPath, handler) {
	      if (rootPath === '*') {
	        this._notFound(handler);
	      } else {
	        this._addRoute(rootPath, handler, []);
	      }
	      return this;
	    };
	
	    /**
	     * Set redirects.
	     *
	     * @param {Object} map
	     */
	
	    Router.prototype.redirect = function redirect(map) {
	      for (var path in map) {
	        this._addRedirect(path, map[path]);
	      }
	      return this;
	    };
	
	    /**
	     * Set aliases.
	     *
	     * @param {Object} map
	     */
	
	    Router.prototype.alias = function alias(map) {
	      for (var path in map) {
	        this._addAlias(path, map[path]);
	      }
	      return this;
	    };
	
	    /**
	     * Set global before hook.
	     *
	     * @param {Function} fn
	     */
	
	    Router.prototype.beforeEach = function beforeEach(fn) {
	      this._beforeEachHooks.push(fn);
	      return this;
	    };
	
	    /**
	     * Set global after hook.
	     *
	     * @param {Function} fn
	     */
	
	    Router.prototype.afterEach = function afterEach(fn) {
	      this._afterEachHooks.push(fn);
	      return this;
	    };
	
	    /**
	     * Navigate to a given path.
	     * The path can be an object describing a named path in
	     * the format of { name: '...', params: {}, query: {}}
	     * The path is assumed to be already decoded, and will
	     * be resolved against root (if provided)
	     *
	     * @param {String|Object} path
	     * @param {Boolean} [replace]
	     */
	
	    Router.prototype.go = function go(path) {
	      var replace = false;
	      var append = false;
	      if (Vue.util.isObject(path)) {
	        replace = path.replace;
	        append = path.append;
	      }
	      path = this.stringifyPath(path);
	      if (path) {
	        this.history.go(path, replace, append);
	      }
	    };
	
	    /**
	     * Short hand for replacing current path
	     *
	     * @param {String} path
	     */
	
	    Router.prototype.replace = function replace(path) {
	      if (typeof path === 'string') {
	        path = { path: path };
	      }
	      path.replace = true;
	      this.go(path);
	    };
	
	    /**
	     * Start the router.
	     *
	     * @param {VueConstructor} App
	     * @param {String|Element} container
	     * @param {Function} [cb]
	     */
	
	    Router.prototype.start = function start(App, container, cb) {
	      /* istanbul ignore if */
	      if (this._started) {
	        warn$1('already started.');
	        return;
	      }
	      this._started = true;
	      this._startCb = cb;
	      if (!this.app) {
	        /* istanbul ignore if */
	        if (!App || !container) {
	          throw new Error('Must start vue-router with a component and a ' + 'root container.');
	        }
	        /* istanbul ignore if */
	        if (App instanceof Vue) {
	          throw new Error('Must start vue-router with a component, not a ' + 'Vue instance.');
	        }
	        this._appContainer = container;
	        var Ctor = this._appConstructor = typeof App === 'function' ? App : Vue.extend(App);
	        // give it a name for better debugging
	        Ctor.options.name = Ctor.options.name || 'RouterApp';
	      }
	
	      // handle history fallback in browsers that do not
	      // support HTML5 history API
	      if (this._historyFallback) {
	        var _location = window.location;
	        var _history = new HTML5History({ root: this._root });
	        var path = _history.root ? _location.pathname.replace(_history.rootRE, '') : _location.pathname;
	        if (path && path !== '/') {
	          _location.assign((_history.root || '') + '/' + this.history.formatPath(path) + _location.search);
	          return;
	        }
	      }
	
	      this.history.start();
	    };
	
	    /**
	     * Stop listening to route changes.
	     */
	
	    Router.prototype.stop = function stop() {
	      this.history.stop();
	      this._started = false;
	    };
	
	    /**
	     * Normalize named route object / string paths into
	     * a string.
	     *
	     * @param {Object|String|Number} path
	     * @return {String}
	     */
	
	    Router.prototype.stringifyPath = function stringifyPath(path) {
	      var generatedPath = '';
	      if (path && typeof path === 'object') {
	        if (path.name) {
	          var extend = Vue.util.extend;
	          var currentParams = this._currentTransition && this._currentTransition.to.params;
	          var targetParams = path.params || {};
	          var params = currentParams ? extend(extend({}, currentParams), targetParams) : targetParams;
	          generatedPath = encodeURI(this._recognizer.generate(path.name, params));
	        } else if (path.path) {
	          generatedPath = encodeURI(path.path);
	        }
	        if (path.query) {
	          // note: the generated query string is pre-URL-encoded by the recognizer
	          var query = this._recognizer.generateQueryString(path.query);
	          if (generatedPath.indexOf('?') > -1) {
	            generatedPath += '&' + query.slice(1);
	          } else {
	            generatedPath += query;
	          }
	        }
	      } else {
	        generatedPath = encodeURI(path ? path + '' : '');
	      }
	      return generatedPath;
	    };
	
	    // Internal methods ======================================
	
	    /**
	    * Add a route containing a list of segments to the internal
	    * route recognizer. Will be called recursively to add all
	    * possible sub-routes.
	    *
	    * @param {String} path
	    * @param {Object} handler
	    * @param {Array} segments
	    */
	
	    Router.prototype._addRoute = function _addRoute(path, handler, segments) {
	      guardComponent(path, handler);
	      handler.path = path;
	      handler.fullPath = (segments.reduce(function (path, segment) {
	        return path + segment.path;
	      }, '') + path).replace('//', '/');
	      segments.push({
	        path: path,
	        handler: handler
	      });
	      this._recognizer.add(segments, {
	        as: handler.name
	      });
	      // add sub routes
	      if (handler.subRoutes) {
	        for (var subPath in handler.subRoutes) {
	          // recursively walk all sub routes
	          this._addRoute(subPath, handler.subRoutes[subPath],
	          // pass a copy in recursion to avoid mutating
	          // across branches
	          segments.slice());
	        }
	      }
	    };
	
	    /**
	     * Set the notFound route handler.
	     *
	     * @param {Object} handler
	     */
	
	    Router.prototype._notFound = function _notFound(handler) {
	      guardComponent('*', handler);
	      this._notFoundHandler = [{ handler: handler }];
	    };
	
	    /**
	     * Add a redirect record.
	     *
	     * @param {String} path
	     * @param {String} redirectPath
	     */
	
	    Router.prototype._addRedirect = function _addRedirect(path, redirectPath) {
	      if (path === '*') {
	        this._notFoundRedirect = redirectPath;
	      } else {
	        this._addGuard(path, redirectPath, this.replace);
	      }
	    };
	
	    /**
	     * Add an alias record.
	     *
	     * @param {String} path
	     * @param {String} aliasPath
	     */
	
	    Router.prototype._addAlias = function _addAlias(path, aliasPath) {
	      this._addGuard(path, aliasPath, this._match);
	    };
	
	    /**
	     * Add a path guard.
	     *
	     * @param {String} path
	     * @param {String} mappedPath
	     * @param {Function} handler
	     */
	
	    Router.prototype._addGuard = function _addGuard(path, mappedPath, _handler) {
	      var _this2 = this;
	
	      this._guardRecognizer.add([{
	        path: path,
	        handler: function handler(match, query) {
	          var realPath = mapParams(mappedPath, match.params, query);
	          _handler.call(_this2, realPath);
	        }
	      }]);
	    };
	
	    /**
	     * Check if a path matches any redirect records.
	     *
	     * @param {String} path
	     * @return {Boolean} - if true, will skip normal match.
	     */
	
	    Router.prototype._checkGuard = function _checkGuard(path) {
	      var matched = this._guardRecognizer.recognize(path, true);
	      if (matched) {
	        matched[0].handler(matched[0], matched.queryParams);
	        return true;
	      } else if (this._notFoundRedirect) {
	        matched = this._recognizer.recognize(path);
	        if (!matched) {
	          this.replace(this._notFoundRedirect);
	          return true;
	        }
	      }
	    };
	
	    /**
	     * Match a URL path and set the route context on vm,
	     * triggering view updates.
	     *
	     * @param {String} path
	     * @param {Object} [state]
	     * @param {String} [anchor]
	     */
	
	    Router.prototype._match = function _match(path, state, anchor) {
	      var _this3 = this;
	
	      if (this._checkGuard(path)) {
	        return;
	      }
	
	      var currentRoute = this._currentRoute;
	      var currentTransition = this._currentTransition;
	
	      if (currentTransition) {
	        if (currentTransition.to.path === path) {
	          // do nothing if we have an active transition going to the same path
	          return;
	        } else if (currentRoute.path === path) {
	          // We are going to the same path, but we also have an ongoing but
	          // not-yet-validated transition. Abort that transition and reset to
	          // prev transition.
	          currentTransition.aborted = true;
	          this._currentTransition = this._prevTransition;
	          return;
	        } else {
	          // going to a totally different path. abort ongoing transition.
	          currentTransition.aborted = true;
	        }
	      }
	
	      // construct new route and transition context
	      var route = new Route(path, this);
	      var transition = new RouteTransition(this, route, currentRoute);
	
	      // current transition is updated right now.
	      // however, current route will only be updated after the transition has
	      // been validated.
	      this._prevTransition = currentTransition;
	      this._currentTransition = transition;
	
	      if (!this.app) {
	        (function () {
	          // initial render
	          var router = _this3;
	          _this3.app = new _this3._appConstructor({
	            el: _this3._appContainer,
	            created: function created() {
	              this.$router = router;
	            },
	            _meta: {
	              $route: route
	            }
	          });
	        })();
	      }
	
	      // check global before hook
	      var beforeHooks = this._beforeEachHooks;
	      var startTransition = function startTransition() {
	        transition.start(function () {
	          _this3._postTransition(route, state, anchor);
	        });
	      };
	
	      if (beforeHooks.length) {
	        transition.runQueue(beforeHooks, function (hook, _, next) {
	          if (transition === _this3._currentTransition) {
	            transition.callHook(hook, null, next, {
	              expectBoolean: true
	            });
	          }
	        }, startTransition);
	      } else {
	        startTransition();
	      }
	
	      if (!this._rendered && this._startCb) {
	        this._startCb.call(null);
	      }
	
	      // HACK:
	      // set rendered to true after the transition start, so
	      // that components that are acitvated synchronously know
	      // whether it is the initial render.
	      this._rendered = true;
	    };
	
	    /**
	     * Set current to the new transition.
	     * This is called by the transition object when the
	     * validation of a route has succeeded.
	     *
	     * @param {Transition} transition
	     */
	
	    Router.prototype._onTransitionValidated = function _onTransitionValidated(transition) {
	      // set current route
	      var route = this._currentRoute = transition.to;
	      // update route context for all children
	      if (this.app.$route !== route) {
	        this.app.$route = route;
	        this._children.forEach(function (child) {
	          child.$route = route;
	        });
	      }
	      // call global after hook
	      if (this._afterEachHooks.length) {
	        this._afterEachHooks.forEach(function (hook) {
	          return hook.call(null, {
	            to: transition.to,
	            from: transition.from
	          });
	        });
	      }
	      this._currentTransition.done = true;
	    };
	
	    /**
	     * Handle stuff after the transition.
	     *
	     * @param {Route} route
	     * @param {Object} [state]
	     * @param {String} [anchor]
	     */
	
	    Router.prototype._postTransition = function _postTransition(route, state, anchor) {
	      // handle scroll positions
	      // saved scroll positions take priority
	      // then we check if the path has an anchor
	      var pos = state && state.pos;
	      if (pos && this._saveScrollPosition) {
	        Vue.nextTick(function () {
	          window.scrollTo(pos.x, pos.y);
	        });
	      } else if (anchor) {
	        Vue.nextTick(function () {
	          var el = document.getElementById(anchor.slice(1));
	          if (el) {
	            window.scrollTo(window.scrollX, el.offsetTop);
	          }
	        });
	      }
	    };
	
	    return Router;
	  })();
	
	  function guardComponent(path, handler) {
	    var comp = handler.component;
	    if (Vue.util.isPlainObject(comp)) {
	      comp = handler.component = Vue.extend(comp);
	    }
	    /* istanbul ignore if */
	    if (typeof comp !== 'function') {
	      handler.component = null;
	      warn$1('invalid component for route "' + path + '".');
	    }
	  }
	
	  /* Installation */
	
	  Router.installed = false;
	
	  /**
	   * Installation interface.
	   * Install the necessary directives.
	   */
	
	  Router.install = function (externalVue) {
	    /* istanbul ignore if */
	    if (Router.installed) {
	      warn$1('already installed.');
	      return;
	    }
	    Vue = externalVue;
	    applyOverride(Vue);
	    View(Vue);
	    Link(Vue);
	    exports$1.Vue = Vue;
	    Router.installed = true;
	  };
	
	  // auto install
	  /* istanbul ignore if */
	  if (typeof window !== 'undefined' && window.Vue) {
	    window.Vue.use(Router);
	  }
	
	  return Router;
	
	}));

/***/ },
/* 133 */
/*!**********************************!*\
  !*** ./~/vue/dist/vue.common.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process, jQuery) {/*!
	 * Vue.js v1.0.26
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	'use strict';
	
	function set(obj, key, val) {
	  if (hasOwn(obj, key)) {
	    obj[key] = val;
	    return;
	  }
	  if (obj._isVue) {
	    set(obj._data, key, val);
	    return;
	  }
	  var ob = obj.__ob__;
	  if (!ob) {
	    obj[key] = val;
	    return;
	  }
	  ob.convert(key, val);
	  ob.dep.notify();
	  if (ob.vms) {
	    var i = ob.vms.length;
	    while (i--) {
	      var vm = ob.vms[i];
	      vm._proxy(key);
	      vm._digest();
	    }
	  }
	  return val;
	}
	
	/**
	 * Delete a property and trigger change if necessary.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 */
	
	function del(obj, key) {
	  if (!hasOwn(obj, key)) {
	    return;
	  }
	  delete obj[key];
	  var ob = obj.__ob__;
	  if (!ob) {
	    if (obj._isVue) {
	      delete obj._data[key];
	      obj._digest();
	    }
	    return;
	  }
	  ob.dep.notify();
	  if (ob.vms) {
	    var i = ob.vms.length;
	    while (i--) {
	      var vm = ob.vms[i];
	      vm._unproxy(key);
	      vm._digest();
	    }
	  }
	}
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	/**
	 * Check whether the object has the property.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @return {Boolean}
	 */
	
	function hasOwn(obj, key) {
	  return hasOwnProperty.call(obj, key);
	}
	
	/**
	 * Check if an expression is a literal value.
	 *
	 * @param {String} exp
	 * @return {Boolean}
	 */
	
	var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;
	
	function isLiteral(exp) {
	  return literalValueRE.test(exp);
	}
	
	/**
	 * Check if a string starts with $ or _
	 *
	 * @param {String} str
	 * @return {Boolean}
	 */
	
	function isReserved(str) {
	  var c = (str + '').charCodeAt(0);
	  return c === 0x24 || c === 0x5F;
	}
	
	/**
	 * Guard text output, make sure undefined outputs
	 * empty string
	 *
	 * @param {*} value
	 * @return {String}
	 */
	
	function _toString(value) {
	  return value == null ? '' : value.toString();
	}
	
	/**
	 * Check and convert possible numeric strings to numbers
	 * before setting back to data
	 *
	 * @param {*} value
	 * @return {*|Number}
	 */
	
	function toNumber(value) {
	  if (typeof value !== 'string') {
	    return value;
	  } else {
	    var parsed = Number(value);
	    return isNaN(parsed) ? value : parsed;
	  }
	}
	
	/**
	 * Convert string boolean literals into real booleans.
	 *
	 * @param {*} value
	 * @return {*|Boolean}
	 */
	
	function toBoolean(value) {
	  return value === 'true' ? true : value === 'false' ? false : value;
	}
	
	/**
	 * Strip quotes from a string
	 *
	 * @param {String} str
	 * @return {String | false}
	 */
	
	function stripQuotes(str) {
	  var a = str.charCodeAt(0);
	  var b = str.charCodeAt(str.length - 1);
	  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
	}
	
	/**
	 * Camelize a hyphen-delmited string.
	 *
	 * @param {String} str
	 * @return {String}
	 */
	
	var camelizeRE = /-(\w)/g;
	
	function camelize(str) {
	  return str.replace(camelizeRE, toUpper);
	}
	
	function toUpper(_, c) {
	  return c ? c.toUpperCase() : '';
	}
	
	/**
	 * Hyphenate a camelCase string.
	 *
	 * @param {String} str
	 * @return {String}
	 */
	
	var hyphenateRE = /([a-z\d])([A-Z])/g;
	
	function hyphenate(str) {
	  return str.replace(hyphenateRE, '$1-$2').toLowerCase();
	}
	
	/**
	 * Converts hyphen/underscore/slash delimitered names into
	 * camelized classNames.
	 *
	 * e.g. my-component => MyComponent
	 *      some_else    => SomeElse
	 *      some/comp    => SomeComp
	 *
	 * @param {String} str
	 * @return {String}
	 */
	
	var classifyRE = /(?:^|[-_\/])(\w)/g;
	
	function classify(str) {
	  return str.replace(classifyRE, toUpper);
	}
	
	/**
	 * Simple bind, faster than native
	 *
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @return {Function}
	 */
	
	function bind(fn, ctx) {
	  return function (a) {
	    var l = arguments.length;
	    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
	  };
	}
	
	/**
	 * Convert an Array-like object to a real Array.
	 *
	 * @param {Array-like} list
	 * @param {Number} [start] - start index
	 * @return {Array}
	 */
	
	function toArray(list, start) {
	  start = start || 0;
	  var i = list.length - start;
	  var ret = new Array(i);
	  while (i--) {
	    ret[i] = list[i + start];
	  }
	  return ret;
	}
	
	/**
	 * Mix properties into target object.
	 *
	 * @param {Object} to
	 * @param {Object} from
	 */
	
	function extend(to, from) {
	  var keys = Object.keys(from);
	  var i = keys.length;
	  while (i--) {
	    to[keys[i]] = from[keys[i]];
	  }
	  return to;
	}
	
	/**
	 * Quick object check - this is primarily used to tell
	 * Objects from primitive values when we know the value
	 * is a JSON-compliant type.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */
	
	function isObject(obj) {
	  return obj !== null && typeof obj === 'object';
	}
	
	/**
	 * Strict object type check. Only returns true
	 * for plain JavaScript objects.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */
	
	var toString = Object.prototype.toString;
	var OBJECT_STRING = '[object Object]';
	
	function isPlainObject(obj) {
	  return toString.call(obj) === OBJECT_STRING;
	}
	
	/**
	 * Array type check.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */
	
	var isArray = Array.isArray;
	
	/**
	 * Define a property.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {*} val
	 * @param {Boolean} [enumerable]
	 */
	
	function def(obj, key, val, enumerable) {
	  Object.defineProperty(obj, key, {
	    value: val,
	    enumerable: !!enumerable,
	    writable: true,
	    configurable: true
	  });
	}
	
	/**
	 * Debounce a function so it only gets called after the
	 * input stops arriving after the given wait period.
	 *
	 * @param {Function} func
	 * @param {Number} wait
	 * @return {Function} - the debounced function
	 */
	
	function _debounce(func, wait) {
	  var timeout, args, context, timestamp, result;
	  var later = function later() {
	    var last = Date.now() - timestamp;
	    if (last < wait && last >= 0) {
	      timeout = setTimeout(later, wait - last);
	    } else {
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    }
	  };
	  return function () {
	    context = this;
	    args = arguments;
	    timestamp = Date.now();
	    if (!timeout) {
	      timeout = setTimeout(later, wait);
	    }
	    return result;
	  };
	}
	
	/**
	 * Manual indexOf because it's slightly faster than
	 * native.
	 *
	 * @param {Array} arr
	 * @param {*} obj
	 */
	
	function indexOf(arr, obj) {
	  var i = arr.length;
	  while (i--) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	}
	
	/**
	 * Make a cancellable version of an async callback.
	 *
	 * @param {Function} fn
	 * @return {Function}
	 */
	
	function cancellable(fn) {
	  var cb = function cb() {
	    if (!cb.cancelled) {
	      return fn.apply(this, arguments);
	    }
	  };
	  cb.cancel = function () {
	    cb.cancelled = true;
	  };
	  return cb;
	}
	
	/**
	 * Check if two values are loosely equal - that is,
	 * if they are plain objects, do they have the same shape?
	 *
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 */
	
	function looseEqual(a, b) {
	  /* eslint-disable eqeqeq */
	  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);
	  /* eslint-enable eqeqeq */
	}
	
	var hasProto = ('__proto__' in {});
	
	// Browser environment sniffing
	var inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';
	
	// detect devtools
	var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
	
	// UA sniffing for working around browser-specific quirks
	var UA = inBrowser && window.navigator.userAgent.toLowerCase();
	var isIE = UA && UA.indexOf('trident') > 0;
	var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
	var isAndroid = UA && UA.indexOf('android') > 0;
	var isIos = UA && /(iphone|ipad|ipod|ios)/i.test(UA);
	var iosVersionMatch = isIos && UA.match(/os ([\d_]+)/);
	var iosVersion = iosVersionMatch && iosVersionMatch[1].split('_');
	
	// detecting iOS UIWebView by indexedDB
	var hasMutationObserverBug = iosVersion && Number(iosVersion[0]) >= 9 && Number(iosVersion[1]) >= 3 && !window.indexedDB;
	
	var transitionProp = undefined;
	var transitionEndEvent = undefined;
	var animationProp = undefined;
	var animationEndEvent = undefined;
	
	// Transition property/event sniffing
	if (inBrowser && !isIE9) {
	  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;
	  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;
	  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';
	  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';
	  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';
	  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';
	}
	
	/**
	 * Defer a task to execute it asynchronously. Ideally this
	 * should be executed as a microtask, so we leverage
	 * MutationObserver if it's available, and fallback to
	 * setTimeout(0).
	 *
	 * @param {Function} cb
	 * @param {Object} ctx
	 */
	
	var nextTick = (function () {
	  var callbacks = [];
	  var pending = false;
	  var timerFunc;
	  function nextTickHandler() {
	    pending = false;
	    var copies = callbacks.slice(0);
	    callbacks = [];
	    for (var i = 0; i < copies.length; i++) {
	      copies[i]();
	    }
	  }
	
	  /* istanbul ignore if */
	  if (typeof MutationObserver !== 'undefined' && !hasMutationObserverBug) {
	    var counter = 1;
	    var observer = new MutationObserver(nextTickHandler);
	    var textNode = document.createTextNode(counter);
	    observer.observe(textNode, {
	      characterData: true
	    });
	    timerFunc = function () {
	      counter = (counter + 1) % 2;
	      textNode.data = counter;
	    };
	  } else {
	    // webpack attempts to inject a shim for setImmediate
	    // if it is used as a global, so we have to work around that to
	    // avoid bundling unnecessary code.
	    var context = inBrowser ? window : typeof global !== 'undefined' ? global : {};
	    timerFunc = context.setImmediate || setTimeout;
	  }
	  return function (cb, ctx) {
	    var func = ctx ? function () {
	      cb.call(ctx);
	    } : cb;
	    callbacks.push(func);
	    if (pending) return;
	    pending = true;
	    timerFunc(nextTickHandler, 0);
	  };
	})();
	
	var _Set = undefined;
	/* istanbul ignore if */
	if (typeof Set !== 'undefined' && Set.toString().match(/native code/)) {
	  // use native Set when available.
	  _Set = Set;
	} else {
	  // a non-standard Set polyfill that only works with primitive keys.
	  _Set = function () {
	    this.set = Object.create(null);
	  };
	  _Set.prototype.has = function (key) {
	    return this.set[key] !== undefined;
	  };
	  _Set.prototype.add = function (key) {
	    this.set[key] = 1;
	  };
	  _Set.prototype.clear = function () {
	    this.set = Object.create(null);
	  };
	}
	
	function Cache(limit) {
	  this.size = 0;
	  this.limit = limit;
	  this.head = this.tail = undefined;
	  this._keymap = Object.create(null);
	}
	
	var p = Cache.prototype;
	
	/**
	 * Put <value> into the cache associated with <key>.
	 * Returns the entry which was removed to make room for
	 * the new entry. Otherwise undefined is returned.
	 * (i.e. if there was enough room already).
	 *
	 * @param {String} key
	 * @param {*} value
	 * @return {Entry|undefined}
	 */
	
	p.put = function (key, value) {
	  var removed;
	
	  var entry = this.get(key, true);
	  if (!entry) {
	    if (this.size === this.limit) {
	      removed = this.shift();
	    }
	    entry = {
	      key: key
	    };
	    this._keymap[key] = entry;
	    if (this.tail) {
	      this.tail.newer = entry;
	      entry.older = this.tail;
	    } else {
	      this.head = entry;
	    }
	    this.tail = entry;
	    this.size++;
	  }
	  entry.value = value;
	
	  return removed;
	};
	
	/**
	 * Purge the least recently used (oldest) entry from the
	 * cache. Returns the removed entry or undefined if the
	 * cache was empty.
	 */
	
	p.shift = function () {
	  var entry = this.head;
	  if (entry) {
	    this.head = this.head.newer;
	    this.head.older = undefined;
	    entry.newer = entry.older = undefined;
	    this._keymap[entry.key] = undefined;
	    this.size--;
	  }
	  return entry;
	};
	
	/**
	 * Get and register recent use of <key>. Returns the value
	 * associated with <key> or undefined if not in cache.
	 *
	 * @param {String} key
	 * @param {Boolean} returnEntry
	 * @return {Entry|*}
	 */
	
	p.get = function (key, returnEntry) {
	  var entry = this._keymap[key];
	  if (entry === undefined) return;
	  if (entry === this.tail) {
	    return returnEntry ? entry : entry.value;
	  }
	  // HEAD--------------TAIL
	  //   <.older   .newer>
	  //  <--- add direction --
	  //   A  B  C  <D>  E
	  if (entry.newer) {
	    if (entry === this.head) {
	      this.head = entry.newer;
	    }
	    entry.newer.older = entry.older; // C <-- E.
	  }
	  if (entry.older) {
	    entry.older.newer = entry.newer; // C. --> E
	  }
	  entry.newer = undefined; // D --x
	  entry.older = this.tail; // D. --> E
	  if (this.tail) {
	    this.tail.newer = entry; // E. <-- D
	  }
	  this.tail = entry;
	  return returnEntry ? entry : entry.value;
	};
	
	var cache$1 = new Cache(1000);
	var filterTokenRE = /[^\s'"]+|'[^']*'|"[^"]*"/g;
	var reservedArgRE = /^in$|^-?\d+/;
	
	/**
	 * Parser state
	 */
	
	var str;
	var dir;
	var c;
	var prev;
	var i;
	var l;
	var lastFilterIndex;
	var inSingle;
	var inDouble;
	var curly;
	var square;
	var paren;
	/**
	 * Push a filter to the current directive object
	 */
	
	function pushFilter() {
	  var exp = str.slice(lastFilterIndex, i).trim();
	  var filter;
	  if (exp) {
	    filter = {};
	    var tokens = exp.match(filterTokenRE);
	    filter.name = tokens[0];
	    if (tokens.length > 1) {
	      filter.args = tokens.slice(1).map(processFilterArg);
	    }
	  }
	  if (filter) {
	    (dir.filters = dir.filters || []).push(filter);
	  }
	  lastFilterIndex = i + 1;
	}
	
	/**
	 * Check if an argument is dynamic and strip quotes.
	 *
	 * @param {String} arg
	 * @return {Object}
	 */
	
	function processFilterArg(arg) {
	  if (reservedArgRE.test(arg)) {
	    return {
	      value: toNumber(arg),
	      dynamic: false
	    };
	  } else {
	    var stripped = stripQuotes(arg);
	    var dynamic = stripped === arg;
	    return {
	      value: dynamic ? arg : stripped,
	      dynamic: dynamic
	    };
	  }
	}
	
	/**
	 * Parse a directive value and extract the expression
	 * and its filters into a descriptor.
	 *
	 * Example:
	 *
	 * "a + 1 | uppercase" will yield:
	 * {
	 *   expression: 'a + 1',
	 *   filters: [
	 *     { name: 'uppercase', args: null }
	 *   ]
	 * }
	 *
	 * @param {String} s
	 * @return {Object}
	 */
	
	function parseDirective(s) {
	  var hit = cache$1.get(s);
	  if (hit) {
	    return hit;
	  }
	
	  // reset parser state
	  str = s;
	  inSingle = inDouble = false;
	  curly = square = paren = 0;
	  lastFilterIndex = 0;
	  dir = {};
	
	  for (i = 0, l = str.length; i < l; i++) {
	    prev = c;
	    c = str.charCodeAt(i);
	    if (inSingle) {
	      // check single quote
	      if (c === 0x27 && prev !== 0x5C) inSingle = !inSingle;
	    } else if (inDouble) {
	      // check double quote
	      if (c === 0x22 && prev !== 0x5C) inDouble = !inDouble;
	    } else if (c === 0x7C && // pipe
	    str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {
	      if (dir.expression == null) {
	        // first filter, end of expression
	        lastFilterIndex = i + 1;
	        dir.expression = str.slice(0, i).trim();
	      } else {
	        // already has filter
	        pushFilter();
	      }
	    } else {
	      switch (c) {
	        case 0x22:
	          inDouble = true;break; // "
	        case 0x27:
	          inSingle = true;break; // '
	        case 0x28:
	          paren++;break; // (
	        case 0x29:
	          paren--;break; // )
	        case 0x5B:
	          square++;break; // [
	        case 0x5D:
	          square--;break; // ]
	        case 0x7B:
	          curly++;break; // {
	        case 0x7D:
	          curly--;break; // }
	      }
	    }
	  }
	
	  if (dir.expression == null) {
	    dir.expression = str.slice(0, i).trim();
	  } else if (lastFilterIndex !== 0) {
	    pushFilter();
	  }
	
	  cache$1.put(s, dir);
	  return dir;
	}
	
	var directive = Object.freeze({
	  parseDirective: parseDirective
	});
	
	var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
	var cache = undefined;
	var tagRE = undefined;
	var htmlRE = undefined;
	/**
	 * Escape a string so it can be used in a RegExp
	 * constructor.
	 *
	 * @param {String} str
	 */
	
	function escapeRegex(str) {
	  return str.replace(regexEscapeRE, '\\$&');
	}
	
	function compileRegex() {
	  var open = escapeRegex(config.delimiters[0]);
	  var close = escapeRegex(config.delimiters[1]);
	  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);
	  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);
	  tagRE = new RegExp(unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\n)+?)' + close, 'g');
	  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '$');
	  // reset cache
	  cache = new Cache(1000);
	}
	
	/**
	 * Parse a template text string into an array of tokens.
	 *
	 * @param {String} text
	 * @return {Array<Object> | null}
	 *               - {String} type
	 *               - {String} value
	 *               - {Boolean} [html]
	 *               - {Boolean} [oneTime]
	 */
	
	function parseText(text) {
	  if (!cache) {
	    compileRegex();
	  }
	  var hit = cache.get(text);
	  if (hit) {
	    return hit;
	  }
	  if (!tagRE.test(text)) {
	    return null;
	  }
	  var tokens = [];
	  var lastIndex = tagRE.lastIndex = 0;
	  var match, index, html, value, first, oneTime;
	  /* eslint-disable no-cond-assign */
	  while (match = tagRE.exec(text)) {
	    /* eslint-enable no-cond-assign */
	    index = match.index;
	    // push text token
	    if (index > lastIndex) {
	      tokens.push({
	        value: text.slice(lastIndex, index)
	      });
	    }
	    // tag token
	    html = htmlRE.test(match[0]);
	    value = html ? match[1] : match[2];
	    first = value.charCodeAt(0);
	    oneTime = first === 42; // *
	    value = oneTime ? value.slice(1) : value;
	    tokens.push({
	      tag: true,
	      value: value.trim(),
	      html: html,
	      oneTime: oneTime
	    });
	    lastIndex = index + match[0].length;
	  }
	  if (lastIndex < text.length) {
	    tokens.push({
	      value: text.slice(lastIndex)
	    });
	  }
	  cache.put(text, tokens);
	  return tokens;
	}
	
	/**
	 * Format a list of tokens into an expression.
	 * e.g. tokens parsed from 'a {{b}} c' can be serialized
	 * into one single expression as '"a " + b + " c"'.
	 *
	 * @param {Array} tokens
	 * @param {Vue} [vm]
	 * @return {String}
	 */
	
	function tokensToExp(tokens, vm) {
	  if (tokens.length > 1) {
	    return tokens.map(function (token) {
	      return formatToken(token, vm);
	    }).join('+');
	  } else {
	    return formatToken(tokens[0], vm, true);
	  }
	}
	
	/**
	 * Format a single token.
	 *
	 * @param {Object} token
	 * @param {Vue} [vm]
	 * @param {Boolean} [single]
	 * @return {String}
	 */
	
	function formatToken(token, vm, single) {
	  return token.tag ? token.oneTime && vm ? '"' + vm.$eval(token.value) + '"' : inlineFilters(token.value, single) : '"' + token.value + '"';
	}
	
	/**
	 * For an attribute with multiple interpolation tags,
	 * e.g. attr="some-{{thing | filter}}", in order to combine
	 * the whole thing into a single watchable expression, we
	 * have to inline those filters. This function does exactly
	 * that. This is a bit hacky but it avoids heavy changes
	 * to directive parser and watcher mechanism.
	 *
	 * @param {String} exp
	 * @param {Boolean} single
	 * @return {String}
	 */
	
	var filterRE = /[^|]\|[^|]/;
	function inlineFilters(exp, single) {
	  if (!filterRE.test(exp)) {
	    return single ? exp : '(' + exp + ')';
	  } else {
	    var dir = parseDirective(exp);
	    if (!dir.filters) {
	      return '(' + exp + ')';
	    } else {
	      return 'this._applyFilters(' + dir.expression + // value
	      ',null,' + // oldValue (null for read)
	      JSON.stringify(dir.filters) + // filter descriptors
	      ',false)'; // write?
	    }
	  }
	}
	
	var text = Object.freeze({
	  compileRegex: compileRegex,
	  parseText: parseText,
	  tokensToExp: tokensToExp
	});
	
	var delimiters = ['{{', '}}'];
	var unsafeDelimiters = ['{{{', '}}}'];
	
	var config = Object.defineProperties({
	
	  /**
	   * Whether to print debug messages.
	   * Also enables stack trace for warnings.
	   *
	   * @type {Boolean}
	   */
	
	  debug: false,
	
	  /**
	   * Whether to suppress warnings.
	   *
	   * @type {Boolean}
	   */
	
	  silent: false,
	
	  /**
	   * Whether to use async rendering.
	   */
	
	  async: true,
	
	  /**
	   * Whether to warn against errors caught when evaluating
	   * expressions.
	   */
	
	  warnExpressionErrors: true,
	
	  /**
	   * Whether to allow devtools inspection.
	   * Disabled by default in production builds.
	   */
	
	  devtools: process.env.NODE_ENV !== 'production',
	
	  /**
	   * Internal flag to indicate the delimiters have been
	   * changed.
	   *
	   * @type {Boolean}
	   */
	
	  _delimitersChanged: true,
	
	  /**
	   * List of asset types that a component can own.
	   *
	   * @type {Array}
	   */
	
	  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],
	
	  /**
	   * prop binding modes
	   */
	
	  _propBindingModes: {
	    ONE_WAY: 0,
	    TWO_WAY: 1,
	    ONE_TIME: 2
	  },
	
	  /**
	   * Max circular updates allowed in a batcher flush cycle.
	   */
	
	  _maxUpdateCount: 100
	
	}, {
	  delimiters: { /**
	                 * Interpolation delimiters. Changing these would trigger
	                 * the text parser to re-compile the regular expressions.
	                 *
	                 * @type {Array<String>}
	                 */
	
	    get: function get() {
	      return delimiters;
	    },
	    set: function set(val) {
	      delimiters = val;
	      compileRegex();
	    },
	    configurable: true,
	    enumerable: true
	  },
	  unsafeDelimiters: {
	    get: function get() {
	      return unsafeDelimiters;
	    },
	    set: function set(val) {
	      unsafeDelimiters = val;
	      compileRegex();
	    },
	    configurable: true,
	    enumerable: true
	  }
	});
	
	var warn = undefined;
	var formatComponentName = undefined;
	
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var hasConsole = typeof console !== 'undefined';
	
	    warn = function (msg, vm) {
	      if (hasConsole && !config.silent) {
	        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));
	      }
	    };
	
	    formatComponentName = function (vm) {
	      var name = vm._isVue ? vm.$options.name : vm.name;
	      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';
	    };
	  })();
	}
	
	/**
	 * Append with transition.
	 *
	 * @param {Element} el
	 * @param {Element} target
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function appendWithTransition(el, target, vm, cb) {
	  applyTransition(el, 1, function () {
	    target.appendChild(el);
	  }, vm, cb);
	}
	
	/**
	 * InsertBefore with transition.
	 *
	 * @param {Element} el
	 * @param {Element} target
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function beforeWithTransition(el, target, vm, cb) {
	  applyTransition(el, 1, function () {
	    before(el, target);
	  }, vm, cb);
	}
	
	/**
	 * Remove with transition.
	 *
	 * @param {Element} el
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function removeWithTransition(el, vm, cb) {
	  applyTransition(el, -1, function () {
	    remove(el);
	  }, vm, cb);
	}
	
	/**
	 * Apply transitions with an operation callback.
	 *
	 * @param {Element} el
	 * @param {Number} direction
	 *                  1: enter
	 *                 -1: leave
	 * @param {Function} op - the actual DOM operation
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function applyTransition(el, direction, op, vm, cb) {
	  var transition = el.__v_trans;
	  if (!transition ||
	  // skip if there are no js hooks and CSS transition is
	  // not supported
	  !transition.hooks && !transitionEndEvent ||
	  // skip transitions for initial compile
	  !vm._isCompiled ||
	  // if the vm is being manipulated by a parent directive
	  // during the parent's compilation phase, skip the
	  // animation.
	  vm.$parent && !vm.$parent._isCompiled) {
	    op();
	    if (cb) cb();
	    return;
	  }
	  var action = direction > 0 ? 'enter' : 'leave';
	  transition[action](op, cb);
	}
	
	var transition = Object.freeze({
	  appendWithTransition: appendWithTransition,
	  beforeWithTransition: beforeWithTransition,
	  removeWithTransition: removeWithTransition,
	  applyTransition: applyTransition
	});
	
	/**
	 * Query an element selector if it's not an element already.
	 *
	 * @param {String|Element} el
	 * @return {Element}
	 */
	
	function query(el) {
	  if (typeof el === 'string') {
	    var selector = el;
	    el = document.querySelector(el);
	    if (!el) {
	      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);
	    }
	  }
	  return el;
	}
	
	/**
	 * Check if a node is in the document.
	 * Note: document.documentElement.contains should work here
	 * but always returns false for comment nodes in phantomjs,
	 * making unit tests difficult. This is fixed by doing the
	 * contains() check on the node's parentNode instead of
	 * the node itself.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */
	
	function inDoc(node) {
	  if (!node) return false;
	  var doc = node.ownerDocument.documentElement;
	  var parent = node.parentNode;
	  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));
	}
	
	/**
	 * Get and remove an attribute from a node.
	 *
	 * @param {Node} node
	 * @param {String} _attr
	 */
	
	function getAttr(node, _attr) {
	  var val = node.getAttribute(_attr);
	  if (val !== null) {
	    node.removeAttribute(_attr);
	  }
	  return val;
	}
	
	/**
	 * Get an attribute with colon or v-bind: prefix.
	 *
	 * @param {Node} node
	 * @param {String} name
	 * @return {String|null}
	 */
	
	function getBindAttr(node, name) {
	  var val = getAttr(node, ':' + name);
	  if (val === null) {
	    val = getAttr(node, 'v-bind:' + name);
	  }
	  return val;
	}
	
	/**
	 * Check the presence of a bind attribute.
	 *
	 * @param {Node} node
	 * @param {String} name
	 * @return {Boolean}
	 */
	
	function hasBindAttr(node, name) {
	  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);
	}
	
	/**
	 * Insert el before target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */
	
	function before(el, target) {
	  target.parentNode.insertBefore(el, target);
	}
	
	/**
	 * Insert el after target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */
	
	function after(el, target) {
	  if (target.nextSibling) {
	    before(el, target.nextSibling);
	  } else {
	    target.parentNode.appendChild(el);
	  }
	}
	
	/**
	 * Remove el from DOM
	 *
	 * @param {Element} el
	 */
	
	function remove(el) {
	  el.parentNode.removeChild(el);
	}
	
	/**
	 * Prepend el to target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */
	
	function prepend(el, target) {
	  if (target.firstChild) {
	    before(el, target.firstChild);
	  } else {
	    target.appendChild(el);
	  }
	}
	
	/**
	 * Replace target with el
	 *
	 * @param {Element} target
	 * @param {Element} el
	 */
	
	function replace(target, el) {
	  var parent = target.parentNode;
	  if (parent) {
	    parent.replaceChild(el, target);
	  }
	}
	
	/**
	 * Add event listener shorthand.
	 *
	 * @param {Element} el
	 * @param {String} event
	 * @param {Function} cb
	 * @param {Boolean} [useCapture]
	 */
	
	function on(el, event, cb, useCapture) {
	  el.addEventListener(event, cb, useCapture);
	}
	
	/**
	 * Remove event listener shorthand.
	 *
	 * @param {Element} el
	 * @param {String} event
	 * @param {Function} cb
	 */
	
	function off(el, event, cb) {
	  el.removeEventListener(event, cb);
	}
	
	/**
	 * For IE9 compat: when both class and :class are present
	 * getAttribute('class') returns wrong value...
	 *
	 * @param {Element} el
	 * @return {String}
	 */
	
	function getClass(el) {
	  var classname = el.className;
	  if (typeof classname === 'object') {
	    classname = classname.baseVal || '';
	  }
	  return classname;
	}
	
	/**
	 * In IE9, setAttribute('class') will result in empty class
	 * if the element also has the :class attribute; However in
	 * PhantomJS, setting `className` does not work on SVG elements...
	 * So we have to do a conditional check here.
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */
	
	function setClass(el, cls) {
	  /* istanbul ignore if */
	  if (isIE9 && !/svg$/.test(el.namespaceURI)) {
	    el.className = cls;
	  } else {
	    el.setAttribute('class', cls);
	  }
	}
	
	/**
	 * Add class with compatibility for IE & SVG
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */
	
	function addClass(el, cls) {
	  if (el.classList) {
	    el.classList.add(cls);
	  } else {
	    var cur = ' ' + getClass(el) + ' ';
	    if (cur.indexOf(' ' + cls + ' ') < 0) {
	      setClass(el, (cur + cls).trim());
	    }
	  }
	}
	
	/**
	 * Remove class with compatibility for IE & SVG
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */
	
	function removeClass(el, cls) {
	  if (el.classList) {
	    el.classList.remove(cls);
	  } else {
	    var cur = ' ' + getClass(el) + ' ';
	    var tar = ' ' + cls + ' ';
	    while (cur.indexOf(tar) >= 0) {
	      cur = cur.replace(tar, ' ');
	    }
	    setClass(el, cur.trim());
	  }
	  if (!el.className) {
	    el.removeAttribute('class');
	  }
	}
	
	/**
	 * Extract raw content inside an element into a temporary
	 * container div
	 *
	 * @param {Element} el
	 * @param {Boolean} asFragment
	 * @return {Element|DocumentFragment}
	 */
	
	function extractContent(el, asFragment) {
	  var child;
	  var rawContent;
	  /* istanbul ignore if */
	  if (isTemplate(el) && isFragment(el.content)) {
	    el = el.content;
	  }
	  if (el.hasChildNodes()) {
	    trimNode(el);
	    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');
	    /* eslint-disable no-cond-assign */
	    while (child = el.firstChild) {
	      /* eslint-enable no-cond-assign */
	      rawContent.appendChild(child);
	    }
	  }
	  return rawContent;
	}
	
	/**
	 * Trim possible empty head/tail text and comment
	 * nodes inside a parent.
	 *
	 * @param {Node} node
	 */
	
	function trimNode(node) {
	  var child;
	  /* eslint-disable no-sequences */
	  while ((child = node.firstChild, isTrimmable(child))) {
	    node.removeChild(child);
	  }
	  while ((child = node.lastChild, isTrimmable(child))) {
	    node.removeChild(child);
	  }
	  /* eslint-enable no-sequences */
	}
	
	function isTrimmable(node) {
	  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);
	}
	
	/**
	 * Check if an element is a template tag.
	 * Note if the template appears inside an SVG its tagName
	 * will be in lowercase.
	 *
	 * @param {Element} el
	 */
	
	function isTemplate(el) {
	  return el.tagName && el.tagName.toLowerCase() === 'template';
	}
	
	/**
	 * Create an "anchor" for performing dom insertion/removals.
	 * This is used in a number of scenarios:
	 * - fragment instance
	 * - v-html
	 * - v-if
	 * - v-for
	 * - component
	 *
	 * @param {String} content
	 * @param {Boolean} persist - IE trashes empty textNodes on
	 *                            cloneNode(true), so in certain
	 *                            cases the anchor needs to be
	 *                            non-empty to be persisted in
	 *                            templates.
	 * @return {Comment|Text}
	 */
	
	function createAnchor(content, persist) {
	  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');
	  anchor.__v_anchor = true;
	  return anchor;
	}
	
	/**
	 * Find a component ref attribute that starts with $.
	 *
	 * @param {Element} node
	 * @return {String|undefined}
	 */
	
	var refRE = /^v-ref:/;
	
	function findRef(node) {
	  if (node.hasAttributes()) {
	    var attrs = node.attributes;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      var name = attrs[i].name;
	      if (refRE.test(name)) {
	        return camelize(name.replace(refRE, ''));
	      }
	    }
	  }
	}
	
	/**
	 * Map a function to a range of nodes .
	 *
	 * @param {Node} node
	 * @param {Node} end
	 * @param {Function} op
	 */
	
	function mapNodeRange(node, end, op) {
	  var next;
	  while (node !== end) {
	    next = node.nextSibling;
	    op(node);
	    node = next;
	  }
	  op(end);
	}
	
	/**
	 * Remove a range of nodes with transition, store
	 * the nodes in a fragment with correct ordering,
	 * and call callback when done.
	 *
	 * @param {Node} start
	 * @param {Node} end
	 * @param {Vue} vm
	 * @param {DocumentFragment} frag
	 * @param {Function} cb
	 */
	
	function removeNodeRange(start, end, vm, frag, cb) {
	  var done = false;
	  var removed = 0;
	  var nodes = [];
	  mapNodeRange(start, end, function (node) {
	    if (node === end) done = true;
	    nodes.push(node);
	    removeWithTransition(node, vm, onRemoved);
	  });
	  function onRemoved() {
	    removed++;
	    if (done && removed >= nodes.length) {
	      for (var i = 0; i < nodes.length; i++) {
	        frag.appendChild(nodes[i]);
	      }
	      cb && cb();
	    }
	  }
	}
	
	/**
	 * Check if a node is a DocumentFragment.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */
	
	function isFragment(node) {
	  return node && node.nodeType === 11;
	}
	
	/**
	 * Get outerHTML of elements, taking care
	 * of SVG elements in IE as well.
	 *
	 * @param {Element} el
	 * @return {String}
	 */
	
	function getOuterHTML(el) {
	  if (el.outerHTML) {
	    return el.outerHTML;
	  } else {
	    var container = document.createElement('div');
	    container.appendChild(el.cloneNode(true));
	    return container.innerHTML;
	  }
	}
	
	var commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;
	var reservedTagRE = /^(slot|partial|component)$/i;
	
	var isUnknownElement = undefined;
	if (process.env.NODE_ENV !== 'production') {
	  isUnknownElement = function (el, tag) {
	    if (tag.indexOf('-') > -1) {
	      // http://stackoverflow.com/a/28210364/1070244
	      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
	    } else {
	      return (/HTMLUnknownElement/.test(el.toString()) &&
	        // Chrome returns unknown for several HTML5 elements.
	        // https://code.google.com/p/chromium/issues/detail?id=540526
	        // Firefox returns unknown for some "Interactive elements."
	        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)
	      );
	    }
	  };
	}
	
	/**
	 * Check if an element is a component, if yes return its
	 * component id.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Object|undefined}
	 */
	
	function checkComponentAttr(el, options) {
	  var tag = el.tagName.toLowerCase();
	  var hasAttrs = el.hasAttributes();
	  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {
	    if (resolveAsset(options, 'components', tag)) {
	      return { id: tag };
	    } else {
	      var is = hasAttrs && getIsBinding(el, options);
	      if (is) {
	        return is;
	      } else if (process.env.NODE_ENV !== 'production') {
	        var expectedTag = options._componentNameMap && options._componentNameMap[tag];
	        if (expectedTag) {
	          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');
	        } else if (isUnknownElement(el, tag)) {
	          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.');
	        }
	      }
	    }
	  } else if (hasAttrs) {
	    return getIsBinding(el, options);
	  }
	}
	
	/**
	 * Get "is" binding from an element.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Object|undefined}
	 */
	
	function getIsBinding(el, options) {
	  // dynamic syntax
	  var exp = el.getAttribute('is');
	  if (exp != null) {
	    if (resolveAsset(options, 'components', exp)) {
	      el.removeAttribute('is');
	      return { id: exp };
	    }
	  } else {
	    exp = getBindAttr(el, 'is');
	    if (exp != null) {
	      return { id: exp, dynamic: true };
	    }
	  }
	}
	
	/**
	 * Option overwriting strategies are functions that handle
	 * how to merge a parent option value and a child option
	 * value into the final value.
	 *
	 * All strategy functions follow the same signature:
	 *
	 * @param {*} parentVal
	 * @param {*} childVal
	 * @param {Vue} [vm]
	 */
	
	var strats = config.optionMergeStrategies = Object.create(null);
	
	/**
	 * Helper that recursively merges two data objects together.
	 */
	
	function mergeData(to, from) {
	  var key, toVal, fromVal;
	  for (key in from) {
	    toVal = to[key];
	    fromVal = from[key];
	    if (!hasOwn(to, key)) {
	      set(to, key, fromVal);
	    } else if (isObject(toVal) && isObject(fromVal)) {
	      mergeData(toVal, fromVal);
	    }
	  }
	  return to;
	}
	
	/**
	 * Data
	 */
	
	strats.data = function (parentVal, childVal, vm) {
	  if (!vm) {
	    // in a Vue.extend merge, both should be functions
	    if (!childVal) {
	      return parentVal;
	    }
	    if (typeof childVal !== 'function') {
	      process.env.NODE_ENV !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
	      return parentVal;
	    }
	    if (!parentVal) {
	      return childVal;
	    }
	    // when parentVal & childVal are both present,
	    // we need to return a function that returns the
	    // merged result of both functions... no need to
	    // check if parentVal is a function here because
	    // it has to be a function to pass previous merges.
	    return function mergedDataFn() {
	      return mergeData(childVal.call(this), parentVal.call(this));
	    };
	  } else if (parentVal || childVal) {
	    return function mergedInstanceDataFn() {
	      // instance merge
	      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
	      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
	      if (instanceData) {
	        return mergeData(instanceData, defaultData);
	      } else {
	        return defaultData;
	      }
	    };
	  }
	};
	
	/**
	 * El
	 */
	
	strats.el = function (parentVal, childVal, vm) {
	  if (!vm && childVal && typeof childVal !== 'function') {
	    process.env.NODE_ENV !== 'production' && warn('The "el" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
	    return;
	  }
	  var ret = childVal || parentVal;
	  // invoke the element factory if this is instance merge
	  return vm && typeof ret === 'function' ? ret.call(vm) : ret;
	};
	
	/**
	 * Hooks and param attributes are merged as arrays.
	 */
	
	strats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {
	  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
	};
	
	/**
	 * Assets
	 *
	 * When a vm is present (instance creation), we need to do
	 * a three-way merge between constructor options, instance
	 * options and parent options.
	 */
	
	function mergeAssets(parentVal, childVal) {
	  var res = Object.create(parentVal || null);
	  return childVal ? extend(res, guardArrayAssets(childVal)) : res;
	}
	
	config._assetTypes.forEach(function (type) {
	  strats[type + 's'] = mergeAssets;
	});
	
	/**
	 * Events & Watchers.
	 *
	 * Events & watchers hashes should not overwrite one
	 * another, so we merge them as arrays.
	 */
	
	strats.watch = strats.events = function (parentVal, childVal) {
	  if (!childVal) return parentVal;
	  if (!parentVal) return childVal;
	  var ret = {};
	  extend(ret, parentVal);
	  for (var key in childVal) {
	    var parent = ret[key];
	    var child = childVal[key];
	    if (parent && !isArray(parent)) {
	      parent = [parent];
	    }
	    ret[key] = parent ? parent.concat(child) : [child];
	  }
	  return ret;
	};
	
	/**
	 * Other object hashes.
	 */
	
	strats.props = strats.methods = strats.computed = function (parentVal, childVal) {
	  if (!childVal) return parentVal;
	  if (!parentVal) return childVal;
	  var ret = Object.create(null);
	  extend(ret, parentVal);
	  extend(ret, childVal);
	  return ret;
	};
	
	/**
	 * Default strategy.
	 */
	
	var defaultStrat = function defaultStrat(parentVal, childVal) {
	  return childVal === undefined ? parentVal : childVal;
	};
	
	/**
	 * Make sure component options get converted to actual
	 * constructors.
	 *
	 * @param {Object} options
	 */
	
	function guardComponents(options) {
	  if (options.components) {
	    var components = options.components = guardArrayAssets(options.components);
	    var ids = Object.keys(components);
	    var def;
	    if (process.env.NODE_ENV !== 'production') {
	      var map = options._componentNameMap = {};
	    }
	    for (var i = 0, l = ids.length; i < l; i++) {
	      var key = ids[i];
	      if (commonTagRE.test(key) || reservedTagRE.test(key)) {
	        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
	        continue;
	      }
	      // record a all lowercase <-> kebab-case mapping for
	      // possible custom element case error warning
	      if (process.env.NODE_ENV !== 'production') {
	        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);
	      }
	      def = components[key];
	      if (isPlainObject(def)) {
	        components[key] = Vue.extend(def);
	      }
	    }
	  }
	}
	
	/**
	 * Ensure all props option syntax are normalized into the
	 * Object-based format.
	 *
	 * @param {Object} options
	 */
	
	function guardProps(options) {
	  var props = options.props;
	  var i, val;
	  if (isArray(props)) {
	    options.props = {};
	    i = props.length;
	    while (i--) {
	      val = props[i];
	      if (typeof val === 'string') {
	        options.props[val] = null;
	      } else if (val.name) {
	        options.props[val.name] = val;
	      }
	    }
	  } else if (isPlainObject(props)) {
	    var keys = Object.keys(props);
	    i = keys.length;
	    while (i--) {
	      val = props[keys[i]];
	      if (typeof val === 'function') {
	        props[keys[i]] = { type: val };
	      }
	    }
	  }
	}
	
	/**
	 * Guard an Array-format assets option and converted it
	 * into the key-value Object format.
	 *
	 * @param {Object|Array} assets
	 * @return {Object}
	 */
	
	function guardArrayAssets(assets) {
	  if (isArray(assets)) {
	    var res = {};
	    var i = assets.length;
	    var asset;
	    while (i--) {
	      asset = assets[i];
	      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;
	      if (!id) {
	        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a "name" or "id" field.');
	      } else {
	        res[id] = asset;
	      }
	    }
	    return res;
	  }
	  return assets;
	}
	
	/**
	 * Merge two option objects into a new one.
	 * Core utility used in both instantiation and inheritance.
	 *
	 * @param {Object} parent
	 * @param {Object} child
	 * @param {Vue} [vm] - if vm is present, indicates this is
	 *                     an instantiation merge.
	 */
	
	function mergeOptions(parent, child, vm) {
	  guardComponents(child);
	  guardProps(child);
	  if (process.env.NODE_ENV !== 'production') {
	    if (child.propsData && !vm) {
	      warn('propsData can only be used as an instantiation option.');
	    }
	  }
	  var options = {};
	  var key;
	  if (child['extends']) {
	    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);
	  }
	  if (child.mixins) {
	    for (var i = 0, l = child.mixins.length; i < l; i++) {
	      var mixin = child.mixins[i];
	      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;
	      parent = mergeOptions(parent, mixinOptions, vm);
	    }
	  }
	  for (key in parent) {
	    mergeField(key);
	  }
	  for (key in child) {
	    if (!hasOwn(parent, key)) {
	      mergeField(key);
	    }
	  }
	  function mergeField(key) {
	    var strat = strats[key] || defaultStrat;
	    options[key] = strat(parent[key], child[key], vm, key);
	  }
	  return options;
	}
	
	/**
	 * Resolve an asset.
	 * This function is used because child instances need access
	 * to assets defined in its ancestor chain.
	 *
	 * @param {Object} options
	 * @param {String} type
	 * @param {String} id
	 * @param {Boolean} warnMissing
	 * @return {Object|Function}
	 */
	
	function resolveAsset(options, type, id, warnMissing) {
	  /* istanbul ignore if */
	  if (typeof id !== 'string') {
	    return;
	  }
	  var assets = options[type];
	  var camelizedId;
	  var res = assets[id] ||
	  // camelCase ID
	  assets[camelizedId = camelize(id)] ||
	  // Pascal Case ID
	  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];
	  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
	    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
	  }
	  return res;
	}
	
	var uid$1 = 0;
	
	/**
	 * A dep is an observable that can have multiple
	 * directives subscribing to it.
	 *
	 * @constructor
	 */
	function Dep() {
	  this.id = uid$1++;
	  this.subs = [];
	}
	
	// the current target watcher being evaluated.
	// this is globally unique because there could be only one
	// watcher being evaluated at any time.
	Dep.target = null;
	
	/**
	 * Add a directive subscriber.
	 *
	 * @param {Directive} sub
	 */
	
	Dep.prototype.addSub = function (sub) {
	  this.subs.push(sub);
	};
	
	/**
	 * Remove a directive subscriber.
	 *
	 * @param {Directive} sub
	 */
	
	Dep.prototype.removeSub = function (sub) {
	  this.subs.$remove(sub);
	};
	
	/**
	 * Add self as a dependency to the target watcher.
	 */
	
	Dep.prototype.depend = function () {
	  Dep.target.addDep(this);
	};
	
	/**
	 * Notify all subscribers of a new value.
	 */
	
	Dep.prototype.notify = function () {
	  // stablize the subscriber list first
	  var subs = toArray(this.subs);
	  for (var i = 0, l = subs.length; i < l; i++) {
	    subs[i].update();
	  }
	};
	
	var arrayProto = Array.prototype;
	var arrayMethods = Object.create(arrayProto)
	
	/**
	 * Intercept mutating methods and emit events
	 */
	
	;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
	  // cache original method
	  var original = arrayProto[method];
	  def(arrayMethods, method, function mutator() {
	    // avoid leaking arguments:
	    // http://jsperf.com/closure-with-arguments
	    var i = arguments.length;
	    var args = new Array(i);
	    while (i--) {
	      args[i] = arguments[i];
	    }
	    var result = original.apply(this, args);
	    var ob = this.__ob__;
	    var inserted;
	    switch (method) {
	      case 'push':
	        inserted = args;
	        break;
	      case 'unshift':
	        inserted = args;
	        break;
	      case 'splice':
	        inserted = args.slice(2);
	        break;
	    }
	    if (inserted) ob.observeArray(inserted);
	    // notify change
	    ob.dep.notify();
	    return result;
	  });
	});
	
	/**
	 * Swap the element at the given index with a new value
	 * and emits corresponding event.
	 *
	 * @param {Number} index
	 * @param {*} val
	 * @return {*} - replaced element
	 */
	
	def(arrayProto, '$set', function $set(index, val) {
	  if (index >= this.length) {
	    this.length = Number(index) + 1;
	  }
	  return this.splice(index, 1, val)[0];
	});
	
	/**
	 * Convenience method to remove the element at given index or target element reference.
	 *
	 * @param {*} item
	 */
	
	def(arrayProto, '$remove', function $remove(item) {
	  /* istanbul ignore if */
	  if (!this.length) return;
	  var index = indexOf(this, item);
	  if (index > -1) {
	    return this.splice(index, 1);
	  }
	});
	
	var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
	
	/**
	 * By default, when a reactive property is set, the new value is
	 * also converted to become reactive. However in certain cases, e.g.
	 * v-for scope alias and props, we don't want to force conversion
	 * because the value may be a nested value under a frozen data structure.
	 *
	 * So whenever we want to set a reactive property without forcing
	 * conversion on the new value, we wrap that call inside this function.
	 */
	
	var shouldConvert = true;
	
	function withoutConversion(fn) {
	  shouldConvert = false;
	  fn();
	  shouldConvert = true;
	}
	
	/**
	 * Observer class that are attached to each observed
	 * object. Once attached, the observer converts target
	 * object's property keys into getter/setters that
	 * collect dependencies and dispatches updates.
	 *
	 * @param {Array|Object} value
	 * @constructor
	 */
	
	function Observer(value) {
	  this.value = value;
	  this.dep = new Dep();
	  def(value, '__ob__', this);
	  if (isArray(value)) {
	    var augment = hasProto ? protoAugment : copyAugment;
	    augment(value, arrayMethods, arrayKeys);
	    this.observeArray(value);
	  } else {
	    this.walk(value);
	  }
	}
	
	// Instance methods
	
	/**
	 * Walk through each property and convert them into
	 * getter/setters. This method should only be called when
	 * value type is Object.
	 *
	 * @param {Object} obj
	 */
	
	Observer.prototype.walk = function (obj) {
	  var keys = Object.keys(obj);
	  for (var i = 0, l = keys.length; i < l; i++) {
	    this.convert(keys[i], obj[keys[i]]);
	  }
	};
	
	/**
	 * Observe a list of Array items.
	 *
	 * @param {Array} items
	 */
	
	Observer.prototype.observeArray = function (items) {
	  for (var i = 0, l = items.length; i < l; i++) {
	    observe(items[i]);
	  }
	};
	
	/**
	 * Convert a property into getter/setter so we can emit
	 * the events when the property is accessed/changed.
	 *
	 * @param {String} key
	 * @param {*} val
	 */
	
	Observer.prototype.convert = function (key, val) {
	  defineReactive(this.value, key, val);
	};
	
	/**
	 * Add an owner vm, so that when $set/$delete mutations
	 * happen we can notify owner vms to proxy the keys and
	 * digest the watchers. This is only called when the object
	 * is observed as an instance's root $data.
	 *
	 * @param {Vue} vm
	 */
	
	Observer.prototype.addVm = function (vm) {
	  (this.vms || (this.vms = [])).push(vm);
	};
	
	/**
	 * Remove an owner vm. This is called when the object is
	 * swapped out as an instance's $data object.
	 *
	 * @param {Vue} vm
	 */
	
	Observer.prototype.removeVm = function (vm) {
	  this.vms.$remove(vm);
	};
	
	// helpers
	
	/**
	 * Augment an target Object or Array by intercepting
	 * the prototype chain using __proto__
	 *
	 * @param {Object|Array} target
	 * @param {Object} src
	 */
	
	function protoAugment(target, src) {
	  /* eslint-disable no-proto */
	  target.__proto__ = src;
	  /* eslint-enable no-proto */
	}
	
	/**
	 * Augment an target Object or Array by defining
	 * hidden properties.
	 *
	 * @param {Object|Array} target
	 * @param {Object} proto
	 */
	
	function copyAugment(target, src, keys) {
	  for (var i = 0, l = keys.length; i < l; i++) {
	    var key = keys[i];
	    def(target, key, src[key]);
	  }
	}
	
	/**
	 * Attempt to create an observer instance for a value,
	 * returns the new observer if successfully observed,
	 * or the existing observer if the value already has one.
	 *
	 * @param {*} value
	 * @param {Vue} [vm]
	 * @return {Observer|undefined}
	 * @static
	 */
	
	function observe(value, vm) {
	  if (!value || typeof value !== 'object') {
	    return;
	  }
	  var ob;
	  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
	    ob = value.__ob__;
	  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
	    ob = new Observer(value);
	  }
	  if (ob && vm) {
	    ob.addVm(vm);
	  }
	  return ob;
	}
	
	/**
	 * Define a reactive property on an Object.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {*} val
	 */
	
	function defineReactive(obj, key, val) {
	  var dep = new Dep();
	
	  var property = Object.getOwnPropertyDescriptor(obj, key);
	  if (property && property.configurable === false) {
	    return;
	  }
	
	  // cater for pre-defined getter/setters
	  var getter = property && property.get;
	  var setter = property && property.set;
	
	  var childOb = observe(val);
	  Object.defineProperty(obj, key, {
	    enumerable: true,
	    configurable: true,
	    get: function reactiveGetter() {
	      var value = getter ? getter.call(obj) : val;
	      if (Dep.target) {
	        dep.depend();
	        if (childOb) {
	          childOb.dep.depend();
	        }
	        if (isArray(value)) {
	          for (var e, i = 0, l = value.length; i < l; i++) {
	            e = value[i];
	            e && e.__ob__ && e.__ob__.dep.depend();
	          }
	        }
	      }
	      return value;
	    },
	    set: function reactiveSetter(newVal) {
	      var value = getter ? getter.call(obj) : val;
	      if (newVal === value) {
	        return;
	      }
	      if (setter) {
	        setter.call(obj, newVal);
	      } else {
	        val = newVal;
	      }
	      childOb = observe(newVal);
	      dep.notify();
	    }
	  });
	}
	
	
	
	var util = Object.freeze({
		defineReactive: defineReactive,
		set: set,
		del: del,
		hasOwn: hasOwn,
		isLiteral: isLiteral,
		isReserved: isReserved,
		_toString: _toString,
		toNumber: toNumber,
		toBoolean: toBoolean,
		stripQuotes: stripQuotes,
		camelize: camelize,
		hyphenate: hyphenate,
		classify: classify,
		bind: bind,
		toArray: toArray,
		extend: extend,
		isObject: isObject,
		isPlainObject: isPlainObject,
		def: def,
		debounce: _debounce,
		indexOf: indexOf,
		cancellable: cancellable,
		looseEqual: looseEqual,
		isArray: isArray,
		hasProto: hasProto,
		inBrowser: inBrowser,
		devtools: devtools,
		isIE: isIE,
		isIE9: isIE9,
		isAndroid: isAndroid,
		isIos: isIos,
		iosVersionMatch: iosVersionMatch,
		iosVersion: iosVersion,
		hasMutationObserverBug: hasMutationObserverBug,
		get transitionProp () { return transitionProp; },
		get transitionEndEvent () { return transitionEndEvent; },
		get animationProp () { return animationProp; },
		get animationEndEvent () { return animationEndEvent; },
		nextTick: nextTick,
		get _Set () { return _Set; },
		query: query,
		inDoc: inDoc,
		getAttr: getAttr,
		getBindAttr: getBindAttr,
		hasBindAttr: hasBindAttr,
		before: before,
		after: after,
		remove: remove,
		prepend: prepend,
		replace: replace,
		on: on,
		off: off,
		setClass: setClass,
		addClass: addClass,
		removeClass: removeClass,
		extractContent: extractContent,
		trimNode: trimNode,
		isTemplate: isTemplate,
		createAnchor: createAnchor,
		findRef: findRef,
		mapNodeRange: mapNodeRange,
		removeNodeRange: removeNodeRange,
		isFragment: isFragment,
		getOuterHTML: getOuterHTML,
		mergeOptions: mergeOptions,
		resolveAsset: resolveAsset,
		checkComponentAttr: checkComponentAttr,
		commonTagRE: commonTagRE,
		reservedTagRE: reservedTagRE,
		get warn () { return warn; }
	});
	
	var uid = 0;
	
	function initMixin (Vue) {
	  /**
	   * The main init sequence. This is called for every
	   * instance, including ones that are created from extended
	   * constructors.
	   *
	   * @param {Object} options - this options object should be
	   *                           the result of merging class
	   *                           options and the options passed
	   *                           in to the constructor.
	   */
	
	  Vue.prototype._init = function (options) {
	    options = options || {};
	
	    this.$el = null;
	    this.$parent = options.parent;
	    this.$root = this.$parent ? this.$parent.$root : this;
	    this.$children = [];
	    this.$refs = {}; // child vm references
	    this.$els = {}; // element references
	    this._watchers = []; // all watchers as an array
	    this._directives = []; // all directives
	
	    // a uid
	    this._uid = uid++;
	
	    // a flag to avoid this being observed
	    this._isVue = true;
	
	    // events bookkeeping
	    this._events = {}; // registered callbacks
	    this._eventsCount = {}; // for $broadcast optimization
	
	    // fragment instance properties
	    this._isFragment = false;
	    this._fragment = // @type {DocumentFragment}
	    this._fragmentStart = // @type {Text|Comment}
	    this._fragmentEnd = null; // @type {Text|Comment}
	
	    // lifecycle state
	    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;
	    this._unlinkFn = null;
	
	    // context:
	    // if this is a transcluded component, context
	    // will be the common parent vm of this instance
	    // and its host.
	    this._context = options._context || this.$parent;
	
	    // scope:
	    // if this is inside an inline v-for, the scope
	    // will be the intermediate scope created for this
	    // repeat fragment. this is used for linking props
	    // and container directives.
	    this._scope = options._scope;
	
	    // fragment:
	    // if this instance is compiled inside a Fragment, it
	    // needs to reigster itself as a child of that fragment
	    // for attach/detach to work properly.
	    this._frag = options._frag;
	    if (this._frag) {
	      this._frag.children.push(this);
	    }
	
	    // push self into parent / transclusion host
	    if (this.$parent) {
	      this.$parent.$children.push(this);
	    }
	
	    // merge options.
	    options = this.$options = mergeOptions(this.constructor.options, options, this);
	
	    // set ref
	    this._updateRef();
	
	    // initialize data as empty object.
	    // it will be filled up in _initData().
	    this._data = {};
	
	    // call init hook
	    this._callHook('init');
	
	    // initialize data observation and scope inheritance.
	    this._initState();
	
	    // setup event system and option events.
	    this._initEvents();
	
	    // call created hook
	    this._callHook('created');
	
	    // if `el` option is passed, start compilation.
	    if (options.el) {
	      this.$mount(options.el);
	    }
	  };
	}
	
	var pathCache = new Cache(1000);
	
	// actions
	var APPEND = 0;
	var PUSH = 1;
	var INC_SUB_PATH_DEPTH = 2;
	var PUSH_SUB_PATH = 3;
	
	// states
	var BEFORE_PATH = 0;
	var IN_PATH = 1;
	var BEFORE_IDENT = 2;
	var IN_IDENT = 3;
	var IN_SUB_PATH = 4;
	var IN_SINGLE_QUOTE = 5;
	var IN_DOUBLE_QUOTE = 6;
	var AFTER_PATH = 7;
	var ERROR = 8;
	
	var pathStateMachine = [];
	
	pathStateMachine[BEFORE_PATH] = {
	  'ws': [BEFORE_PATH],
	  'ident': [IN_IDENT, APPEND],
	  '[': [IN_SUB_PATH],
	  'eof': [AFTER_PATH]
	};
	
	pathStateMachine[IN_PATH] = {
	  'ws': [IN_PATH],
	  '.': [BEFORE_IDENT],
	  '[': [IN_SUB_PATH],
	  'eof': [AFTER_PATH]
	};
	
	pathStateMachine[BEFORE_IDENT] = {
	  'ws': [BEFORE_IDENT],
	  'ident': [IN_IDENT, APPEND]
	};
	
	pathStateMachine[IN_IDENT] = {
	  'ident': [IN_IDENT, APPEND],
	  '0': [IN_IDENT, APPEND],
	  'number': [IN_IDENT, APPEND],
	  'ws': [IN_PATH, PUSH],
	  '.': [BEFORE_IDENT, PUSH],
	  '[': [IN_SUB_PATH, PUSH],
	  'eof': [AFTER_PATH, PUSH]
	};
	
	pathStateMachine[IN_SUB_PATH] = {
	  "'": [IN_SINGLE_QUOTE, APPEND],
	  '"': [IN_DOUBLE_QUOTE, APPEND],
	  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
	  ']': [IN_PATH, PUSH_SUB_PATH],
	  'eof': ERROR,
	  'else': [IN_SUB_PATH, APPEND]
	};
	
	pathStateMachine[IN_SINGLE_QUOTE] = {
	  "'": [IN_SUB_PATH, APPEND],
	  'eof': ERROR,
	  'else': [IN_SINGLE_QUOTE, APPEND]
	};
	
	pathStateMachine[IN_DOUBLE_QUOTE] = {
	  '"': [IN_SUB_PATH, APPEND],
	  'eof': ERROR,
	  'else': [IN_DOUBLE_QUOTE, APPEND]
	};
	
	/**
	 * Determine the type of a character in a keypath.
	 *
	 * @param {Char} ch
	 * @return {String} type
	 */
	
	function getPathCharType(ch) {
	  if (ch === undefined) {
	    return 'eof';
	  }
	
	  var code = ch.charCodeAt(0);
	
	  switch (code) {
	    case 0x5B: // [
	    case 0x5D: // ]
	    case 0x2E: // .
	    case 0x22: // "
	    case 0x27: // '
	    case 0x30:
	      // 0
	      return ch;
	
	    case 0x5F: // _
	    case 0x24:
	      // $
	      return 'ident';
	
	    case 0x20: // Space
	    case 0x09: // Tab
	    case 0x0A: // Newline
	    case 0x0D: // Return
	    case 0xA0: // No-break space
	    case 0xFEFF: // Byte Order Mark
	    case 0x2028: // Line Separator
	    case 0x2029:
	      // Paragraph Separator
	      return 'ws';
	  }
	
	  // a-z, A-Z
	  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {
	    return 'ident';
	  }
	
	  // 1-9
	  if (code >= 0x31 && code <= 0x39) {
	    return 'number';
	  }
	
	  return 'else';
	}
	
	/**
	 * Format a subPath, return its plain form if it is
	 * a literal string or number. Otherwise prepend the
	 * dynamic indicator (*).
	 *
	 * @param {String} path
	 * @return {String}
	 */
	
	function formatSubPath(path) {
	  var trimmed = path.trim();
	  // invalid leading 0
	  if (path.charAt(0) === '0' && isNaN(path)) {
	    return false;
	  }
	  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;
	}
	
	/**
	 * Parse a string path into an array of segments
	 *
	 * @param {String} path
	 * @return {Array|undefined}
	 */
	
	function parse(path) {
	  var keys = [];
	  var index = -1;
	  var mode = BEFORE_PATH;
	  var subPathDepth = 0;
	  var c, newChar, key, type, transition, action, typeMap;
	
	  var actions = [];
	
	  actions[PUSH] = function () {
	    if (key !== undefined) {
	      keys.push(key);
	      key = undefined;
	    }
	  };
	
	  actions[APPEND] = function () {
	    if (key === undefined) {
	      key = newChar;
	    } else {
	      key += newChar;
	    }
	  };
	
	  actions[INC_SUB_PATH_DEPTH] = function () {
	    actions[APPEND]();
	    subPathDepth++;
	  };
	
	  actions[PUSH_SUB_PATH] = function () {
	    if (subPathDepth > 0) {
	      subPathDepth--;
	      mode = IN_SUB_PATH;
	      actions[APPEND]();
	    } else {
	      subPathDepth = 0;
	      key = formatSubPath(key);
	      if (key === false) {
	        return false;
	      } else {
	        actions[PUSH]();
	      }
	    }
	  };
	
	  function maybeUnescapeQuote() {
	    var nextChar = path[index + 1];
	    if (mode === IN_SINGLE_QUOTE && nextChar === "'" || mode === IN_DOUBLE_QUOTE && nextChar === '"') {
	      index++;
	      newChar = '\\' + nextChar;
	      actions[APPEND]();
	      return true;
	    }
	  }
	
	  while (mode != null) {
	    index++;
	    c = path[index];
	
	    if (c === '\\' && maybeUnescapeQuote()) {
	      continue;
	    }
	
	    type = getPathCharType(c);
	    typeMap = pathStateMachine[mode];
	    transition = typeMap[type] || typeMap['else'] || ERROR;
	
	    if (transition === ERROR) {
	      return; // parse error
	    }
	
	    mode = transition[0];
	    action = actions[transition[1]];
	    if (action) {
	      newChar = transition[2];
	      newChar = newChar === undefined ? c : newChar;
	      if (action() === false) {
	        return;
	      }
	    }
	
	    if (mode === AFTER_PATH) {
	      keys.raw = path;
	      return keys;
	    }
	  }
	}
	
	/**
	 * External parse that check for a cache hit first
	 *
	 * @param {String} path
	 * @return {Array|undefined}
	 */
	
	function parsePath(path) {
	  var hit = pathCache.get(path);
	  if (!hit) {
	    hit = parse(path);
	    if (hit) {
	      pathCache.put(path, hit);
	    }
	  }
	  return hit;
	}
	
	/**
	 * Get from an object from a path string
	 *
	 * @param {Object} obj
	 * @param {String} path
	 */
	
	function getPath(obj, path) {
	  return parseExpression(path).get(obj);
	}
	
	/**
	 * Warn against setting non-existent root path on a vm.
	 */
	
	var warnNonExistent;
	if (process.env.NODE_ENV !== 'production') {
	  warnNonExistent = function (path, vm) {
	    warn('You are setting a non-existent path "' + path.raw + '" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the "data" option for more reliable reactivity ' + 'and better performance.', vm);
	  };
	}
	
	/**
	 * Set on an object from a path
	 *
	 * @param {Object} obj
	 * @param {String | Array} path
	 * @param {*} val
	 */
	
	function setPath(obj, path, val) {
	  var original = obj;
	  if (typeof path === 'string') {
	    path = parse(path);
	  }
	  if (!path || !isObject(obj)) {
	    return false;
	  }
	  var last, key;
	  for (var i = 0, l = path.length; i < l; i++) {
	    last = obj;
	    key = path[i];
	    if (key.charAt(0) === '*') {
	      key = parseExpression(key.slice(1)).get.call(original, original);
	    }
	    if (i < l - 1) {
	      obj = obj[key];
	      if (!isObject(obj)) {
	        obj = {};
	        if (process.env.NODE_ENV !== 'production' && last._isVue) {
	          warnNonExistent(path, last);
	        }
	        set(last, key, obj);
	      }
	    } else {
	      if (isArray(obj)) {
	        obj.$set(key, val);
	      } else if (key in obj) {
	        obj[key] = val;
	      } else {
	        if (process.env.NODE_ENV !== 'production' && obj._isVue) {
	          warnNonExistent(path, obj);
	        }
	        set(obj, key, val);
	      }
	    }
	  }
	  return true;
	}
	
	var path = Object.freeze({
	  parsePath: parsePath,
	  getPath: getPath,
	  setPath: setPath
	});
	
	var expressionCache = new Cache(1000);
	
	var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';
	var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\b|') + '\\b)');
	
	// keywords that don't make sense inside expressions
	var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';
	var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\b|') + '\\b)');
	
	var wsRE = /\s/g;
	var newlineRE = /\n/g;
	var saveRE = /[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g;
	var restoreRE = /"(\d+)"/g;
	var pathTestRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/;
	var identRE = /[^\w$\.](?:[A-Za-z_$][\w$]*)/g;
	var literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;
	
	function noop() {}
	
	/**
	 * Save / Rewrite / Restore
	 *
	 * When rewriting paths found in an expression, it is
	 * possible for the same letter sequences to be found in
	 * strings and Object literal property keys. Therefore we
	 * remove and store these parts in a temporary array, and
	 * restore them after the path rewrite.
	 */
	
	var saved = [];
	
	/**
	 * Save replacer
	 *
	 * The save regex can match two possible cases:
	 * 1. An opening object literal
	 * 2. A string
	 * If matched as a plain string, we need to escape its
	 * newlines, since the string needs to be preserved when
	 * generating the function body.
	 *
	 * @param {String} str
	 * @param {String} isString - str if matched as a string
	 * @return {String} - placeholder with index
	 */
	
	function save(str, isString) {
	  var i = saved.length;
	  saved[i] = isString ? str.replace(newlineRE, '\\n') : str;
	  return '"' + i + '"';
	}
	
	/**
	 * Path rewrite replacer
	 *
	 * @param {String} raw
	 * @return {String}
	 */
	
	function rewrite(raw) {
	  var c = raw.charAt(0);
	  var path = raw.slice(1);
	  if (allowedKeywordsRE.test(path)) {
	    return raw;
	  } else {
	    path = path.indexOf('"') > -1 ? path.replace(restoreRE, restore) : path;
	    return c + 'scope.' + path;
	  }
	}
	
	/**
	 * Restore replacer
	 *
	 * @param {String} str
	 * @param {String} i - matched save index
	 * @return {String}
	 */
	
	function restore(str, i) {
	  return saved[i];
	}
	
	/**
	 * Rewrite an expression, prefixing all path accessors with
	 * `scope.` and generate getter/setter functions.
	 *
	 * @param {String} exp
	 * @return {Function}
	 */
	
	function compileGetter(exp) {
	  if (improperKeywordsRE.test(exp)) {
	    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);
	  }
	  // reset state
	  saved.length = 0;
	  // save strings and object literal keys
	  var body = exp.replace(saveRE, save).replace(wsRE, '');
	  // rewrite all paths
	  // pad 1 space here because the regex matches 1 extra char
	  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);
	  return makeGetterFn(body);
	}
	
	/**
	 * Build a getter function. Requires eval.
	 *
	 * We isolate the try/catch so it doesn't affect the
	 * optimization of the parse function when it is not called.
	 *
	 * @param {String} body
	 * @return {Function|undefined}
	 */
	
	function makeGetterFn(body) {
	  try {
	    /* eslint-disable no-new-func */
	    return new Function('scope', 'return ' + body + ';');
	    /* eslint-enable no-new-func */
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production') {
	      /* istanbul ignore if */
	      if (e.toString().match(/unsafe-eval|CSP/)) {
	        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');
	      } else {
	        warn('Invalid expression. ' + 'Generated function body: ' + body);
	      }
	    }
	    return noop;
	  }
	}
	
	/**
	 * Compile a setter function for the expression.
	 *
	 * @param {String} exp
	 * @return {Function|undefined}
	 */
	
	function compileSetter(exp) {
	  var path = parsePath(exp);
	  if (path) {
	    return function (scope, val) {
	      setPath(scope, path, val);
	    };
	  } else {
	    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);
	  }
	}
	
	/**
	 * Parse an expression into re-written getter/setters.
	 *
	 * @param {String} exp
	 * @param {Boolean} needSet
	 * @return {Function}
	 */
	
	function parseExpression(exp, needSet) {
	  exp = exp.trim();
	  // try cache
	  var hit = expressionCache.get(exp);
	  if (hit) {
	    if (needSet && !hit.set) {
	      hit.set = compileSetter(hit.exp);
	    }
	    return hit;
	  }
	  var res = { exp: exp };
	  res.get = isSimplePath(exp) && exp.indexOf('[') < 0
	  // optimized super simple getter
	  ? makeGetterFn('scope.' + exp)
	  // dynamic getter
	  : compileGetter(exp);
	  if (needSet) {
	    res.set = compileSetter(exp);
	  }
	  expressionCache.put(exp, res);
	  return res;
	}
	
	/**
	 * Check if an expression is a simple path.
	 *
	 * @param {String} exp
	 * @return {Boolean}
	 */
	
	function isSimplePath(exp) {
	  return pathTestRE.test(exp) &&
	  // don't treat literal values as paths
	  !literalValueRE$1.test(exp) &&
	  // Math constants e.g. Math.PI, Math.E etc.
	  exp.slice(0, 5) !== 'Math.';
	}
	
	var expression = Object.freeze({
	  parseExpression: parseExpression,
	  isSimplePath: isSimplePath
	});
	
	// we have two separate queues: one for directive updates
	// and one for user watcher registered via $watch().
	// we want to guarantee directive updates to be called
	// before user watchers so that when user watchers are
	// triggered, the DOM would have already been in updated
	// state.
	
	var queue = [];
	var userQueue = [];
	var has = {};
	var circular = {};
	var waiting = false;
	
	/**
	 * Reset the batcher's state.
	 */
	
	function resetBatcherState() {
	  queue.length = 0;
	  userQueue.length = 0;
	  has = {};
	  circular = {};
	  waiting = false;
	}
	
	/**
	 * Flush both queues and run the watchers.
	 */
	
	function flushBatcherQueue() {
	  var _again = true;
	
	  _function: while (_again) {
	    _again = false;
	
	    runBatcherQueue(queue);
	    runBatcherQueue(userQueue);
	    // user watchers triggered more watchers,
	    // keep flushing until it depletes
	    if (queue.length) {
	      _again = true;
	      continue _function;
	    }
	    // dev tool hook
	    /* istanbul ignore if */
	    if (devtools && config.devtools) {
	      devtools.emit('flush');
	    }
	    resetBatcherState();
	  }
	}
	
	/**
	 * Run the watchers in a single queue.
	 *
	 * @param {Array} queue
	 */
	
	function runBatcherQueue(queue) {
	  // do not cache length because more watchers might be pushed
	  // as we run existing watchers
	  for (var i = 0; i < queue.length; i++) {
	    var watcher = queue[i];
	    var id = watcher.id;
	    has[id] = null;
	    watcher.run();
	    // in dev build, check and stop circular updates.
	    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
	      circular[id] = (circular[id] || 0) + 1;
	      if (circular[id] > config._maxUpdateCount) {
	        warn('You may have an infinite update loop for watcher ' + 'with expression "' + watcher.expression + '"', watcher.vm);
	        break;
	      }
	    }
	  }
	  queue.length = 0;
	}
	
	/**
	 * Push a watcher into the watcher queue.
	 * Jobs with duplicate IDs will be skipped unless it's
	 * pushed when the queue is being flushed.
	 *
	 * @param {Watcher} watcher
	 *   properties:
	 *   - {Number} id
	 *   - {Function} run
	 */
	
	function pushWatcher(watcher) {
	  var id = watcher.id;
	  if (has[id] == null) {
	    // push watcher into appropriate queue
	    var q = watcher.user ? userQueue : queue;
	    has[id] = q.length;
	    q.push(watcher);
	    // queue the flush
	    if (!waiting) {
	      waiting = true;
	      nextTick(flushBatcherQueue);
	    }
	  }
	}
	
	var uid$2 = 0;
	
	/**
	 * A watcher parses an expression, collects dependencies,
	 * and fires callback when the expression value changes.
	 * This is used for both the $watch() api and directives.
	 *
	 * @param {Vue} vm
	 * @param {String|Function} expOrFn
	 * @param {Function} cb
	 * @param {Object} options
	 *                 - {Array} filters
	 *                 - {Boolean} twoWay
	 *                 - {Boolean} deep
	 *                 - {Boolean} user
	 *                 - {Boolean} sync
	 *                 - {Boolean} lazy
	 *                 - {Function} [preProcess]
	 *                 - {Function} [postProcess]
	 * @constructor
	 */
	function Watcher(vm, expOrFn, cb, options) {
	  // mix in options
	  if (options) {
	    extend(this, options);
	  }
	  var isFn = typeof expOrFn === 'function';
	  this.vm = vm;
	  vm._watchers.push(this);
	  this.expression = expOrFn;
	  this.cb = cb;
	  this.id = ++uid$2; // uid for batching
	  this.active = true;
	  this.dirty = this.lazy; // for lazy watchers
	  this.deps = [];
	  this.newDeps = [];
	  this.depIds = new _Set();
	  this.newDepIds = new _Set();
	  this.prevError = null; // for async error stacks
	  // parse expression for getter/setter
	  if (isFn) {
	    this.getter = expOrFn;
	    this.setter = undefined;
	  } else {
	    var res = parseExpression(expOrFn, this.twoWay);
	    this.getter = res.get;
	    this.setter = res.set;
	  }
	  this.value = this.lazy ? undefined : this.get();
	  // state for avoiding false triggers for deep and Array
	  // watchers during vm._digest()
	  this.queued = this.shallow = false;
	}
	
	/**
	 * Evaluate the getter, and re-collect dependencies.
	 */
	
	Watcher.prototype.get = function () {
	  this.beforeGet();
	  var scope = this.scope || this.vm;
	  var value;
	  try {
	    value = this.getter.call(scope, scope);
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {
	      warn('Error when evaluating expression ' + '"' + this.expression + '": ' + e.toString(), this.vm);
	    }
	  }
	  // "touch" every property so they are all tracked as
	  // dependencies for deep watching
	  if (this.deep) {
	    traverse(value);
	  }
	  if (this.preProcess) {
	    value = this.preProcess(value);
	  }
	  if (this.filters) {
	    value = scope._applyFilters(value, null, this.filters, false);
	  }
	  if (this.postProcess) {
	    value = this.postProcess(value);
	  }
	  this.afterGet();
	  return value;
	};
	
	/**
	 * Set the corresponding value with the setter.
	 *
	 * @param {*} value
	 */
	
	Watcher.prototype.set = function (value) {
	  var scope = this.scope || this.vm;
	  if (this.filters) {
	    value = scope._applyFilters(value, this.value, this.filters, true);
	  }
	  try {
	    this.setter.call(scope, scope, value);
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {
	      warn('Error when evaluating setter ' + '"' + this.expression + '": ' + e.toString(), this.vm);
	    }
	  }
	  // two-way sync for v-for alias
	  var forContext = scope.$forContext;
	  if (forContext && forContext.alias === this.expression) {
	    if (forContext.filters) {
	      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);
	      return;
	    }
	    forContext._withLock(function () {
	      if (scope.$key) {
	        // original is an object
	        forContext.rawValue[scope.$key] = value;
	      } else {
	        forContext.rawValue.$set(scope.$index, value);
	      }
	    });
	  }
	};
	
	/**
	 * Prepare for dependency collection.
	 */
	
	Watcher.prototype.beforeGet = function () {
	  Dep.target = this;
	};
	
	/**
	 * Add a dependency to this directive.
	 *
	 * @param {Dep} dep
	 */
	
	Watcher.prototype.addDep = function (dep) {
	  var id = dep.id;
	  if (!this.newDepIds.has(id)) {
	    this.newDepIds.add(id);
	    this.newDeps.push(dep);
	    if (!this.depIds.has(id)) {
	      dep.addSub(this);
	    }
	  }
	};
	
	/**
	 * Clean up for dependency collection.
	 */
	
	Watcher.prototype.afterGet = function () {
	  Dep.target = null;
	  var i = this.deps.length;
	  while (i--) {
	    var dep = this.deps[i];
	    if (!this.newDepIds.has(dep.id)) {
	      dep.removeSub(this);
	    }
	  }
	  var tmp = this.depIds;
	  this.depIds = this.newDepIds;
	  this.newDepIds = tmp;
	  this.newDepIds.clear();
	  tmp = this.deps;
	  this.deps = this.newDeps;
	  this.newDeps = tmp;
	  this.newDeps.length = 0;
	};
	
	/**
	 * Subscriber interface.
	 * Will be called when a dependency changes.
	 *
	 * @param {Boolean} shallow
	 */
	
	Watcher.prototype.update = function (shallow) {
	  if (this.lazy) {
	    this.dirty = true;
	  } else if (this.sync || !config.async) {
	    this.run();
	  } else {
	    // if queued, only overwrite shallow with non-shallow,
	    // but not the other way around.
	    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;
	    this.queued = true;
	    // record before-push error stack in debug mode
	    /* istanbul ignore if */
	    if (process.env.NODE_ENV !== 'production' && config.debug) {
	      this.prevError = new Error('[vue] async stack trace');
	    }
	    pushWatcher(this);
	  }
	};
	
	/**
	 * Batcher job interface.
	 * Will be called by the batcher.
	 */
	
	Watcher.prototype.run = function () {
	  if (this.active) {
	    var value = this.get();
	    if (value !== this.value ||
	    // Deep watchers and watchers on Object/Arrays should fire even
	    // when the value is the same, because the value may
	    // have mutated; but only do so if this is a
	    // non-shallow update (caused by a vm digest).
	    (isObject(value) || this.deep) && !this.shallow) {
	      // set new value
	      var oldValue = this.value;
	      this.value = value;
	      // in debug + async mode, when a watcher callbacks
	      // throws, we also throw the saved before-push error
	      // so the full cross-tick stack trace is available.
	      var prevError = this.prevError;
	      /* istanbul ignore if */
	      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {
	        this.prevError = null;
	        try {
	          this.cb.call(this.vm, value, oldValue);
	        } catch (e) {
	          nextTick(function () {
	            throw prevError;
	          }, 0);
	          throw e;
	        }
	      } else {
	        this.cb.call(this.vm, value, oldValue);
	      }
	    }
	    this.queued = this.shallow = false;
	  }
	};
	
	/**
	 * Evaluate the value of the watcher.
	 * This only gets called for lazy watchers.
	 */
	
	Watcher.prototype.evaluate = function () {
	  // avoid overwriting another watcher that is being
	  // collected.
	  var current = Dep.target;
	  this.value = this.get();
	  this.dirty = false;
	  Dep.target = current;
	};
	
	/**
	 * Depend on all deps collected by this watcher.
	 */
	
	Watcher.prototype.depend = function () {
	  var i = this.deps.length;
	  while (i--) {
	    this.deps[i].depend();
	  }
	};
	
	/**
	 * Remove self from all dependencies' subcriber list.
	 */
	
	Watcher.prototype.teardown = function () {
	  if (this.active) {
	    // remove self from vm's watcher list
	    // this is a somewhat expensive operation so we skip it
	    // if the vm is being destroyed or is performing a v-for
	    // re-render (the watcher list is then filtered by v-for).
	    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {
	      this.vm._watchers.$remove(this);
	    }
	    var i = this.deps.length;
	    while (i--) {
	      this.deps[i].removeSub(this);
	    }
	    this.active = false;
	    this.vm = this.cb = this.value = null;
	  }
	};
	
	/**
	 * Recrusively traverse an object to evoke all converted
	 * getters, so that every nested property inside the object
	 * is collected as a "deep" dependency.
	 *
	 * @param {*} val
	 */
	
	var seenObjects = new _Set();
	function traverse(val, seen) {
	  var i = undefined,
	      keys = undefined;
	  if (!seen) {
	    seen = seenObjects;
	    seen.clear();
	  }
	  var isA = isArray(val);
	  var isO = isObject(val);
	  if ((isA || isO) && Object.isExtensible(val)) {
	    if (val.__ob__) {
	      var depId = val.__ob__.dep.id;
	      if (seen.has(depId)) {
	        return;
	      } else {
	        seen.add(depId);
	      }
	    }
	    if (isA) {
	      i = val.length;
	      while (i--) traverse(val[i], seen);
	    } else if (isO) {
	      keys = Object.keys(val);
	      i = keys.length;
	      while (i--) traverse(val[keys[i]], seen);
	    }
	  }
	}
	
	var text$1 = {
	
	  bind: function bind() {
	    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';
	  },
	
	  update: function update(value) {
	    this.el[this.attr] = _toString(value);
	  }
	};
	
	var templateCache = new Cache(1000);
	var idSelectorCache = new Cache(1000);
	
	var map = {
	  efault: [0, '', ''],
	  legend: [1, '<fieldset>', '</fieldset>'],
	  tr: [2, '<table><tbody>', '</tbody></table>'],
	  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']
	};
	
	map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	map.option = map.optgroup = [1, '<select multiple="multiple">', '</select>'];
	
	map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];
	
	map.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'xmlns:xlink="http://www.w3.org/1999/xlink" ' + 'xmlns:ev="http://www.w3.org/2001/xml-events"' + 'version="1.1">', '</svg>'];
	
	/**
	 * Check if a node is a supported template node with a
	 * DocumentFragment content.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */
	
	function isRealTemplate(node) {
	  return isTemplate(node) && isFragment(node.content);
	}
	
	var tagRE$1 = /<([\w:-]+)/;
	var entityRE = /&#?\w+?;/;
	var commentRE = /<!--/;
	
	/**
	 * Convert a string template to a DocumentFragment.
	 * Determines correct wrapping by tag types. Wrapping
	 * strategy found in jQuery & component/domify.
	 *
	 * @param {String} templateString
	 * @param {Boolean} raw
	 * @return {DocumentFragment}
	 */
	
	function stringToFragment(templateString, raw) {
	  // try a cache hit first
	  var cacheKey = raw ? templateString : templateString.trim();
	  var hit = templateCache.get(cacheKey);
	  if (hit) {
	    return hit;
	  }
	
	  var frag = document.createDocumentFragment();
	  var tagMatch = templateString.match(tagRE$1);
	  var entityMatch = entityRE.test(templateString);
	  var commentMatch = commentRE.test(templateString);
	
	  if (!tagMatch && !entityMatch && !commentMatch) {
	    // text only, return a single text node.
	    frag.appendChild(document.createTextNode(templateString));
	  } else {
	    var tag = tagMatch && tagMatch[1];
	    var wrap = map[tag] || map.efault;
	    var depth = wrap[0];
	    var prefix = wrap[1];
	    var suffix = wrap[2];
	    var node = document.createElement('div');
	
	    node.innerHTML = prefix + templateString + suffix;
	    while (depth--) {
	      node = node.lastChild;
	    }
	
	    var child;
	    /* eslint-disable no-cond-assign */
	    while (child = node.firstChild) {
	      /* eslint-enable no-cond-assign */
	      frag.appendChild(child);
	    }
	  }
	  if (!raw) {
	    trimNode(frag);
	  }
	  templateCache.put(cacheKey, frag);
	  return frag;
	}
	
	/**
	 * Convert a template node to a DocumentFragment.
	 *
	 * @param {Node} node
	 * @return {DocumentFragment}
	 */
	
	function nodeToFragment(node) {
	  // if its a template tag and the browser supports it,
	  // its content is already a document fragment. However, iOS Safari has
	  // bug when using directly cloned template content with touch
	  // events and can cause crashes when the nodes are removed from DOM, so we
	  // have to treat template elements as string templates. (#2805)
	  /* istanbul ignore if */
	  if (isRealTemplate(node)) {
	    return stringToFragment(node.innerHTML);
	  }
	  // script template
	  if (node.tagName === 'SCRIPT') {
	    return stringToFragment(node.textContent);
	  }
	  // normal node, clone it to avoid mutating the original
	  var clonedNode = cloneNode(node);
	  var frag = document.createDocumentFragment();
	  var child;
	  /* eslint-disable no-cond-assign */
	  while (child = clonedNode.firstChild) {
	    /* eslint-enable no-cond-assign */
	    frag.appendChild(child);
	  }
	  trimNode(frag);
	  return frag;
	}
	
	// Test for the presence of the Safari template cloning bug
	// https://bugs.webkit.org/showug.cgi?id=137755
	var hasBrokenTemplate = (function () {
	  /* istanbul ignore else */
	  if (inBrowser) {
	    var a = document.createElement('div');
	    a.innerHTML = '<template>1</template>';
	    return !a.cloneNode(true).firstChild.innerHTML;
	  } else {
	    return false;
	  }
	})();
	
	// Test for IE10/11 textarea placeholder clone bug
	var hasTextareaCloneBug = (function () {
	  /* istanbul ignore else */
	  if (inBrowser) {
	    var t = document.createElement('textarea');
	    t.placeholder = 't';
	    return t.cloneNode(true).value === 't';
	  } else {
	    return false;
	  }
	})();
	
	/**
	 * 1. Deal with Safari cloning nested <template> bug by
	 *    manually cloning all template instances.
	 * 2. Deal with IE10/11 textarea placeholder bug by setting
	 *    the correct value after cloning.
	 *
	 * @param {Element|DocumentFragment} node
	 * @return {Element|DocumentFragment}
	 */
	
	function cloneNode(node) {
	  /* istanbul ignore if */
	  if (!node.querySelectorAll) {
	    return node.cloneNode();
	  }
	  var res = node.cloneNode(true);
	  var i, original, cloned;
	  /* istanbul ignore if */
	  if (hasBrokenTemplate) {
	    var tempClone = res;
	    if (isRealTemplate(node)) {
	      node = node.content;
	      tempClone = res.content;
	    }
	    original = node.querySelectorAll('template');
	    if (original.length) {
	      cloned = tempClone.querySelectorAll('template');
	      i = cloned.length;
	      while (i--) {
	        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);
	      }
	    }
	  }
	  /* istanbul ignore if */
	  if (hasTextareaCloneBug) {
	    if (node.tagName === 'TEXTAREA') {
	      res.value = node.value;
	    } else {
	      original = node.querySelectorAll('textarea');
	      if (original.length) {
	        cloned = res.querySelectorAll('textarea');
	        i = cloned.length;
	        while (i--) {
	          cloned[i].value = original[i].value;
	        }
	      }
	    }
	  }
	  return res;
	}
	
	/**
	 * Process the template option and normalizes it into a
	 * a DocumentFragment that can be used as a partial or a
	 * instance template.
	 *
	 * @param {*} template
	 *        Possible values include:
	 *        - DocumentFragment object
	 *        - Node object of type Template
	 *        - id selector: '#some-template-id'
	 *        - template string: '<div><span>{{msg}}</span></div>'
	 * @param {Boolean} shouldClone
	 * @param {Boolean} raw
	 *        inline HTML interpolation. Do not check for id
	 *        selector and keep whitespace in the string.
	 * @return {DocumentFragment|undefined}
	 */
	
	function parseTemplate(template, shouldClone, raw) {
	  var node, frag;
	
	  // if the template is already a document fragment,
	  // do nothing
	  if (isFragment(template)) {
	    trimNode(template);
	    return shouldClone ? cloneNode(template) : template;
	  }
	
	  if (typeof template === 'string') {
	    // id selector
	    if (!raw && template.charAt(0) === '#') {
	      // id selector can be cached too
	      frag = idSelectorCache.get(template);
	      if (!frag) {
	        node = document.getElementById(template.slice(1));
	        if (node) {
	          frag = nodeToFragment(node);
	          // save selector to cache
	          idSelectorCache.put(template, frag);
	        }
	      }
	    } else {
	      // normal string template
	      frag = stringToFragment(template, raw);
	    }
	  } else if (template.nodeType) {
	    // a direct node
	    frag = nodeToFragment(template);
	  }
	
	  return frag && shouldClone ? cloneNode(frag) : frag;
	}
	
	var template = Object.freeze({
	  cloneNode: cloneNode,
	  parseTemplate: parseTemplate
	});
	
	var html = {
	
	  bind: function bind() {
	    // a comment node means this is a binding for
	    // {{{ inline unescaped html }}}
	    if (this.el.nodeType === 8) {
	      // hold nodes
	      this.nodes = [];
	      // replace the placeholder with proper anchor
	      this.anchor = createAnchor('v-html');
	      replace(this.el, this.anchor);
	    }
	  },
	
	  update: function update(value) {
	    value = _toString(value);
	    if (this.nodes) {
	      this.swap(value);
	    } else {
	      this.el.innerHTML = value;
	    }
	  },
	
	  swap: function swap(value) {
	    // remove old nodes
	    var i = this.nodes.length;
	    while (i--) {
	      remove(this.nodes[i]);
	    }
	    // convert new value to a fragment
	    // do not attempt to retrieve from id selector
	    var frag = parseTemplate(value, true, true);
	    // save a reference to these nodes so we can remove later
	    this.nodes = toArray(frag.childNodes);
	    before(frag, this.anchor);
	  }
	};
	
	/**
	 * Abstraction for a partially-compiled fragment.
	 * Can optionally compile content with a child scope.
	 *
	 * @param {Function} linker
	 * @param {Vue} vm
	 * @param {DocumentFragment} frag
	 * @param {Vue} [host]
	 * @param {Object} [scope]
	 * @param {Fragment} [parentFrag]
	 */
	function Fragment(linker, vm, frag, host, scope, parentFrag) {
	  this.children = [];
	  this.childFrags = [];
	  this.vm = vm;
	  this.scope = scope;
	  this.inserted = false;
	  this.parentFrag = parentFrag;
	  if (parentFrag) {
	    parentFrag.childFrags.push(this);
	  }
	  this.unlink = linker(vm, frag, host, scope, this);
	  var single = this.single = frag.childNodes.length === 1 &&
	  // do not go single mode if the only node is an anchor
	  !frag.childNodes[0].__v_anchor;
	  if (single) {
	    this.node = frag.childNodes[0];
	    this.before = singleBefore;
	    this.remove = singleRemove;
	  } else {
	    this.node = createAnchor('fragment-start');
	    this.end = createAnchor('fragment-end');
	    this.frag = frag;
	    prepend(this.node, frag);
	    frag.appendChild(this.end);
	    this.before = multiBefore;
	    this.remove = multiRemove;
	  }
	  this.node.__v_frag = this;
	}
	
	/**
	 * Call attach/detach for all components contained within
	 * this fragment. Also do so recursively for all child
	 * fragments.
	 *
	 * @param {Function} hook
	 */
	
	Fragment.prototype.callHook = function (hook) {
	  var i, l;
	  for (i = 0, l = this.childFrags.length; i < l; i++) {
	    this.childFrags[i].callHook(hook);
	  }
	  for (i = 0, l = this.children.length; i < l; i++) {
	    hook(this.children[i]);
	  }
	};
	
	/**
	 * Insert fragment before target, single node version
	 *
	 * @param {Node} target
	 * @param {Boolean} withTransition
	 */
	
	function singleBefore(target, withTransition) {
	  this.inserted = true;
	  var method = withTransition !== false ? beforeWithTransition : before;
	  method(this.node, target, this.vm);
	  if (inDoc(this.node)) {
	    this.callHook(attach);
	  }
	}
	
	/**
	 * Remove fragment, single node version
	 */
	
	function singleRemove() {
	  this.inserted = false;
	  var shouldCallRemove = inDoc(this.node);
	  var self = this;
	  this.beforeRemove();
	  removeWithTransition(this.node, this.vm, function () {
	    if (shouldCallRemove) {
	      self.callHook(detach);
	    }
	    self.destroy();
	  });
	}
	
	/**
	 * Insert fragment before target, multi-nodes version
	 *
	 * @param {Node} target
	 * @param {Boolean} withTransition
	 */
	
	function multiBefore(target, withTransition) {
	  this.inserted = true;
	  var vm = this.vm;
	  var method = withTransition !== false ? beforeWithTransition : before;
	  mapNodeRange(this.node, this.end, function (node) {
	    method(node, target, vm);
	  });
	  if (inDoc(this.node)) {
	    this.callHook(attach);
	  }
	}
	
	/**
	 * Remove fragment, multi-nodes version
	 */
	
	function multiRemove() {
	  this.inserted = false;
	  var self = this;
	  var shouldCallRemove = inDoc(this.node);
	  this.beforeRemove();
	  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {
	    if (shouldCallRemove) {
	      self.callHook(detach);
	    }
	    self.destroy();
	  });
	}
	
	/**
	 * Prepare the fragment for removal.
	 */
	
	Fragment.prototype.beforeRemove = function () {
	  var i, l;
	  for (i = 0, l = this.childFrags.length; i < l; i++) {
	    // call the same method recursively on child
	    // fragments, depth-first
	    this.childFrags[i].beforeRemove(false);
	  }
	  for (i = 0, l = this.children.length; i < l; i++) {
	    // Call destroy for all contained instances,
	    // with remove:false and defer:true.
	    // Defer is necessary because we need to
	    // keep the children to call detach hooks
	    // on them.
	    this.children[i].$destroy(false, true);
	  }
	  var dirs = this.unlink.dirs;
	  for (i = 0, l = dirs.length; i < l; i++) {
	    // disable the watchers on all the directives
	    // so that the rendered content stays the same
	    // during removal.
	    dirs[i]._watcher && dirs[i]._watcher.teardown();
	  }
	};
	
	/**
	 * Destroy the fragment.
	 */
	
	Fragment.prototype.destroy = function () {
	  if (this.parentFrag) {
	    this.parentFrag.childFrags.$remove(this);
	  }
	  this.node.__v_frag = null;
	  this.unlink();
	};
	
	/**
	 * Call attach hook for a Vue instance.
	 *
	 * @param {Vue} child
	 */
	
	function attach(child) {
	  if (!child._isAttached && inDoc(child.$el)) {
	    child._callHook('attached');
	  }
	}
	
	/**
	 * Call detach hook for a Vue instance.
	 *
	 * @param {Vue} child
	 */
	
	function detach(child) {
	  if (child._isAttached && !inDoc(child.$el)) {
	    child._callHook('detached');
	  }
	}
	
	var linkerCache = new Cache(5000);
	
	/**
	 * A factory that can be used to create instances of a
	 * fragment. Caches the compiled linker if possible.
	 *
	 * @param {Vue} vm
	 * @param {Element|String} el
	 */
	function FragmentFactory(vm, el) {
	  this.vm = vm;
	  var template;
	  var isString = typeof el === 'string';
	  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {
	    template = parseTemplate(el, true);
	  } else {
	    template = document.createDocumentFragment();
	    template.appendChild(el);
	  }
	  this.template = template;
	  // linker can be cached, but only for components
	  var linker;
	  var cid = vm.constructor.cid;
	  if (cid > 0) {
	    var cacheId = cid + (isString ? el : getOuterHTML(el));
	    linker = linkerCache.get(cacheId);
	    if (!linker) {
	      linker = compile(template, vm.$options, true);
	      linkerCache.put(cacheId, linker);
	    }
	  } else {
	    linker = compile(template, vm.$options, true);
	  }
	  this.linker = linker;
	}
	
	/**
	 * Create a fragment instance with given host and scope.
	 *
	 * @param {Vue} host
	 * @param {Object} scope
	 * @param {Fragment} parentFrag
	 */
	
	FragmentFactory.prototype.create = function (host, scope, parentFrag) {
	  var frag = cloneNode(this.template);
	  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);
	};
	
	var ON = 700;
	var MODEL = 800;
	var BIND = 850;
	var TRANSITION = 1100;
	var EL = 1500;
	var COMPONENT = 1500;
	var PARTIAL = 1750;
	var IF = 2100;
	var FOR = 2200;
	var SLOT = 2300;
	
	var uid$3 = 0;
	
	var vFor = {
	
	  priority: FOR,
	  terminal: true,
	
	  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],
	
	  bind: function bind() {
	    // support "item in/of items" syntax
	    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);
	    if (inMatch) {
	      var itMatch = inMatch[1].match(/\((.*),(.*)\)/);
	      if (itMatch) {
	        this.iterator = itMatch[1].trim();
	        this.alias = itMatch[2].trim();
	      } else {
	        this.alias = inMatch[1].trim();
	      }
	      this.expression = inMatch[2];
	    }
	
	    if (!this.alias) {
	      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression "' + this.descriptor.raw + '": ' + 'alias is required.', this.vm);
	      return;
	    }
	
	    // uid as a cache identifier
	    this.id = '__v-for__' + ++uid$3;
	
	    // check if this is an option list,
	    // so that we know if we need to update the <select>'s
	    // v-model when the option list has changed.
	    // because v-model has a lower priority than v-for,
	    // the v-model is not bound here yet, so we have to
	    // retrive it in the actual updateModel() function.
	    var tag = this.el.tagName;
	    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';
	
	    // setup anchor nodes
	    this.start = createAnchor('v-for-start');
	    this.end = createAnchor('v-for-end');
	    replace(this.el, this.end);
	    before(this.start, this.end);
	
	    // cache
	    this.cache = Object.create(null);
	
	    // fragment factory
	    this.factory = new FragmentFactory(this.vm, this.el);
	  },
	
	  update: function update(data) {
	    this.diff(data);
	    this.updateRef();
	    this.updateModel();
	  },
	
	  /**
	   * Diff, based on new data and old data, determine the
	   * minimum amount of DOM manipulations needed to make the
	   * DOM reflect the new data Array.
	   *
	   * The algorithm diffs the new data Array by storing a
	   * hidden reference to an owner vm instance on previously
	   * seen data. This allows us to achieve O(n) which is
	   * better than a levenshtein distance based algorithm,
	   * which is O(m * n).
	   *
	   * @param {Array} data
	   */
	
	  diff: function diff(data) {
	    // check if the Array was converted from an Object
	    var item = data[0];
	    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');
	
	    var trackByKey = this.params.trackBy;
	    var oldFrags = this.frags;
	    var frags = this.frags = new Array(data.length);
	    var alias = this.alias;
	    var iterator = this.iterator;
	    var start = this.start;
	    var end = this.end;
	    var inDocument = inDoc(start);
	    var init = !oldFrags;
	    var i, l, frag, key, value, primitive;
	
	    // First pass, go through the new Array and fill up
	    // the new frags array. If a piece of data has a cached
	    // instance for it, we reuse it. Otherwise build a new
	    // instance.
	    for (i = 0, l = data.length; i < l; i++) {
	      item = data[i];
	      key = convertedFromObject ? item.$key : null;
	      value = convertedFromObject ? item.$value : item;
	      primitive = !isObject(value);
	      frag = !init && this.getCachedFrag(value, i, key);
	      if (frag) {
	        // reusable fragment
	        frag.reused = true;
	        // update $index
	        frag.scope.$index = i;
	        // update $key
	        if (key) {
	          frag.scope.$key = key;
	        }
	        // update iterator
	        if (iterator) {
	          frag.scope[iterator] = key !== null ? key : i;
	        }
	        // update data for track-by, object repeat &
	        // primitive values.
	        if (trackByKey || convertedFromObject || primitive) {
	          withoutConversion(function () {
	            frag.scope[alias] = value;
	          });
	        }
	      } else {
	        // new isntance
	        frag = this.create(value, alias, i, key);
	        frag.fresh = !init;
	      }
	      frags[i] = frag;
	      if (init) {
	        frag.before(end);
	      }
	    }
	
	    // we're done for the initial render.
	    if (init) {
	      return;
	    }
	
	    // Second pass, go through the old fragments and
	    // destroy those who are not reused (and remove them
	    // from cache)
	    var removalIndex = 0;
	    var totalRemoved = oldFrags.length - frags.length;
	    // when removing a large number of fragments, watcher removal
	    // turns out to be a perf bottleneck, so we batch the watcher
	    // removals into a single filter call!
	    this.vm._vForRemoving = true;
	    for (i = 0, l = oldFrags.length; i < l; i++) {
	      frag = oldFrags[i];
	      if (!frag.reused) {
	        this.deleteCachedFrag(frag);
	        this.remove(frag, removalIndex++, totalRemoved, inDocument);
	      }
	    }
	    this.vm._vForRemoving = false;
	    if (removalIndex) {
	      this.vm._watchers = this.vm._watchers.filter(function (w) {
	        return w.active;
	      });
	    }
	
	    // Final pass, move/insert new fragments into the
	    // right place.
	    var targetPrev, prevEl, currentPrev;
	    var insertionIndex = 0;
	    for (i = 0, l = frags.length; i < l; i++) {
	      frag = frags[i];
	      // this is the frag that we should be after
	      targetPrev = frags[i - 1];
	      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;
	      if (frag.reused && !frag.staggerCb) {
	        currentPrev = findPrevFrag(frag, start, this.id);
	        if (currentPrev !== targetPrev && (!currentPrev ||
	        // optimization for moving a single item.
	        // thanks to suggestions by @livoras in #1807
	        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {
	          this.move(frag, prevEl);
	        }
	      } else {
	        // new instance, or still in stagger.
	        // insert with updated stagger index.
	        this.insert(frag, insertionIndex++, prevEl, inDocument);
	      }
	      frag.reused = frag.fresh = false;
	    }
	  },
	
	  /**
	   * Create a new fragment instance.
	   *
	   * @param {*} value
	   * @param {String} alias
	   * @param {Number} index
	   * @param {String} [key]
	   * @return {Fragment}
	   */
	
	  create: function create(value, alias, index, key) {
	    var host = this._host;
	    // create iteration scope
	    var parentScope = this._scope || this.vm;
	    var scope = Object.create(parentScope);
	    // ref holder for the scope
	    scope.$refs = Object.create(parentScope.$refs);
	    scope.$els = Object.create(parentScope.$els);
	    // make sure point $parent to parent scope
	    scope.$parent = parentScope;
	    // for two-way binding on alias
	    scope.$forContext = this;
	    // define scope properties
	    // important: define the scope alias without forced conversion
	    // so that frozen data structures remain non-reactive.
	    withoutConversion(function () {
	      defineReactive(scope, alias, value);
	    });
	    defineReactive(scope, '$index', index);
	    if (key) {
	      defineReactive(scope, '$key', key);
	    } else if (scope.$key) {
	      // avoid accidental fallback
	      def(scope, '$key', null);
	    }
	    if (this.iterator) {
	      defineReactive(scope, this.iterator, key !== null ? key : index);
	    }
	    var frag = this.factory.create(host, scope, this._frag);
	    frag.forId = this.id;
	    this.cacheFrag(value, frag, index, key);
	    return frag;
	  },
	
	  /**
	   * Update the v-ref on owner vm.
	   */
	
	  updateRef: function updateRef() {
	    var ref = this.descriptor.ref;
	    if (!ref) return;
	    var hash = (this._scope || this.vm).$refs;
	    var refs;
	    if (!this.fromObject) {
	      refs = this.frags.map(findVmFromFrag);
	    } else {
	      refs = {};
	      this.frags.forEach(function (frag) {
	        refs[frag.scope.$key] = findVmFromFrag(frag);
	      });
	    }
	    hash[ref] = refs;
	  },
	
	  /**
	   * For option lists, update the containing v-model on
	   * parent <select>.
	   */
	
	  updateModel: function updateModel() {
	    if (this.isOption) {
	      var parent = this.start.parentNode;
	      var model = parent && parent.__v_model;
	      if (model) {
	        model.forceUpdate();
	      }
	    }
	  },
	
	  /**
	   * Insert a fragment. Handles staggering.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Node} prevEl
	   * @param {Boolean} inDocument
	   */
	
	  insert: function insert(frag, index, prevEl, inDocument) {
	    if (frag.staggerCb) {
	      frag.staggerCb.cancel();
	      frag.staggerCb = null;
	    }
	    var staggerAmount = this.getStagger(frag, index, null, 'enter');
	    if (inDocument && staggerAmount) {
	      // create an anchor and insert it synchronously,
	      // so that we can resolve the correct order without
	      // worrying about some elements not inserted yet
	      var anchor = frag.staggerAnchor;
	      if (!anchor) {
	        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');
	        anchor.__v_frag = frag;
	      }
	      after(anchor, prevEl);
	      var op = frag.staggerCb = cancellable(function () {
	        frag.staggerCb = null;
	        frag.before(anchor);
	        remove(anchor);
	      });
	      setTimeout(op, staggerAmount);
	    } else {
	      var target = prevEl.nextSibling;
	      /* istanbul ignore if */
	      if (!target) {
	        // reset end anchor position in case the position was messed up
	        // by an external drag-n-drop library.
	        after(this.end, prevEl);
	        target = this.end;
	      }
	      frag.before(target);
	    }
	  },
	
	  /**
	   * Remove a fragment. Handles staggering.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Number} total
	   * @param {Boolean} inDocument
	   */
	
	  remove: function remove(frag, index, total, inDocument) {
	    if (frag.staggerCb) {
	      frag.staggerCb.cancel();
	      frag.staggerCb = null;
	      // it's not possible for the same frag to be removed
	      // twice, so if we have a pending stagger callback,
	      // it means this frag is queued for enter but removed
	      // before its transition started. Since it is already
	      // destroyed, we can just leave it in detached state.
	      return;
	    }
	    var staggerAmount = this.getStagger(frag, index, total, 'leave');
	    if (inDocument && staggerAmount) {
	      var op = frag.staggerCb = cancellable(function () {
	        frag.staggerCb = null;
	        frag.remove();
	      });
	      setTimeout(op, staggerAmount);
	    } else {
	      frag.remove();
	    }
	  },
	
	  /**
	   * Move a fragment to a new position.
	   * Force no transition.
	   *
	   * @param {Fragment} frag
	   * @param {Node} prevEl
	   */
	
	  move: function move(frag, prevEl) {
	    // fix a common issue with Sortable:
	    // if prevEl doesn't have nextSibling, this means it's
	    // been dragged after the end anchor. Just re-position
	    // the end anchor to the end of the container.
	    /* istanbul ignore if */
	    if (!prevEl.nextSibling) {
	      this.end.parentNode.appendChild(this.end);
	    }
	    frag.before(prevEl.nextSibling, false);
	  },
	
	  /**
	   * Cache a fragment using track-by or the object key.
	   *
	   * @param {*} value
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {String} [key]
	   */
	
	  cacheFrag: function cacheFrag(value, frag, index, key) {
	    var trackByKey = this.params.trackBy;
	    var cache = this.cache;
	    var primitive = !isObject(value);
	    var id;
	    if (key || trackByKey || primitive) {
	      id = getTrackByKey(index, key, value, trackByKey);
	      if (!cache[id]) {
	        cache[id] = frag;
	      } else if (trackByKey !== '$index') {
	        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
	      }
	    } else {
	      id = this.id;
	      if (hasOwn(value, id)) {
	        if (value[id] === null) {
	          value[id] = frag;
	        } else {
	          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
	        }
	      } else if (Object.isExtensible(value)) {
	        def(value, id, frag);
	      } else if (process.env.NODE_ENV !== 'production') {
	        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');
	      }
	    }
	    frag.raw = value;
	  },
	
	  /**
	   * Get a cached fragment from the value/index/key
	   *
	   * @param {*} value
	   * @param {Number} index
	   * @param {String} key
	   * @return {Fragment}
	   */
	
	  getCachedFrag: function getCachedFrag(value, index, key) {
	    var trackByKey = this.params.trackBy;
	    var primitive = !isObject(value);
	    var frag;
	    if (key || trackByKey || primitive) {
	      var id = getTrackByKey(index, key, value, trackByKey);
	      frag = this.cache[id];
	    } else {
	      frag = value[this.id];
	    }
	    if (frag && (frag.reused || frag.fresh)) {
	      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
	    }
	    return frag;
	  },
	
	  /**
	   * Delete a fragment from cache.
	   *
	   * @param {Fragment} frag
	   */
	
	  deleteCachedFrag: function deleteCachedFrag(frag) {
	    var value = frag.raw;
	    var trackByKey = this.params.trackBy;
	    var scope = frag.scope;
	    var index = scope.$index;
	    // fix #948: avoid accidentally fall through to
	    // a parent repeater which happens to have $key.
	    var key = hasOwn(scope, '$key') && scope.$key;
	    var primitive = !isObject(value);
	    if (trackByKey || key || primitive) {
	      var id = getTrackByKey(index, key, value, trackByKey);
	      this.cache[id] = null;
	    } else {
	      value[this.id] = null;
	      frag.raw = null;
	    }
	  },
	
	  /**
	   * Get the stagger amount for an insertion/removal.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Number} total
	   * @param {String} type
	   */
	
	  getStagger: function getStagger(frag, index, total, type) {
	    type = type + 'Stagger';
	    var trans = frag.node.__v_trans;
	    var hooks = trans && trans.hooks;
	    var hook = hooks && (hooks[type] || hooks.stagger);
	    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);
	  },
	
	  /**
	   * Pre-process the value before piping it through the
	   * filters. This is passed to and called by the watcher.
	   */
	
	  _preProcess: function _preProcess(value) {
	    // regardless of type, store the un-filtered raw value.
	    this.rawValue = value;
	    return value;
	  },
	
	  /**
	   * Post-process the value after it has been piped through
	   * the filters. This is passed to and called by the watcher.
	   *
	   * It is necessary for this to be called during the
	   * watcher's dependency collection phase because we want
	   * the v-for to update when the source Object is mutated.
	   */
	
	  _postProcess: function _postProcess(value) {
	    if (isArray(value)) {
	      return value;
	    } else if (isPlainObject(value)) {
	      // convert plain object to array.
	      var keys = Object.keys(value);
	      var i = keys.length;
	      var res = new Array(i);
	      var key;
	      while (i--) {
	        key = keys[i];
	        res[i] = {
	          $key: key,
	          $value: value[key]
	        };
	      }
	      return res;
	    } else {
	      if (typeof value === 'number' && !isNaN(value)) {
	        value = range(value);
	      }
	      return value || [];
	    }
	  },
	
	  unbind: function unbind() {
	    if (this.descriptor.ref) {
	      (this._scope || this.vm).$refs[this.descriptor.ref] = null;
	    }
	    if (this.frags) {
	      var i = this.frags.length;
	      var frag;
	      while (i--) {
	        frag = this.frags[i];
	        this.deleteCachedFrag(frag);
	        frag.destroy();
	      }
	    }
	  }
	};
	
	/**
	 * Helper to find the previous element that is a fragment
	 * anchor. This is necessary because a destroyed frag's
	 * element could still be lingering in the DOM before its
	 * leaving transition finishes, but its inserted flag
	 * should have been set to false so we can skip them.
	 *
	 * If this is a block repeat, we want to make sure we only
	 * return frag that is bound to this v-for. (see #929)
	 *
	 * @param {Fragment} frag
	 * @param {Comment|Text} anchor
	 * @param {String} id
	 * @return {Fragment}
	 */
	
	function findPrevFrag(frag, anchor, id) {
	  var el = frag.node.previousSibling;
	  /* istanbul ignore if */
	  if (!el) return;
	  frag = el.__v_frag;
	  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {
	    el = el.previousSibling;
	    /* istanbul ignore if */
	    if (!el) return;
	    frag = el.__v_frag;
	  }
	  return frag;
	}
	
	/**
	 * Find a vm from a fragment.
	 *
	 * @param {Fragment} frag
	 * @return {Vue|undefined}
	 */
	
	function findVmFromFrag(frag) {
	  var node = frag.node;
	  // handle multi-node frag
	  if (frag.end) {
	    while (!node.__vue__ && node !== frag.end && node.nextSibling) {
	      node = node.nextSibling;
	    }
	  }
	  return node.__vue__;
	}
	
	/**
	 * Create a range array from given number.
	 *
	 * @param {Number} n
	 * @return {Array}
	 */
	
	function range(n) {
	  var i = -1;
	  var ret = new Array(Math.floor(n));
	  while (++i < n) {
	    ret[i] = i;
	  }
	  return ret;
	}
	
	/**
	 * Get the track by key for an item.
	 *
	 * @param {Number} index
	 * @param {String} key
	 * @param {*} value
	 * @param {String} [trackByKey]
	 */
	
	function getTrackByKey(index, key, value, trackByKey) {
	  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  vFor.warnDuplicate = function (value) {
	    warn('Duplicate value found in v-for="' + this.descriptor.raw + '": ' + JSON.stringify(value) + '. Use track-by="$index" if ' + 'you are expecting duplicate values.', this.vm);
	  };
	}
	
	var vIf = {
	
	  priority: IF,
	  terminal: true,
	
	  bind: function bind() {
	    var el = this.el;
	    if (!el.__vue__) {
	      // check else block
	      var next = el.nextElementSibling;
	      if (next && getAttr(next, 'v-else') !== null) {
	        remove(next);
	        this.elseEl = next;
	      }
	      // check main block
	      this.anchor = createAnchor('v-if');
	      replace(el, this.anchor);
	    } else {
	      process.env.NODE_ENV !== 'production' && warn('v-if="' + this.expression + '" cannot be ' + 'used on an instance root element.', this.vm);
	      this.invalid = true;
	    }
	  },
	
	  update: function update(value) {
	    if (this.invalid) return;
	    if (value) {
	      if (!this.frag) {
	        this.insert();
	      }
	    } else {
	      this.remove();
	    }
	  },
	
	  insert: function insert() {
	    if (this.elseFrag) {
	      this.elseFrag.remove();
	      this.elseFrag = null;
	    }
	    // lazy init factory
	    if (!this.factory) {
	      this.factory = new FragmentFactory(this.vm, this.el);
	    }
	    this.frag = this.factory.create(this._host, this._scope, this._frag);
	    this.frag.before(this.anchor);
	  },
	
	  remove: function remove() {
	    if (this.frag) {
	      this.frag.remove();
	      this.frag = null;
	    }
	    if (this.elseEl && !this.elseFrag) {
	      if (!this.elseFactory) {
	        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);
	      }
	      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);
	      this.elseFrag.before(this.anchor);
	    }
	  },
	
	  unbind: function unbind() {
	    if (this.frag) {
	      this.frag.destroy();
	    }
	    if (this.elseFrag) {
	      this.elseFrag.destroy();
	    }
	  }
	};
	
	var show = {
	
	  bind: function bind() {
	    // check else block
	    var next = this.el.nextElementSibling;
	    if (next && getAttr(next, 'v-else') !== null) {
	      this.elseEl = next;
	    }
	  },
	
	  update: function update(value) {
	    this.apply(this.el, value);
	    if (this.elseEl) {
	      this.apply(this.elseEl, !value);
	    }
	  },
	
	  apply: function apply(el, value) {
	    if (inDoc(el)) {
	      applyTransition(el, value ? 1 : -1, toggle, this.vm);
	    } else {
	      toggle();
	    }
	    function toggle() {
	      el.style.display = value ? '' : 'none';
	    }
	  }
	};
	
	var text$2 = {
	
	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	    var isRange = el.type === 'range';
	    var lazy = this.params.lazy;
	    var number = this.params.number;
	    var debounce = this.params.debounce;
	
	    // handle composition events.
	    //   http://blog.evanyou.me/2014/01/03/composition-event/
	    // skip this for Android because it handles composition
	    // events quite differently. Android doesn't trigger
	    // composition events for language input methods e.g.
	    // Chinese, but instead triggers them for spelling
	    // suggestions... (see Discussion/#162)
	    var composing = false;
	    if (!isAndroid && !isRange) {
	      this.on('compositionstart', function () {
	        composing = true;
	      });
	      this.on('compositionend', function () {
	        composing = false;
	        // in IE11 the "compositionend" event fires AFTER
	        // the "input" event, so the input handler is blocked
	        // at the end... have to call it here.
	        //
	        // #1327: in lazy mode this is unecessary.
	        if (!lazy) {
	          self.listener();
	        }
	      });
	    }
	
	    // prevent messing with the input when user is typing,
	    // and force update on blur.
	    this.focused = false;
	    if (!isRange && !lazy) {
	      this.on('focus', function () {
	        self.focused = true;
	      });
	      this.on('blur', function () {
	        self.focused = false;
	        // do not sync value after fragment removal (#2017)
	        if (!self._frag || self._frag.inserted) {
	          self.rawListener();
	        }
	      });
	    }
	
	    // Now attach the main listener
	    this.listener = this.rawListener = function () {
	      if (composing || !self._bound) {
	        return;
	      }
	      var val = number || isRange ? toNumber(el.value) : el.value;
	      self.set(val);
	      // force update on next tick to avoid lock & same value
	      // also only update when user is not typing
	      nextTick(function () {
	        if (self._bound && !self.focused) {
	          self.update(self._watcher.value);
	        }
	      });
	    };
	
	    // apply debounce
	    if (debounce) {
	      this.listener = _debounce(this.listener, debounce);
	    }
	
	    // Support jQuery events, since jQuery.trigger() doesn't
	    // trigger native events in some cases and some plugins
	    // rely on $.trigger()
	    //
	    // We want to make sure if a listener is attached using
	    // jQuery, it is also removed with jQuery, that's why
	    // we do the check for each directive instance and
	    // store that check result on itself. This also allows
	    // easier test coverage control by unsetting the global
	    // jQuery variable in tests.
	    this.hasjQuery = typeof jQuery === 'function';
	    if (this.hasjQuery) {
	      var method = jQuery.fn.on ? 'on' : 'bind';
	      jQuery(el)[method]('change', this.rawListener);
	      if (!lazy) {
	        jQuery(el)[method]('input', this.listener);
	      }
	    } else {
	      this.on('change', this.rawListener);
	      if (!lazy) {
	        this.on('input', this.listener);
	      }
	    }
	
	    // IE9 doesn't fire input event on backspace/del/cut
	    if (!lazy && isIE9) {
	      this.on('cut', function () {
	        nextTick(self.listener);
	      });
	      this.on('keyup', function (e) {
	        if (e.keyCode === 46 || e.keyCode === 8) {
	          self.listener();
	        }
	      });
	    }
	
	    // set initial value if present
	    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {
	      this.afterBind = this.listener;
	    }
	  },
	
	  update: function update(value) {
	    // #3029 only update when the value changes. This prevent
	    // browsers from overwriting values like selectionStart
	    value = _toString(value);
	    if (value !== this.el.value) this.el.value = value;
	  },
	
	  unbind: function unbind() {
	    var el = this.el;
	    if (this.hasjQuery) {
	      var method = jQuery.fn.off ? 'off' : 'unbind';
	      jQuery(el)[method]('change', this.listener);
	      jQuery(el)[method]('input', this.listener);
	    }
	  }
	};
	
	var radio = {
	
	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	
	    this.getValue = function () {
	      // value overwrite via v-bind:value
	      if (el.hasOwnProperty('_value')) {
	        return el._value;
	      }
	      var val = el.value;
	      if (self.params.number) {
	        val = toNumber(val);
	      }
	      return val;
	    };
	
	    this.listener = function () {
	      self.set(self.getValue());
	    };
	    this.on('change', this.listener);
	
	    if (el.hasAttribute('checked')) {
	      this.afterBind = this.listener;
	    }
	  },
	
	  update: function update(value) {
	    this.el.checked = looseEqual(value, this.getValue());
	  }
	};
	
	var select = {
	
	  bind: function bind() {
	    var _this = this;
	
	    var self = this;
	    var el = this.el;
	
	    // method to force update DOM using latest value.
	    this.forceUpdate = function () {
	      if (self._watcher) {
	        self.update(self._watcher.get());
	      }
	    };
	
	    // check if this is a multiple select
	    var multiple = this.multiple = el.hasAttribute('multiple');
	
	    // attach listener
	    this.listener = function () {
	      var value = getValue(el, multiple);
	      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;
	      self.set(value);
	    };
	    this.on('change', this.listener);
	
	    // if has initial value, set afterBind
	    var initValue = getValue(el, multiple, true);
	    if (multiple && initValue.length || !multiple && initValue !== null) {
	      this.afterBind = this.listener;
	    }
	
	    // All major browsers except Firefox resets
	    // selectedIndex with value -1 to 0 when the element
	    // is appended to a new parent, therefore we have to
	    // force a DOM update whenever that happens...
	    this.vm.$on('hook:attached', function () {
	      nextTick(_this.forceUpdate);
	    });
	    if (!inDoc(el)) {
	      nextTick(this.forceUpdate);
	    }
	  },
	
	  update: function update(value) {
	    var el = this.el;
	    el.selectedIndex = -1;
	    var multi = this.multiple && isArray(value);
	    var options = el.options;
	    var i = options.length;
	    var op, val;
	    while (i--) {
	      op = options[i];
	      val = op.hasOwnProperty('_value') ? op._value : op.value;
	      /* eslint-disable eqeqeq */
	      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);
	      /* eslint-enable eqeqeq */
	    }
	  },
	
	  unbind: function unbind() {
	    /* istanbul ignore next */
	    this.vm.$off('hook:attached', this.forceUpdate);
	  }
	};
	
	/**
	 * Get select value
	 *
	 * @param {SelectElement} el
	 * @param {Boolean} multi
	 * @param {Boolean} init
	 * @return {Array|*}
	 */
	
	function getValue(el, multi, init) {
	  var res = multi ? [] : null;
	  var op, val, selected;
	  for (var i = 0, l = el.options.length; i < l; i++) {
	    op = el.options[i];
	    selected = init ? op.hasAttribute('selected') : op.selected;
	    if (selected) {
	      val = op.hasOwnProperty('_value') ? op._value : op.value;
	      if (multi) {
	        res.push(val);
	      } else {
	        return val;
	      }
	    }
	  }
	  return res;
	}
	
	/**
	 * Native Array.indexOf uses strict equal, but in this
	 * case we need to match string/numbers with custom equal.
	 *
	 * @param {Array} arr
	 * @param {*} val
	 */
	
	function indexOf$1(arr, val) {
	  var i = arr.length;
	  while (i--) {
	    if (looseEqual(arr[i], val)) {
	      return i;
	    }
	  }
	  return -1;
	}
	
	var checkbox = {
	
	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	
	    this.getValue = function () {
	      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;
	    };
	
	    function getBooleanValue() {
	      var val = el.checked;
	      if (val && el.hasOwnProperty('_trueValue')) {
	        return el._trueValue;
	      }
	      if (!val && el.hasOwnProperty('_falseValue')) {
	        return el._falseValue;
	      }
	      return val;
	    }
	
	    this.listener = function () {
	      var model = self._watcher.value;
	      if (isArray(model)) {
	        var val = self.getValue();
	        if (el.checked) {
	          if (indexOf(model, val) < 0) {
	            model.push(val);
	          }
	        } else {
	          model.$remove(val);
	        }
	      } else {
	        self.set(getBooleanValue());
	      }
	    };
	
	    this.on('change', this.listener);
	    if (el.hasAttribute('checked')) {
	      this.afterBind = this.listener;
	    }
	  },
	
	  update: function update(value) {
	    var el = this.el;
	    if (isArray(value)) {
	      el.checked = indexOf(value, this.getValue()) > -1;
	    } else {
	      if (el.hasOwnProperty('_trueValue')) {
	        el.checked = looseEqual(value, el._trueValue);
	      } else {
	        el.checked = !!value;
	      }
	    }
	  }
	};
	
	var handlers = {
	  text: text$2,
	  radio: radio,
	  select: select,
	  checkbox: checkbox
	};
	
	var model = {
	
	  priority: MODEL,
	  twoWay: true,
	  handlers: handlers,
	  params: ['lazy', 'number', 'debounce'],
	
	  /**
	   * Possible elements:
	   *   <select>
	   *   <textarea>
	   *   <input type="*">
	   *     - text
	   *     - checkbox
	   *     - radio
	   *     - number
	   */
	
	  bind: function bind() {
	    // friendly warning...
	    this.checkFilters();
	    if (this.hasRead && !this.hasWrite) {
	      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model="' + this.descriptor.raw + '". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);
	    }
	    var el = this.el;
	    var tag = el.tagName;
	    var handler;
	    if (tag === 'INPUT') {
	      handler = handlers[el.type] || handlers.text;
	    } else if (tag === 'SELECT') {
	      handler = handlers.select;
	    } else if (tag === 'TEXTAREA') {
	      handler = handlers.text;
	    } else {
	      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);
	      return;
	    }
	    el.__v_model = this;
	    handler.bind.call(this);
	    this.update = handler.update;
	    this._unbind = handler.unbind;
	  },
	
	  /**
	   * Check read/write filter stats.
	   */
	
	  checkFilters: function checkFilters() {
	    var filters = this.filters;
	    if (!filters) return;
	    var i = filters.length;
	    while (i--) {
	      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);
	      if (typeof filter === 'function' || filter.read) {
	        this.hasRead = true;
	      }
	      if (filter.write) {
	        this.hasWrite = true;
	      }
	    }
	  },
	
	  unbind: function unbind() {
	    this.el.__v_model = null;
	    this._unbind && this._unbind();
	  }
	};
	
	// keyCode aliases
	var keyCodes = {
	  esc: 27,
	  tab: 9,
	  enter: 13,
	  space: 32,
	  'delete': [8, 46],
	  up: 38,
	  left: 37,
	  right: 39,
	  down: 40
	};
	
	function keyFilter(handler, keys) {
	  var codes = keys.map(function (key) {
	    var charCode = key.charCodeAt(0);
	    if (charCode > 47 && charCode < 58) {
	      return parseInt(key, 10);
	    }
	    if (key.length === 1) {
	      charCode = key.toUpperCase().charCodeAt(0);
	      if (charCode > 64 && charCode < 91) {
	        return charCode;
	      }
	    }
	    return keyCodes[key];
	  });
	  codes = [].concat.apply([], codes);
	  return function keyHandler(e) {
	    if (codes.indexOf(e.keyCode) > -1) {
	      return handler.call(this, e);
	    }
	  };
	}
	
	function stopFilter(handler) {
	  return function stopHandler(e) {
	    e.stopPropagation();
	    return handler.call(this, e);
	  };
	}
	
	function preventFilter(handler) {
	  return function preventHandler(e) {
	    e.preventDefault();
	    return handler.call(this, e);
	  };
	}
	
	function selfFilter(handler) {
	  return function selfHandler(e) {
	    if (e.target === e.currentTarget) {
	      return handler.call(this, e);
	    }
	  };
	}
	
	var on$1 = {
	
	  priority: ON,
	  acceptStatement: true,
	  keyCodes: keyCodes,
	
	  bind: function bind() {
	    // deal with iframes
	    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {
	      var self = this;
	      this.iframeBind = function () {
	        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);
	      };
	      this.on('load', this.iframeBind);
	    }
	  },
	
	  update: function update(handler) {
	    // stub a noop for v-on with no value,
	    // e.g. @mousedown.prevent
	    if (!this.descriptor.raw) {
	      handler = function () {};
	    }
	
	    if (typeof handler !== 'function') {
	      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '="' + this.expression + '" expects a function value, ' + 'got ' + handler, this.vm);
	      return;
	    }
	
	    // apply modifiers
	    if (this.modifiers.stop) {
	      handler = stopFilter(handler);
	    }
	    if (this.modifiers.prevent) {
	      handler = preventFilter(handler);
	    }
	    if (this.modifiers.self) {
	      handler = selfFilter(handler);
	    }
	    // key filter
	    var keys = Object.keys(this.modifiers).filter(function (key) {
	      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';
	    });
	    if (keys.length) {
	      handler = keyFilter(handler, keys);
	    }
	
	    this.reset();
	    this.handler = handler;
	
	    if (this.iframeBind) {
	      this.iframeBind();
	    } else {
	      on(this.el, this.arg, this.handler, this.modifiers.capture);
	    }
	  },
	
	  reset: function reset() {
	    var el = this.iframeBind ? this.el.contentWindow : this.el;
	    if (this.handler) {
	      off(el, this.arg, this.handler);
	    }
	  },
	
	  unbind: function unbind() {
	    this.reset();
	  }
	};
	
	var prefixes = ['-webkit-', '-moz-', '-ms-'];
	var camelPrefixes = ['Webkit', 'Moz', 'ms'];
	var importantRE = /!important;?$/;
	var propCache = Object.create(null);
	
	var testEl = null;
	
	var style = {
	
	  deep: true,
	
	  update: function update(value) {
	    if (typeof value === 'string') {
	      this.el.style.cssText = value;
	    } else if (isArray(value)) {
	      this.handleObject(value.reduce(extend, {}));
	    } else {
	      this.handleObject(value || {});
	    }
	  },
	
	  handleObject: function handleObject(value) {
	    // cache object styles so that only changed props
	    // are actually updated.
	    var cache = this.cache || (this.cache = {});
	    var name, val;
	    for (name in cache) {
	      if (!(name in value)) {
	        this.handleSingle(name, null);
	        delete cache[name];
	      }
	    }
	    for (name in value) {
	      val = value[name];
	      if (val !== cache[name]) {
	        cache[name] = val;
	        this.handleSingle(name, val);
	      }
	    }
	  },
	
	  handleSingle: function handleSingle(prop, value) {
	    prop = normalize(prop);
	    if (!prop) return; // unsupported prop
	    // cast possible numbers/booleans into strings
	    if (value != null) value += '';
	    if (value) {
	      var isImportant = importantRE.test(value) ? 'important' : '';
	      if (isImportant) {
	        /* istanbul ignore if */
	        if (process.env.NODE_ENV !== 'production') {
	          warn('It\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');
	        }
	        value = value.replace(importantRE, '').trim();
	        this.el.style.setProperty(prop.kebab, value, isImportant);
	      } else {
	        this.el.style[prop.camel] = value;
	      }
	    } else {
	      this.el.style[prop.camel] = '';
	    }
	  }
	
	};
	
	/**
	 * Normalize a CSS property name.
	 * - cache result
	 * - auto prefix
	 * - camelCase -> dash-case
	 *
	 * @param {String} prop
	 * @return {String}
	 */
	
	function normalize(prop) {
	  if (propCache[prop]) {
	    return propCache[prop];
	  }
	  var res = prefix(prop);
	  propCache[prop] = propCache[res] = res;
	  return res;
	}
	
	/**
	 * Auto detect the appropriate prefix for a CSS property.
	 * https://gist.github.com/paulirish/523692
	 *
	 * @param {String} prop
	 * @return {String}
	 */
	
	function prefix(prop) {
	  prop = hyphenate(prop);
	  var camel = camelize(prop);
	  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);
	  if (!testEl) {
	    testEl = document.createElement('div');
	  }
	  var i = prefixes.length;
	  var prefixed;
	  if (camel !== 'filter' && camel in testEl.style) {
	    return {
	      kebab: prop,
	      camel: camel
	    };
	  }
	  while (i--) {
	    prefixed = camelPrefixes[i] + upper;
	    if (prefixed in testEl.style) {
	      return {
	        kebab: prefixes[i] + prop,
	        camel: prefixed
	      };
	    }
	  }
	}
	
	// xlink
	var xlinkNS = 'http://www.w3.org/1999/xlink';
	var xlinkRE = /^xlink:/;
	
	// check for attributes that prohibit interpolations
	var disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;
	// these attributes should also set their corresponding properties
	// because they only affect the initial state of the element
	var attrWithPropsRE = /^(?:value|checked|selected|muted)$/;
	// these attributes expect enumrated values of "true" or "false"
	// but are not boolean attributes
	var enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;
	
	// these attributes should set a hidden property for
	// binding v-model to object values
	var modelProps = {
	  value: '_value',
	  'true-value': '_trueValue',
	  'false-value': '_falseValue'
	};
	
	var bind$1 = {
	
	  priority: BIND,
	
	  bind: function bind() {
	    var attr = this.arg;
	    var tag = this.el.tagName;
	    // should be deep watch on object mode
	    if (!attr) {
	      this.deep = true;
	    }
	    // handle interpolation bindings
	    var descriptor = this.descriptor;
	    var tokens = descriptor.interp;
	    if (tokens) {
	      // handle interpolations with one-time tokens
	      if (descriptor.hasOneTime) {
	        this.expression = tokensToExp(tokens, this._scope || this.vm);
	      }
	
	      // only allow binding on native attributes
	      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {
	        process.env.NODE_ENV !== 'production' && warn(attr + '="' + descriptor.raw + '": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);
	        this.el.removeAttribute(attr);
	        this.invalid = true;
	      }
	
	      /* istanbul ignore if */
	      if (process.env.NODE_ENV !== 'production') {
	        var raw = attr + '="' + descriptor.raw + '": ';
	        // warn src
	        if (attr === 'src') {
	          warn(raw + 'interpolation in "src" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);
	        }
	
	        // warn style
	        if (attr === 'style') {
	          warn(raw + 'interpolation in "style" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);
	        }
	      }
	    }
	  },
	
	  update: function update(value) {
	    if (this.invalid) {
	      return;
	    }
	    var attr = this.arg;
	    if (this.arg) {
	      this.handleSingle(attr, value);
	    } else {
	      this.handleObject(value || {});
	    }
	  },
	
	  // share object handler with v-bind:class
	  handleObject: style.handleObject,
	
	  handleSingle: function handleSingle(attr, value) {
	    var el = this.el;
	    var interp = this.descriptor.interp;
	    if (this.modifiers.camel) {
	      attr = camelize(attr);
	    }
	    if (!interp && attrWithPropsRE.test(attr) && attr in el) {
	      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to "null" for null...
	      ? '' : value : value;
	
	      if (el[attr] !== attrValue) {
	        el[attr] = attrValue;
	      }
	    }
	    // set model props
	    var modelProp = modelProps[attr];
	    if (!interp && modelProp) {
	      el[modelProp] = value;
	      // update v-model if present
	      var model = el.__v_model;
	      if (model) {
	        model.listener();
	      }
	    }
	    // do not set value attribute for textarea
	    if (attr === 'value' && el.tagName === 'TEXTAREA') {
	      el.removeAttribute(attr);
	      return;
	    }
	    // update attribute
	    if (enumeratedAttrRE.test(attr)) {
	      el.setAttribute(attr, value ? 'true' : 'false');
	    } else if (value != null && value !== false) {
	      if (attr === 'class') {
	        // handle edge case #1960:
	        // class interpolation should not overwrite Vue transition class
	        if (el.__v_trans) {
	          value += ' ' + el.__v_trans.id + '-transition';
	        }
	        setClass(el, value);
	      } else if (xlinkRE.test(attr)) {
	        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);
	      } else {
	        el.setAttribute(attr, value === true ? '' : value);
	      }
	    } else {
	      el.removeAttribute(attr);
	    }
	  }
	};
	
	var el = {
	
	  priority: EL,
	
	  bind: function bind() {
	    /* istanbul ignore if */
	    if (!this.arg) {
	      return;
	    }
	    var id = this.id = camelize(this.arg);
	    var refs = (this._scope || this.vm).$els;
	    if (hasOwn(refs, id)) {
	      refs[id] = this.el;
	    } else {
	      defineReactive(refs, id, this.el);
	    }
	  },
	
	  unbind: function unbind() {
	    var refs = (this._scope || this.vm).$els;
	    if (refs[this.id] === this.el) {
	      refs[this.id] = null;
	    }
	  }
	};
	
	var ref = {
	  bind: function bind() {
	    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);
	  }
	};
	
	var cloak = {
	  bind: function bind() {
	    var el = this.el;
	    this.vm.$once('pre-hook:compiled', function () {
	      el.removeAttribute('v-cloak');
	    });
	  }
	};
	
	// must export plain object
	var directives = {
	  text: text$1,
	  html: html,
	  'for': vFor,
	  'if': vIf,
	  show: show,
	  model: model,
	  on: on$1,
	  bind: bind$1,
	  el: el,
	  ref: ref,
	  cloak: cloak
	};
	
	var vClass = {
	
	  deep: true,
	
	  update: function update(value) {
	    if (!value) {
	      this.cleanup();
	    } else if (typeof value === 'string') {
	      this.setClass(value.trim().split(/\s+/));
	    } else {
	      this.setClass(normalize$1(value));
	    }
	  },
	
	  setClass: function setClass(value) {
	    this.cleanup(value);
	    for (var i = 0, l = value.length; i < l; i++) {
	      var val = value[i];
	      if (val) {
	        apply(this.el, val, addClass);
	      }
	    }
	    this.prevKeys = value;
	  },
	
	  cleanup: function cleanup(value) {
	    var prevKeys = this.prevKeys;
	    if (!prevKeys) return;
	    var i = prevKeys.length;
	    while (i--) {
	      var key = prevKeys[i];
	      if (!value || value.indexOf(key) < 0) {
	        apply(this.el, key, removeClass);
	      }
	    }
	  }
	};
	
	/**
	 * Normalize objects and arrays (potentially containing objects)
	 * into array of strings.
	 *
	 * @param {Object|Array<String|Object>} value
	 * @return {Array<String>}
	 */
	
	function normalize$1(value) {
	  var res = [];
	  if (isArray(value)) {
	    for (var i = 0, l = value.length; i < l; i++) {
	      var _key = value[i];
	      if (_key) {
	        if (typeof _key === 'string') {
	          res.push(_key);
	        } else {
	          for (var k in _key) {
	            if (_key[k]) res.push(k);
	          }
	        }
	      }
	    }
	  } else if (isObject(value)) {
	    for (var key in value) {
	      if (value[key]) res.push(key);
	    }
	  }
	  return res;
	}
	
	/**
	 * Add or remove a class/classes on an element
	 *
	 * @param {Element} el
	 * @param {String} key The class name. This may or may not
	 *                     contain a space character, in such a
	 *                     case we'll deal with multiple class
	 *                     names at once.
	 * @param {Function} fn
	 */
	
	function apply(el, key, fn) {
	  key = key.trim();
	  if (key.indexOf(' ') === -1) {
	    fn(el, key);
	    return;
	  }
	  // The key contains one or more space characters.
	  // Since a class name doesn't accept such characters, we
	  // treat it as multiple classes.
	  var keys = key.split(/\s+/);
	  for (var i = 0, l = keys.length; i < l; i++) {
	    fn(el, keys[i]);
	  }
	}
	
	var component = {
	
	  priority: COMPONENT,
	
	  params: ['keep-alive', 'transition-mode', 'inline-template'],
	
	  /**
	   * Setup. Two possible usages:
	   *
	   * - static:
	   *   <comp> or <div v-component="comp">
	   *
	   * - dynamic:
	   *   <component :is="view">
	   */
	
	  bind: function bind() {
	    if (!this.el.__vue__) {
	      // keep-alive cache
	      this.keepAlive = this.params.keepAlive;
	      if (this.keepAlive) {
	        this.cache = {};
	      }
	      // check inline-template
	      if (this.params.inlineTemplate) {
	        // extract inline template as a DocumentFragment
	        this.inlineTemplate = extractContent(this.el, true);
	      }
	      // component resolution related state
	      this.pendingComponentCb = this.Component = null;
	      // transition related state
	      this.pendingRemovals = 0;
	      this.pendingRemovalCb = null;
	      // create a ref anchor
	      this.anchor = createAnchor('v-component');
	      replace(this.el, this.anchor);
	      // remove is attribute.
	      // this is removed during compilation, but because compilation is
	      // cached, when the component is used elsewhere this attribute
	      // will remain at link time.
	      this.el.removeAttribute('is');
	      this.el.removeAttribute(':is');
	      // remove ref, same as above
	      if (this.descriptor.ref) {
	        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));
	      }
	      // if static, build right now.
	      if (this.literal) {
	        this.setComponent(this.expression);
	      }
	    } else {
	      process.env.NODE_ENV !== 'production' && warn('cannot mount component "' + this.expression + '" ' + 'on already mounted element: ' + this.el);
	    }
	  },
	
	  /**
	   * Public update, called by the watcher in the dynamic
	   * literal scenario, e.g. <component :is="view">
	   */
	
	  update: function update(value) {
	    if (!this.literal) {
	      this.setComponent(value);
	    }
	  },
	
	  /**
	   * Switch dynamic components. May resolve the component
	   * asynchronously, and perform transition based on
	   * specified transition mode. Accepts a few additional
	   * arguments specifically for vue-router.
	   *
	   * The callback is called when the full transition is
	   * finished.
	   *
	   * @param {String} value
	   * @param {Function} [cb]
	   */
	
	  setComponent: function setComponent(value, cb) {
	    this.invalidatePending();
	    if (!value) {
	      // just remove current
	      this.unbuild(true);
	      this.remove(this.childVM, cb);
	      this.childVM = null;
	    } else {
	      var self = this;
	      this.resolveComponent(value, function () {
	        self.mountComponent(cb);
	      });
	    }
	  },
	
	  /**
	   * Resolve the component constructor to use when creating
	   * the child vm.
	   *
	   * @param {String|Function} value
	   * @param {Function} cb
	   */
	
	  resolveComponent: function resolveComponent(value, cb) {
	    var self = this;
	    this.pendingComponentCb = cancellable(function (Component) {
	      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);
	      self.Component = Component;
	      cb();
	    });
	    this.vm._resolveComponent(value, this.pendingComponentCb);
	  },
	
	  /**
	   * Create a new instance using the current constructor and
	   * replace the existing instance. This method doesn't care
	   * whether the new component and the old one are actually
	   * the same.
	   *
	   * @param {Function} [cb]
	   */
	
	  mountComponent: function mountComponent(cb) {
	    // actual mount
	    this.unbuild(true);
	    var self = this;
	    var activateHooks = this.Component.options.activate;
	    var cached = this.getCached();
	    var newComponent = this.build();
	    if (activateHooks && !cached) {
	      this.waitingFor = newComponent;
	      callActivateHooks(activateHooks, newComponent, function () {
	        if (self.waitingFor !== newComponent) {
	          return;
	        }
	        self.waitingFor = null;
	        self.transition(newComponent, cb);
	      });
	    } else {
	      // update ref for kept-alive component
	      if (cached) {
	        newComponent._updateRef();
	      }
	      this.transition(newComponent, cb);
	    }
	  },
	
	  /**
	   * When the component changes or unbinds before an async
	   * constructor is resolved, we need to invalidate its
	   * pending callback.
	   */
	
	  invalidatePending: function invalidatePending() {
	    if (this.pendingComponentCb) {
	      this.pendingComponentCb.cancel();
	      this.pendingComponentCb = null;
	    }
	  },
	
	  /**
	   * Instantiate/insert a new child vm.
	   * If keep alive and has cached instance, insert that
	   * instance; otherwise build a new one and cache it.
	   *
	   * @param {Object} [extraOptions]
	   * @return {Vue} - the created instance
	   */
	
	  build: function build(extraOptions) {
	    var cached = this.getCached();
	    if (cached) {
	      return cached;
	    }
	    if (this.Component) {
	      // default options
	      var options = {
	        name: this.ComponentName,
	        el: cloneNode(this.el),
	        template: this.inlineTemplate,
	        // make sure to add the child with correct parent
	        // if this is a transcluded component, its parent
	        // should be the transclusion host.
	        parent: this._host || this.vm,
	        // if no inline-template, then the compiled
	        // linker can be cached for better performance.
	        _linkerCachable: !this.inlineTemplate,
	        _ref: this.descriptor.ref,
	        _asComponent: true,
	        _isRouterView: this._isRouterView,
	        // if this is a transcluded component, context
	        // will be the common parent vm of this instance
	        // and its host.
	        _context: this.vm,
	        // if this is inside an inline v-for, the scope
	        // will be the intermediate scope created for this
	        // repeat fragment. this is used for linking props
	        // and container directives.
	        _scope: this._scope,
	        // pass in the owner fragment of this component.
	        // this is necessary so that the fragment can keep
	        // track of its contained components in order to
	        // call attach/detach hooks for them.
	        _frag: this._frag
	      };
	      // extra options
	      // in 1.0.0 this is used by vue-router only
	      /* istanbul ignore if */
	      if (extraOptions) {
	        extend(options, extraOptions);
	      }
	      var child = new this.Component(options);
	      if (this.keepAlive) {
	        this.cache[this.Component.cid] = child;
	      }
	      /* istanbul ignore if */
	      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {
	        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);
	      }
	      return child;
	    }
	  },
	
	  /**
	   * Try to get a cached instance of the current component.
	   *
	   * @return {Vue|undefined}
	   */
	
	  getCached: function getCached() {
	    return this.keepAlive && this.cache[this.Component.cid];
	  },
	
	  /**
	   * Teardown the current child, but defers cleanup so
	   * that we can separate the destroy and removal steps.
	   *
	   * @param {Boolean} defer
	   */
	
	  unbuild: function unbuild(defer) {
	    if (this.waitingFor) {
	      if (!this.keepAlive) {
	        this.waitingFor.$destroy();
	      }
	      this.waitingFor = null;
	    }
	    var child = this.childVM;
	    if (!child || this.keepAlive) {
	      if (child) {
	        // remove ref
	        child._inactive = true;
	        child._updateRef(true);
	      }
	      return;
	    }
	    // the sole purpose of `deferCleanup` is so that we can
	    // "deactivate" the vm right now and perform DOM removal
	    // later.
	    child.$destroy(false, defer);
	  },
	
	  /**
	   * Remove current destroyed child and manually do
	   * the cleanup after removal.
	   *
	   * @param {Function} cb
	   */
	
	  remove: function remove(child, cb) {
	    var keepAlive = this.keepAlive;
	    if (child) {
	      // we may have a component switch when a previous
	      // component is still being transitioned out.
	      // we want to trigger only one lastest insertion cb
	      // when the existing transition finishes. (#1119)
	      this.pendingRemovals++;
	      this.pendingRemovalCb = cb;
	      var self = this;
	      child.$remove(function () {
	        self.pendingRemovals--;
	        if (!keepAlive) child._cleanup();
	        if (!self.pendingRemovals && self.pendingRemovalCb) {
	          self.pendingRemovalCb();
	          self.pendingRemovalCb = null;
	        }
	      });
	    } else if (cb) {
	      cb();
	    }
	  },
	
	  /**
	   * Actually swap the components, depending on the
	   * transition mode. Defaults to simultaneous.
	   *
	   * @param {Vue} target
	   * @param {Function} [cb]
	   */
	
	  transition: function transition(target, cb) {
	    var self = this;
	    var current = this.childVM;
	    // for devtool inspection
	    if (current) current._inactive = true;
	    target._inactive = false;
	    this.childVM = target;
	    switch (self.params.transitionMode) {
	      case 'in-out':
	        target.$before(self.anchor, function () {
	          self.remove(current, cb);
	        });
	        break;
	      case 'out-in':
	        self.remove(current, function () {
	          target.$before(self.anchor, cb);
	        });
	        break;
	      default:
	        self.remove(current);
	        target.$before(self.anchor, cb);
	    }
	  },
	
	  /**
	   * Unbind.
	   */
	
	  unbind: function unbind() {
	    this.invalidatePending();
	    // Do not defer cleanup when unbinding
	    this.unbuild();
	    // destroy all keep-alive cached instances
	    if (this.cache) {
	      for (var key in this.cache) {
	        this.cache[key].$destroy();
	      }
	      this.cache = null;
	    }
	  }
	};
	
	/**
	 * Call activate hooks in order (asynchronous)
	 *
	 * @param {Array} hooks
	 * @param {Vue} vm
	 * @param {Function} cb
	 */
	
	function callActivateHooks(hooks, vm, cb) {
	  var total = hooks.length;
	  var called = 0;
	  hooks[0].call(vm, next);
	  function next() {
	    if (++called >= total) {
	      cb();
	    } else {
	      hooks[called].call(vm, next);
	    }
	  }
	}
	
	var propBindingModes = config._propBindingModes;
	var empty = {};
	
	// regexes
	var identRE$1 = /^[$_a-zA-Z]+[\w$]*$/;
	var settablePathRE = /^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/;
	
	/**
	 * Compile props on a root element and return
	 * a props link function.
	 *
	 * @param {Element|DocumentFragment} el
	 * @param {Array} propOptions
	 * @param {Vue} vm
	 * @return {Function} propsLinkFn
	 */
	
	function compileProps(el, propOptions, vm) {
	  var props = [];
	  var names = Object.keys(propOptions);
	  var i = names.length;
	  var options, name, attr, value, path, parsed, prop;
	  while (i--) {
	    name = names[i];
	    options = propOptions[name] || empty;
	
	    if (process.env.NODE_ENV !== 'production' && name === '$data') {
	      warn('Do not use $data as prop.', vm);
	      continue;
	    }
	
	    // props could contain dashes, which will be
	    // interpreted as minus calculations by the parser
	    // so we need to camelize the path here
	    path = camelize(name);
	    if (!identRE$1.test(path)) {
	      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: "' + name + '". Prop keys ' + 'must be valid identifiers.', vm);
	      continue;
	    }
	
	    prop = {
	      name: name,
	      path: path,
	      options: options,
	      mode: propBindingModes.ONE_WAY,
	      raw: null
	    };
	
	    attr = hyphenate(name);
	    // first check dynamic version
	    if ((value = getBindAttr(el, attr)) === null) {
	      if ((value = getBindAttr(el, attr + '.sync')) !== null) {
	        prop.mode = propBindingModes.TWO_WAY;
	      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {
	        prop.mode = propBindingModes.ONE_TIME;
	      }
	    }
	    if (value !== null) {
	      // has dynamic binding!
	      prop.raw = value;
	      parsed = parseDirective(value);
	      value = parsed.expression;
	      prop.filters = parsed.filters;
	      // check binding type
	      if (isLiteral(value) && !parsed.filters) {
	        // for expressions containing literal numbers and
	        // booleans, there's no need to setup a prop binding,
	        // so we can optimize them as a one-time set.
	        prop.optimizedLiteral = true;
	      } else {
	        prop.dynamic = true;
	        // check non-settable path for two-way bindings
	        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {
	          prop.mode = propBindingModes.ONE_WAY;
	          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);
	        }
	      }
	      prop.parentPath = value;
	
	      // warn required two-way
	      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {
	        warn('Prop "' + name + '" expects a two-way binding type.', vm);
	      }
	    } else if ((value = getAttr(el, attr)) !== null) {
	      // has literal binding!
	      prop.raw = value;
	    } else if (process.env.NODE_ENV !== 'production') {
	      // check possible camelCase prop usage
	      var lowerCaseName = path.toLowerCase();
	      value = /[A-Z\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));
	      if (value) {
	        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);
	      } else if (options.required) {
	        // warn missing required
	        warn('Missing required prop: ' + name, vm);
	      }
	    }
	    // push prop
	    props.push(prop);
	  }
	  return makePropsLinkFn(props);
	}
	
	/**
	 * Build a function that applies props to a vm.
	 *
	 * @param {Array} props
	 * @return {Function} propsLinkFn
	 */
	
	function makePropsLinkFn(props) {
	  return function propsLinkFn(vm, scope) {
	    // store resolved props info
	    vm._props = {};
	    var inlineProps = vm.$options.propsData;
	    var i = props.length;
	    var prop, path, options, value, raw;
	    while (i--) {
	      prop = props[i];
	      raw = prop.raw;
	      path = prop.path;
	      options = prop.options;
	      vm._props[path] = prop;
	      if (inlineProps && hasOwn(inlineProps, path)) {
	        initProp(vm, prop, inlineProps[path]);
	      }if (raw === null) {
	        // initialize absent prop
	        initProp(vm, prop, undefined);
	      } else if (prop.dynamic) {
	        // dynamic prop
	        if (prop.mode === propBindingModes.ONE_TIME) {
	          // one time binding
	          value = (scope || vm._context || vm).$get(prop.parentPath);
	          initProp(vm, prop, value);
	        } else {
	          if (vm._context) {
	            // dynamic binding
	            vm._bindDir({
	              name: 'prop',
	              def: propDef,
	              prop: prop
	            }, null, null, scope); // el, host, scope
	          } else {
	              // root instance
	              initProp(vm, prop, vm.$get(prop.parentPath));
	            }
	        }
	      } else if (prop.optimizedLiteral) {
	        // optimized literal, cast it and just set once
	        var stripped = stripQuotes(raw);
	        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;
	        initProp(vm, prop, value);
	      } else {
	        // string literal, but we need to cater for
	        // Boolean props with no value, or with same
	        // literal value (e.g. disabled="disabled")
	        // see https://github.com/vuejs/vue-loader/issues/182
	        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;
	        initProp(vm, prop, value);
	      }
	    }
	  };
	}
	
	/**
	 * Process a prop with a rawValue, applying necessary coersions,
	 * default values & assertions and call the given callback with
	 * processed value.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} rawValue
	 * @param {Function} fn
	 */
	
	function processPropValue(vm, prop, rawValue, fn) {
	  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);
	  var value = rawValue;
	  if (value === undefined) {
	    value = getPropDefaultValue(vm, prop);
	  }
	  value = coerceProp(prop, value, vm);
	  var coerced = value !== rawValue;
	  if (!assertProp(prop, value, vm)) {
	    value = undefined;
	  }
	  if (isSimple && !coerced) {
	    withoutConversion(function () {
	      fn(value);
	    });
	  } else {
	    fn(value);
	  }
	}
	
	/**
	 * Set a prop's initial value on a vm and its data object.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} value
	 */
	
	function initProp(vm, prop, value) {
	  processPropValue(vm, prop, value, function (value) {
	    defineReactive(vm, prop.path, value);
	  });
	}
	
	/**
	 * Update a prop's value on a vm.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} value
	 */
	
	function updateProp(vm, prop, value) {
	  processPropValue(vm, prop, value, function (value) {
	    vm[prop.path] = value;
	  });
	}
	
	/**
	 * Get the default value of a prop.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @return {*}
	 */
	
	function getPropDefaultValue(vm, prop) {
	  // no default, return undefined
	  var options = prop.options;
	  if (!hasOwn(options, 'default')) {
	    // absent boolean value defaults to false
	    return options.type === Boolean ? false : undefined;
	  }
	  var def = options['default'];
	  // warn against non-factory defaults for Object & Array
	  if (isObject(def)) {
	    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop "' + prop.name + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
	  }
	  // call factory function for non-Function types
	  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;
	}
	
	/**
	 * Assert whether a prop is valid.
	 *
	 * @param {Object} prop
	 * @param {*} value
	 * @param {Vue} vm
	 */
	
	function assertProp(prop, value, vm) {
	  if (!prop.options.required && ( // non-required
	  prop.raw === null || // abscent
	  value == null) // null or undefined
	  ) {
	      return true;
	    }
	  var options = prop.options;
	  var type = options.type;
	  var valid = !type;
	  var expectedTypes = [];
	  if (type) {
	    if (!isArray(type)) {
	      type = [type];
	    }
	    for (var i = 0; i < type.length && !valid; i++) {
	      var assertedType = assertType(value, type[i]);
	      expectedTypes.push(assertedType.expectedType);
	      valid = assertedType.valid;
	    }
	  }
	  if (!valid) {
	    if (process.env.NODE_ENV !== 'production') {
	      warn('Invalid prop: type check failed for prop "' + prop.name + '".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);
	    }
	    return false;
	  }
	  var validator = options.validator;
	  if (validator) {
	    if (!validator(value)) {
	      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop "' + prop.name + '".', vm);
	      return false;
	    }
	  }
	  return true;
	}
	
	/**
	 * Force parsing value with coerce option.
	 *
	 * @param {*} value
	 * @param {Object} options
	 * @return {*}
	 */
	
	function coerceProp(prop, value, vm) {
	  var coerce = prop.options.coerce;
	  if (!coerce) {
	    return value;
	  }
	  if (typeof coerce === 'function') {
	    return coerce(value);
	  } else {
	    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop "' + prop.name + '": expected function, got ' + typeof coerce + '.', vm);
	    return value;
	  }
	}
	
	/**
	 * Assert the type of a value
	 *
	 * @param {*} value
	 * @param {Function} type
	 * @return {Object}
	 */
	
	function assertType(value, type) {
	  var valid;
	  var expectedType;
	  if (type === String) {
	    expectedType = 'string';
	    valid = typeof value === expectedType;
	  } else if (type === Number) {
	    expectedType = 'number';
	    valid = typeof value === expectedType;
	  } else if (type === Boolean) {
	    expectedType = 'boolean';
	    valid = typeof value === expectedType;
	  } else if (type === Function) {
	    expectedType = 'function';
	    valid = typeof value === expectedType;
	  } else if (type === Object) {
	    expectedType = 'object';
	    valid = isPlainObject(value);
	  } else if (type === Array) {
	    expectedType = 'array';
	    valid = isArray(value);
	  } else {
	    valid = value instanceof type;
	  }
	  return {
	    valid: valid,
	    expectedType: expectedType
	  };
	}
	
	/**
	 * Format type for output
	 *
	 * @param {String} type
	 * @return {String}
	 */
	
	function formatType(type) {
	  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';
	}
	
	/**
	 * Format value
	 *
	 * @param {*} value
	 * @return {String}
	 */
	
	function formatValue(val) {
	  return Object.prototype.toString.call(val).slice(8, -1);
	}
	
	var bindingModes = config._propBindingModes;
	
	var propDef = {
	
	  bind: function bind() {
	    var child = this.vm;
	    var parent = child._context;
	    // passed in from compiler directly
	    var prop = this.descriptor.prop;
	    var childKey = prop.path;
	    var parentKey = prop.parentPath;
	    var twoWay = prop.mode === bindingModes.TWO_WAY;
	
	    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {
	      updateProp(child, prop, val);
	    }, {
	      twoWay: twoWay,
	      filters: prop.filters,
	      // important: props need to be observed on the
	      // v-for scope if present
	      scope: this._scope
	    });
	
	    // set the child initial value.
	    initProp(child, prop, parentWatcher.value);
	
	    // setup two-way binding
	    if (twoWay) {
	      // important: defer the child watcher creation until
	      // the created hook (after data observation)
	      var self = this;
	      child.$once('pre-hook:created', function () {
	        self.childWatcher = new Watcher(child, childKey, function (val) {
	          parentWatcher.set(val);
	        }, {
	          // ensure sync upward before parent sync down.
	          // this is necessary in cases e.g. the child
	          // mutates a prop array, then replaces it. (#1683)
	          sync: true
	        });
	      });
	    }
	  },
	
	  unbind: function unbind() {
	    this.parentWatcher.teardown();
	    if (this.childWatcher) {
	      this.childWatcher.teardown();
	    }
	  }
	};
	
	var queue$1 = [];
	var queued = false;
	
	/**
	 * Push a job into the queue.
	 *
	 * @param {Function} job
	 */
	
	function pushJob(job) {
	  queue$1.push(job);
	  if (!queued) {
	    queued = true;
	    nextTick(flush);
	  }
	}
	
	/**
	 * Flush the queue, and do one forced reflow before
	 * triggering transitions.
	 */
	
	function flush() {
	  // Force layout
	  var f = document.documentElement.offsetHeight;
	  for (var i = 0; i < queue$1.length; i++) {
	    queue$1[i]();
	  }
	  queue$1 = [];
	  queued = false;
	  // dummy return, so js linters don't complain about
	  // unused variable f
	  return f;
	}
	
	var TYPE_TRANSITION = 'transition';
	var TYPE_ANIMATION = 'animation';
	var transDurationProp = transitionProp + 'Duration';
	var animDurationProp = animationProp + 'Duration';
	
	/**
	 * If a just-entered element is applied the
	 * leave class while its enter transition hasn't started yet,
	 * and the transitioned property has the same value for both
	 * enter/leave, then the leave transition will be skipped and
	 * the transitionend event never fires. This function ensures
	 * its callback to be called after a transition has started
	 * by waiting for double raf.
	 *
	 * It falls back to setTimeout on devices that support CSS
	 * transitions but not raf (e.g. Android 4.2 browser) - since
	 * these environments are usually slow, we are giving it a
	 * relatively large timeout.
	 */
	
	var raf = inBrowser && window.requestAnimationFrame;
	var waitForTransitionStart = raf
	/* istanbul ignore next */
	? function (fn) {
	  raf(function () {
	    raf(fn);
	  });
	} : function (fn) {
	  setTimeout(fn, 50);
	};
	
	/**
	 * A Transition object that encapsulates the state and logic
	 * of the transition.
	 *
	 * @param {Element} el
	 * @param {String} id
	 * @param {Object} hooks
	 * @param {Vue} vm
	 */
	function Transition(el, id, hooks, vm) {
	  this.id = id;
	  this.el = el;
	  this.enterClass = hooks && hooks.enterClass || id + '-enter';
	  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';
	  this.hooks = hooks;
	  this.vm = vm;
	  // async state
	  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;
	  this.justEntered = false;
	  this.entered = this.left = false;
	  this.typeCache = {};
	  // check css transition type
	  this.type = hooks && hooks.type;
	  /* istanbul ignore if */
	  if (process.env.NODE_ENV !== 'production') {
	    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {
	      warn('invalid CSS transition type for transition="' + this.id + '": ' + this.type, vm);
	    }
	  }
	  // bind
	  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {
	    self[m] = bind(self[m], self);
	  });
	}
	
	var p$1 = Transition.prototype;
	
	/**
	 * Start an entering transition.
	 *
	 * 1. enter transition triggered
	 * 2. call beforeEnter hook
	 * 3. add enter class
	 * 4. insert/show element
	 * 5. call enter hook (with possible explicit js callback)
	 * 6. reflow
	 * 7. based on transition type:
	 *    - transition:
	 *        remove class now, wait for transitionend,
	 *        then done if there's no explicit js callback.
	 *    - animation:
	 *        wait for animationend, remove class,
	 *        then done if there's no explicit js callback.
	 *    - no css transition:
	 *        done now if there's no explicit js callback.
	 * 8. wait for either done or js callback, then call
	 *    afterEnter hook.
	 *
	 * @param {Function} op - insert/show the element
	 * @param {Function} [cb]
	 */
	
	p$1.enter = function (op, cb) {
	  this.cancelPending();
	  this.callHook('beforeEnter');
	  this.cb = cb;
	  addClass(this.el, this.enterClass);
	  op();
	  this.entered = false;
	  this.callHookWithCb('enter');
	  if (this.entered) {
	    return; // user called done synchronously.
	  }
	  this.cancel = this.hooks && this.hooks.enterCancelled;
	  pushJob(this.enterNextTick);
	};
	
	/**
	 * The "nextTick" phase of an entering transition, which is
	 * to be pushed into a queue and executed after a reflow so
	 * that removing the class can trigger a CSS transition.
	 */
	
	p$1.enterNextTick = function () {
	  var _this = this;
	
	  // prevent transition skipping
	  this.justEntered = true;
	  waitForTransitionStart(function () {
	    _this.justEntered = false;
	  });
	  var enterDone = this.enterDone;
	  var type = this.getCssTransitionType(this.enterClass);
	  if (!this.pendingJsCb) {
	    if (type === TYPE_TRANSITION) {
	      // trigger transition by removing enter class now
	      removeClass(this.el, this.enterClass);
	      this.setupCssCb(transitionEndEvent, enterDone);
	    } else if (type === TYPE_ANIMATION) {
	      this.setupCssCb(animationEndEvent, enterDone);
	    } else {
	      enterDone();
	    }
	  } else if (type === TYPE_TRANSITION) {
	    removeClass(this.el, this.enterClass);
	  }
	};
	
	/**
	 * The "cleanup" phase of an entering transition.
	 */
	
	p$1.enterDone = function () {
	  this.entered = true;
	  this.cancel = this.pendingJsCb = null;
	  removeClass(this.el, this.enterClass);
	  this.callHook('afterEnter');
	  if (this.cb) this.cb();
	};
	
	/**
	 * Start a leaving transition.
	 *
	 * 1. leave transition triggered.
	 * 2. call beforeLeave hook
	 * 3. add leave class (trigger css transition)
	 * 4. call leave hook (with possible explicit js callback)
	 * 5. reflow if no explicit js callback is provided
	 * 6. based on transition type:
	 *    - transition or animation:
	 *        wait for end event, remove class, then done if
	 *        there's no explicit js callback.
	 *    - no css transition:
	 *        done if there's no explicit js callback.
	 * 7. wait for either done or js callback, then call
	 *    afterLeave hook.
	 *
	 * @param {Function} op - remove/hide the element
	 * @param {Function} [cb]
	 */
	
	p$1.leave = function (op, cb) {
	  this.cancelPending();
	  this.callHook('beforeLeave');
	  this.op = op;
	  this.cb = cb;
	  addClass(this.el, this.leaveClass);
	  this.left = false;
	  this.callHookWithCb('leave');
	  if (this.left) {
	    return; // user called done synchronously.
	  }
	  this.cancel = this.hooks && this.hooks.leaveCancelled;
	  // only need to handle leaveDone if
	  // 1. the transition is already done (synchronously called
	  //    by the user, which causes this.op set to null)
	  // 2. there's no explicit js callback
	  if (this.op && !this.pendingJsCb) {
	    // if a CSS transition leaves immediately after enter,
	    // the transitionend event never fires. therefore we
	    // detect such cases and end the leave immediately.
	    if (this.justEntered) {
	      this.leaveDone();
	    } else {
	      pushJob(this.leaveNextTick);
	    }
	  }
	};
	
	/**
	 * The "nextTick" phase of a leaving transition.
	 */
	
	p$1.leaveNextTick = function () {
	  var type = this.getCssTransitionType(this.leaveClass);
	  if (type) {
	    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;
	    this.setupCssCb(event, this.leaveDone);
	  } else {
	    this.leaveDone();
	  }
	};
	
	/**
	 * The "cleanup" phase of a leaving transition.
	 */
	
	p$1.leaveDone = function () {
	  this.left = true;
	  this.cancel = this.pendingJsCb = null;
	  this.op();
	  removeClass(this.el, this.leaveClass);
	  this.callHook('afterLeave');
	  if (this.cb) this.cb();
	  this.op = null;
	};
	
	/**
	 * Cancel any pending callbacks from a previously running
	 * but not finished transition.
	 */
	
	p$1.cancelPending = function () {
	  this.op = this.cb = null;
	  var hasPending = false;
	  if (this.pendingCssCb) {
	    hasPending = true;
	    off(this.el, this.pendingCssEvent, this.pendingCssCb);
	    this.pendingCssEvent = this.pendingCssCb = null;
	  }
	  if (this.pendingJsCb) {
	    hasPending = true;
	    this.pendingJsCb.cancel();
	    this.pendingJsCb = null;
	  }
	  if (hasPending) {
	    removeClass(this.el, this.enterClass);
	    removeClass(this.el, this.leaveClass);
	  }
	  if (this.cancel) {
	    this.cancel.call(this.vm, this.el);
	    this.cancel = null;
	  }
	};
	
	/**
	 * Call a user-provided synchronous hook function.
	 *
	 * @param {String} type
	 */
	
	p$1.callHook = function (type) {
	  if (this.hooks && this.hooks[type]) {
	    this.hooks[type].call(this.vm, this.el);
	  }
	};
	
	/**
	 * Call a user-provided, potentially-async hook function.
	 * We check for the length of arguments to see if the hook
	 * expects a `done` callback. If true, the transition's end
	 * will be determined by when the user calls that callback;
	 * otherwise, the end is determined by the CSS transition or
	 * animation.
	 *
	 * @param {String} type
	 */
	
	p$1.callHookWithCb = function (type) {
	  var hook = this.hooks && this.hooks[type];
	  if (hook) {
	    if (hook.length > 1) {
	      this.pendingJsCb = cancellable(this[type + 'Done']);
	    }
	    hook.call(this.vm, this.el, this.pendingJsCb);
	  }
	};
	
	/**
	 * Get an element's transition type based on the
	 * calculated styles.
	 *
	 * @param {String} className
	 * @return {Number}
	 */
	
	p$1.getCssTransitionType = function (className) {
	  /* istanbul ignore if */
	  if (!transitionEndEvent ||
	  // skip CSS transitions if page is not visible -
	  // this solves the issue of transitionend events not
	  // firing until the page is visible again.
	  // pageVisibility API is supported in IE10+, same as
	  // CSS transitions.
	  document.hidden ||
	  // explicit js-only transition
	  this.hooks && this.hooks.css === false ||
	  // element is hidden
	  isHidden(this.el)) {
	    return;
	  }
	  var type = this.type || this.typeCache[className];
	  if (type) return type;
	  var inlineStyles = this.el.style;
	  var computedStyles = window.getComputedStyle(this.el);
	  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];
	  if (transDuration && transDuration !== '0s') {
	    type = TYPE_TRANSITION;
	  } else {
	    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];
	    if (animDuration && animDuration !== '0s') {
	      type = TYPE_ANIMATION;
	    }
	  }
	  if (type) {
	    this.typeCache[className] = type;
	  }
	  return type;
	};
	
	/**
	 * Setup a CSS transitionend/animationend callback.
	 *
	 * @param {String} event
	 * @param {Function} cb
	 */
	
	p$1.setupCssCb = function (event, cb) {
	  this.pendingCssEvent = event;
	  var self = this;
	  var el = this.el;
	  var onEnd = this.pendingCssCb = function (e) {
	    if (e.target === el) {
	      off(el, event, onEnd);
	      self.pendingCssEvent = self.pendingCssCb = null;
	      if (!self.pendingJsCb && cb) {
	        cb();
	      }
	    }
	  };
	  on(el, event, onEnd);
	};
	
	/**
	 * Check if an element is hidden - in that case we can just
	 * skip the transition alltogether.
	 *
	 * @param {Element} el
	 * @return {Boolean}
	 */
	
	function isHidden(el) {
	  if (/svg$/.test(el.namespaceURI)) {
	    // SVG elements do not have offset(Width|Height)
	    // so we need to check the client rect
	    var rect = el.getBoundingClientRect();
	    return !(rect.width || rect.height);
	  } else {
	    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
	  }
	}
	
	var transition$1 = {
	
	  priority: TRANSITION,
	
	  update: function update(id, oldId) {
	    var el = this.el;
	    // resolve on owner vm
	    var hooks = resolveAsset(this.vm.$options, 'transitions', id);
	    id = id || 'v';
	    oldId = oldId || 'v';
	    el.__v_trans = new Transition(el, id, hooks, this.vm);
	    removeClass(el, oldId + '-transition');
	    addClass(el, id + '-transition');
	  }
	};
	
	var internalDirectives = {
	  style: style,
	  'class': vClass,
	  component: component,
	  prop: propDef,
	  transition: transition$1
	};
	
	// special binding prefixes
	var bindRE = /^v-bind:|^:/;
	var onRE = /^v-on:|^@/;
	var dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;
	var modifierRE = /\.[^\.]+/g;
	var transitionRE = /^(v-bind:|:)?transition$/;
	
	// default directive priority
	var DEFAULT_PRIORITY = 1000;
	var DEFAULT_TERMINAL_PRIORITY = 2000;
	
	/**
	 * Compile a template and return a reusable composite link
	 * function, which recursively contains more link functions
	 * inside. This top level compile function would normally
	 * be called on instance root nodes, but can also be used
	 * for partial compilation if the partial argument is true.
	 *
	 * The returned composite link function, when called, will
	 * return an unlink function that tearsdown all directives
	 * created during the linking phase.
	 *
	 * @param {Element|DocumentFragment} el
	 * @param {Object} options
	 * @param {Boolean} partial
	 * @return {Function}
	 */
	
	function compile(el, options, partial) {
	  // link function for the node itself.
	  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;
	  // link function for the childNodes
	  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;
	
	  /**
	   * A composite linker function to be called on a already
	   * compiled piece of DOM, which instantiates all directive
	   * instances.
	   *
	   * @param {Vue} vm
	   * @param {Element|DocumentFragment} el
	   * @param {Vue} [host] - host vm of transcluded content
	   * @param {Object} [scope] - v-for scope
	   * @param {Fragment} [frag] - link context fragment
	   * @return {Function|undefined}
	   */
	
	  return function compositeLinkFn(vm, el, host, scope, frag) {
	    // cache childNodes before linking parent, fix #657
	    var childNodes = toArray(el.childNodes);
	    // link
	    var dirs = linkAndCapture(function compositeLinkCapturer() {
	      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);
	      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);
	    }, vm);
	    return makeUnlinkFn(vm, dirs);
	  };
	}
	
	/**
	 * Apply a linker to a vm/element pair and capture the
	 * directives created during the process.
	 *
	 * @param {Function} linker
	 * @param {Vue} vm
	 */
	
	function linkAndCapture(linker, vm) {
	  /* istanbul ignore if */
	  if (process.env.NODE_ENV === 'production') {
	    // reset directives before every capture in production
	    // mode, so that when unlinking we don't need to splice
	    // them out (which turns out to be a perf hit).
	    // they are kept in development mode because they are
	    // useful for Vue's own tests.
	    vm._directives = [];
	  }
	  var originalDirCount = vm._directives.length;
	  linker();
	  var dirs = vm._directives.slice(originalDirCount);
	  dirs.sort(directiveComparator);
	  for (var i = 0, l = dirs.length; i < l; i++) {
	    dirs[i]._bind();
	  }
	  return dirs;
	}
	
	/**
	 * Directive priority sort comparator
	 *
	 * @param {Object} a
	 * @param {Object} b
	 */
	
	function directiveComparator(a, b) {
	  a = a.descriptor.def.priority || DEFAULT_PRIORITY;
	  b = b.descriptor.def.priority || DEFAULT_PRIORITY;
	  return a > b ? -1 : a === b ? 0 : 1;
	}
	
	/**
	 * Linker functions return an unlink function that
	 * tearsdown all directives instances generated during
	 * the process.
	 *
	 * We create unlink functions with only the necessary
	 * information to avoid retaining additional closures.
	 *
	 * @param {Vue} vm
	 * @param {Array} dirs
	 * @param {Vue} [context]
	 * @param {Array} [contextDirs]
	 * @return {Function}
	 */
	
	function makeUnlinkFn(vm, dirs, context, contextDirs) {
	  function unlink(destroying) {
	    teardownDirs(vm, dirs, destroying);
	    if (context && contextDirs) {
	      teardownDirs(context, contextDirs);
	    }
	  }
	  // expose linked directives
	  unlink.dirs = dirs;
	  return unlink;
	}
	
	/**
	 * Teardown partial linked directives.
	 *
	 * @param {Vue} vm
	 * @param {Array} dirs
	 * @param {Boolean} destroying
	 */
	
	function teardownDirs(vm, dirs, destroying) {
	  var i = dirs.length;
	  while (i--) {
	    dirs[i]._teardown();
	    if (process.env.NODE_ENV !== 'production' && !destroying) {
	      vm._directives.$remove(dirs[i]);
	    }
	  }
	}
	
	/**
	 * Compile link props on an instance.
	 *
	 * @param {Vue} vm
	 * @param {Element} el
	 * @param {Object} props
	 * @param {Object} [scope]
	 * @return {Function}
	 */
	
	function compileAndLinkProps(vm, el, props, scope) {
	  var propsLinkFn = compileProps(el, props, vm);
	  var propDirs = linkAndCapture(function () {
	    propsLinkFn(vm, scope);
	  }, vm);
	  return makeUnlinkFn(vm, propDirs);
	}
	
	/**
	 * Compile the root element of an instance.
	 *
	 * 1. attrs on context container (context scope)
	 * 2. attrs on the component template root node, if
	 *    replace:true (child scope)
	 *
	 * If this is a fragment instance, we only need to compile 1.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @param {Object} contextOptions
	 * @return {Function}
	 */
	
	function compileRoot(el, options, contextOptions) {
	  var containerAttrs = options._containerAttrs;
	  var replacerAttrs = options._replacerAttrs;
	  var contextLinkFn, replacerLinkFn;
	
	  // only need to compile other attributes for
	  // non-fragment instances
	  if (el.nodeType !== 11) {
	    // for components, container and replacer need to be
	    // compiled separately and linked in different scopes.
	    if (options._asComponent) {
	      // 2. container attributes
	      if (containerAttrs && contextOptions) {
	        contextLinkFn = compileDirectives(containerAttrs, contextOptions);
	      }
	      if (replacerAttrs) {
	        // 3. replacer attributes
	        replacerLinkFn = compileDirectives(replacerAttrs, options);
	      }
	    } else {
	      // non-component, just compile as a normal element.
	      replacerLinkFn = compileDirectives(el.attributes, options);
	    }
	  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {
	    // warn container directives for fragment instances
	    var names = containerAttrs.filter(function (attr) {
	      // allow vue-loader/vueify scoped css attributes
	      return attr.name.indexOf('_v-') < 0 &&
	      // allow event listeners
	      !onRE.test(attr.name) &&
	      // allow slots
	      attr.name !== 'slot';
	    }).map(function (attr) {
	      return '"' + attr.name + '"';
	    });
	    if (names.length) {
	      var plural = names.length > 1;
	      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');
	    }
	  }
	
	  options._containerAttrs = options._replacerAttrs = null;
	  return function rootLinkFn(vm, el, scope) {
	    // link context scope dirs
	    var context = vm._context;
	    var contextDirs;
	    if (context && contextLinkFn) {
	      contextDirs = linkAndCapture(function () {
	        contextLinkFn(context, el, null, scope);
	      }, context);
	    }
	
	    // link self
	    var selfDirs = linkAndCapture(function () {
	      if (replacerLinkFn) replacerLinkFn(vm, el);
	    }, vm);
	
	    // return the unlink function that tearsdown context
	    // container directives.
	    return makeUnlinkFn(vm, selfDirs, context, contextDirs);
	  };
	}
	
	/**
	 * Compile a node and return a nodeLinkFn based on the
	 * node type.
	 *
	 * @param {Node} node
	 * @param {Object} options
	 * @return {Function|null}
	 */
	
	function compileNode(node, options) {
	  var type = node.nodeType;
	  if (type === 1 && !isScript(node)) {
	    return compileElement(node, options);
	  } else if (type === 3 && node.data.trim()) {
	    return compileTextNode(node, options);
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Compile an element and return a nodeLinkFn.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Function|null}
	 */
	
	function compileElement(el, options) {
	  // preprocess textareas.
	  // textarea treats its text content as the initial value.
	  // just bind it as an attr directive for value.
	  if (el.tagName === 'TEXTAREA') {
	    var tokens = parseText(el.value);
	    if (tokens) {
	      el.setAttribute(':value', tokensToExp(tokens));
	      el.value = '';
	    }
	  }
	  var linkFn;
	  var hasAttrs = el.hasAttributes();
	  var attrs = hasAttrs && toArray(el.attributes);
	  // check terminal directives (for & if)
	  if (hasAttrs) {
	    linkFn = checkTerminalDirectives(el, attrs, options);
	  }
	  // check element directives
	  if (!linkFn) {
	    linkFn = checkElementDirectives(el, options);
	  }
	  // check component
	  if (!linkFn) {
	    linkFn = checkComponent(el, options);
	  }
	  // normal directives
	  if (!linkFn && hasAttrs) {
	    linkFn = compileDirectives(attrs, options);
	  }
	  return linkFn;
	}
	
	/**
	 * Compile a textNode and return a nodeLinkFn.
	 *
	 * @param {TextNode} node
	 * @param {Object} options
	 * @return {Function|null} textNodeLinkFn
	 */
	
	function compileTextNode(node, options) {
	  // skip marked text nodes
	  if (node._skip) {
	    return removeText;
	  }
	
	  var tokens = parseText(node.wholeText);
	  if (!tokens) {
	    return null;
	  }
	
	  // mark adjacent text nodes as skipped,
	  // because we are using node.wholeText to compile
	  // all adjacent text nodes together. This fixes
	  // issues in IE where sometimes it splits up a single
	  // text node into multiple ones.
	  var next = node.nextSibling;
	  while (next && next.nodeType === 3) {
	    next._skip = true;
	    next = next.nextSibling;
	  }
	
	  var frag = document.createDocumentFragment();
	  var el, token;
	  for (var i = 0, l = tokens.length; i < l; i++) {
	    token = tokens[i];
	    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);
	    frag.appendChild(el);
	  }
	  return makeTextNodeLinkFn(tokens, frag, options);
	}
	
	/**
	 * Linker for an skipped text node.
	 *
	 * @param {Vue} vm
	 * @param {Text} node
	 */
	
	function removeText(vm, node) {
	  remove(node);
	}
	
	/**
	 * Process a single text token.
	 *
	 * @param {Object} token
	 * @param {Object} options
	 * @return {Node}
	 */
	
	function processTextToken(token, options) {
	  var el;
	  if (token.oneTime) {
	    el = document.createTextNode(token.value);
	  } else {
	    if (token.html) {
	      el = document.createComment('v-html');
	      setTokenType('html');
	    } else {
	      // IE will clean up empty textNodes during
	      // frag.cloneNode(true), so we have to give it
	      // something here...
	      el = document.createTextNode(' ');
	      setTokenType('text');
	    }
	  }
	  function setTokenType(type) {
	    if (token.descriptor) return;
	    var parsed = parseDirective(token.value);
	    token.descriptor = {
	      name: type,
	      def: directives[type],
	      expression: parsed.expression,
	      filters: parsed.filters
	    };
	  }
	  return el;
	}
	
	/**
	 * Build a function that processes a textNode.
	 *
	 * @param {Array<Object>} tokens
	 * @param {DocumentFragment} frag
	 */
	
	function makeTextNodeLinkFn(tokens, frag) {
	  return function textNodeLinkFn(vm, el, host, scope) {
	    var fragClone = frag.cloneNode(true);
	    var childNodes = toArray(fragClone.childNodes);
	    var token, value, node;
	    for (var i = 0, l = tokens.length; i < l; i++) {
	      token = tokens[i];
	      value = token.value;
	      if (token.tag) {
	        node = childNodes[i];
	        if (token.oneTime) {
	          value = (scope || vm).$eval(value);
	          if (token.html) {
	            replace(node, parseTemplate(value, true));
	          } else {
	            node.data = _toString(value);
	          }
	        } else {
	          vm._bindDir(token.descriptor, node, host, scope);
	        }
	      }
	    }
	    replace(el, fragClone);
	  };
	}
	
	/**
	 * Compile a node list and return a childLinkFn.
	 *
	 * @param {NodeList} nodeList
	 * @param {Object} options
	 * @return {Function|undefined}
	 */
	
	function compileNodeList(nodeList, options) {
	  var linkFns = [];
	  var nodeLinkFn, childLinkFn, node;
	  for (var i = 0, l = nodeList.length; i < l; i++) {
	    node = nodeList[i];
	    nodeLinkFn = compileNode(node, options);
	    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;
	    linkFns.push(nodeLinkFn, childLinkFn);
	  }
	  return linkFns.length ? makeChildLinkFn(linkFns) : null;
	}
	
	/**
	 * Make a child link function for a node's childNodes.
	 *
	 * @param {Array<Function>} linkFns
	 * @return {Function} childLinkFn
	 */
	
	function makeChildLinkFn(linkFns) {
	  return function childLinkFn(vm, nodes, host, scope, frag) {
	    var node, nodeLinkFn, childrenLinkFn;
	    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {
	      node = nodes[n];
	      nodeLinkFn = linkFns[i++];
	      childrenLinkFn = linkFns[i++];
	      // cache childNodes before linking parent, fix #657
	      var childNodes = toArray(node.childNodes);
	      if (nodeLinkFn) {
	        nodeLinkFn(vm, node, host, scope, frag);
	      }
	      if (childrenLinkFn) {
	        childrenLinkFn(vm, childNodes, host, scope, frag);
	      }
	    }
	  };
	}
	
	/**
	 * Check for element directives (custom elements that should
	 * be resovled as terminal directives).
	 *
	 * @param {Element} el
	 * @param {Object} options
	 */
	
	function checkElementDirectives(el, options) {
	  var tag = el.tagName.toLowerCase();
	  if (commonTagRE.test(tag)) {
	    return;
	  }
	  var def = resolveAsset(options, 'elementDirectives', tag);
	  if (def) {
	    return makeTerminalNodeLinkFn(el, tag, '', options, def);
	  }
	}
	
	/**
	 * Check if an element is a component. If yes, return
	 * a component link function.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Function|undefined}
	 */
	
	function checkComponent(el, options) {
	  var component = checkComponentAttr(el, options);
	  if (component) {
	    var ref = findRef(el);
	    var descriptor = {
	      name: 'component',
	      ref: ref,
	      expression: component.id,
	      def: internalDirectives.component,
	      modifiers: {
	        literal: !component.dynamic
	      }
	    };
	    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {
	      if (ref) {
	        defineReactive((scope || vm).$refs, ref, null);
	      }
	      vm._bindDir(descriptor, el, host, scope, frag);
	    };
	    componentLinkFn.terminal = true;
	    return componentLinkFn;
	  }
	}
	
	/**
	 * Check an element for terminal directives in fixed order.
	 * If it finds one, return a terminal link function.
	 *
	 * @param {Element} el
	 * @param {Array} attrs
	 * @param {Object} options
	 * @return {Function} terminalLinkFn
	 */
	
	function checkTerminalDirectives(el, attrs, options) {
	  // skip v-pre
	  if (getAttr(el, 'v-pre') !== null) {
	    return skip;
	  }
	  // skip v-else block, but only if following v-if
	  if (el.hasAttribute('v-else')) {
	    var prev = el.previousElementSibling;
	    if (prev && prev.hasAttribute('v-if')) {
	      return skip;
	    }
	  }
	
	  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;
	  for (var i = 0, j = attrs.length; i < j; i++) {
	    attr = attrs[i];
	    name = attr.name.replace(modifierRE, '');
	    if (matched = name.match(dirAttrRE)) {
	      def = resolveAsset(options, 'directives', matched[1]);
	      if (def && def.terminal) {
	        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {
	          termDef = def;
	          rawName = attr.name;
	          modifiers = parseModifiers(attr.name);
	          value = attr.value;
	          dirName = matched[1];
	          arg = matched[2];
	        }
	      }
	    }
	  }
	
	  if (termDef) {
	    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);
	  }
	}
	
	function skip() {}
	skip.terminal = true;
	
	/**
	 * Build a node link function for a terminal directive.
	 * A terminal link function terminates the current
	 * compilation recursion and handles compilation of the
	 * subtree in the directive.
	 *
	 * @param {Element} el
	 * @param {String} dirName
	 * @param {String} value
	 * @param {Object} options
	 * @param {Object} def
	 * @param {String} [rawName]
	 * @param {String} [arg]
	 * @param {Object} [modifiers]
	 * @return {Function} terminalLinkFn
	 */
	
	function makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {
	  var parsed = parseDirective(value);
	  var descriptor = {
	    name: dirName,
	    arg: arg,
	    expression: parsed.expression,
	    filters: parsed.filters,
	    raw: value,
	    attr: rawName,
	    modifiers: modifiers,
	    def: def
	  };
	  // check ref for v-for and router-view
	  if (dirName === 'for' || dirName === 'router-view') {
	    descriptor.ref = findRef(el);
	  }
	  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {
	    if (descriptor.ref) {
	      defineReactive((scope || vm).$refs, descriptor.ref, null);
	    }
	    vm._bindDir(descriptor, el, host, scope, frag);
	  };
	  fn.terminal = true;
	  return fn;
	}
	
	/**
	 * Compile the directives on an element and return a linker.
	 *
	 * @param {Array|NamedNodeMap} attrs
	 * @param {Object} options
	 * @return {Function}
	 */
	
	function compileDirectives(attrs, options) {
	  var i = attrs.length;
	  var dirs = [];
	  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;
	  while (i--) {
	    attr = attrs[i];
	    name = rawName = attr.name;
	    value = rawValue = attr.value;
	    tokens = parseText(value);
	    // reset arg
	    arg = null;
	    // check modifiers
	    modifiers = parseModifiers(name);
	    name = name.replace(modifierRE, '');
	
	    // attribute interpolations
	    if (tokens) {
	      value = tokensToExp(tokens);
	      arg = name;
	      pushDir('bind', directives.bind, tokens);
	      // warn against mixing mustaches with v-bind
	      if (process.env.NODE_ENV !== 'production') {
	        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {
	          return attr.name === ':class' || attr.name === 'v-bind:class';
	        })) {
	          warn('class="' + rawValue + '": Do not mix mustache interpolation ' + 'and v-bind for "class" on the same element. Use one or the other.', options);
	        }
	      }
	    } else
	
	      // special attribute: transition
	      if (transitionRE.test(name)) {
	        modifiers.literal = !bindRE.test(name);
	        pushDir('transition', internalDirectives.transition);
	      } else
	
	        // event handlers
	        if (onRE.test(name)) {
	          arg = name.replace(onRE, '');
	          pushDir('on', directives.on);
	        } else
	
	          // attribute bindings
	          if (bindRE.test(name)) {
	            dirName = name.replace(bindRE, '');
	            if (dirName === 'style' || dirName === 'class') {
	              pushDir(dirName, internalDirectives[dirName]);
	            } else {
	              arg = dirName;
	              pushDir('bind', directives.bind);
	            }
	          } else
	
	            // normal directives
	            if (matched = name.match(dirAttrRE)) {
	              dirName = matched[1];
	              arg = matched[2];
	
	              // skip v-else (when used with v-show)
	              if (dirName === 'else') {
	                continue;
	              }
	
	              dirDef = resolveAsset(options, 'directives', dirName, true);
	              if (dirDef) {
	                pushDir(dirName, dirDef);
	              }
	            }
	  }
	
	  /**
	   * Push a directive.
	   *
	   * @param {String} dirName
	   * @param {Object|Function} def
	   * @param {Array} [interpTokens]
	   */
	
	  function pushDir(dirName, def, interpTokens) {
	    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);
	    var parsed = !hasOneTimeToken && parseDirective(value);
	    dirs.push({
	      name: dirName,
	      attr: rawName,
	      raw: rawValue,
	      def: def,
	      arg: arg,
	      modifiers: modifiers,
	      // conversion from interpolation strings with one-time token
	      // to expression is differed until directive bind time so that we
	      // have access to the actual vm context for one-time bindings.
	      expression: parsed && parsed.expression,
	      filters: parsed && parsed.filters,
	      interp: interpTokens,
	      hasOneTime: hasOneTimeToken
	    });
	  }
	
	  if (dirs.length) {
	    return makeNodeLinkFn(dirs);
	  }
	}
	
	/**
	 * Parse modifiers from directive attribute name.
	 *
	 * @param {String} name
	 * @return {Object}
	 */
	
	function parseModifiers(name) {
	  var res = Object.create(null);
	  var match = name.match(modifierRE);
	  if (match) {
	    var i = match.length;
	    while (i--) {
	      res[match[i].slice(1)] = true;
	    }
	  }
	  return res;
	}
	
	/**
	 * Build a link function for all directives on a single node.
	 *
	 * @param {Array} directives
	 * @return {Function} directivesLinkFn
	 */
	
	function makeNodeLinkFn(directives) {
	  return function nodeLinkFn(vm, el, host, scope, frag) {
	    // reverse apply because it's sorted low to high
	    var i = directives.length;
	    while (i--) {
	      vm._bindDir(directives[i], el, host, scope, frag);
	    }
	  };
	}
	
	/**
	 * Check if an interpolation string contains one-time tokens.
	 *
	 * @param {Array} tokens
	 * @return {Boolean}
	 */
	
	function hasOneTime(tokens) {
	  var i = tokens.length;
	  while (i--) {
	    if (tokens[i].oneTime) return true;
	  }
	}
	
	function isScript(el) {
	  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');
	}
	
	var specialCharRE = /[^\w\-:\.]/;
	
	/**
	 * Process an element or a DocumentFragment based on a
	 * instance option object. This allows us to transclude
	 * a template node/fragment before the instance is created,
	 * so the processed fragment can then be cloned and reused
	 * in v-for.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Element|DocumentFragment}
	 */
	
	function transclude(el, options) {
	  // extract container attributes to pass them down
	  // to compiler, because they need to be compiled in
	  // parent scope. we are mutating the options object here
	  // assuming the same object will be used for compile
	  // right after this.
	  if (options) {
	    options._containerAttrs = extractAttrs(el);
	  }
	  // for template tags, what we want is its content as
	  // a documentFragment (for fragment instances)
	  if (isTemplate(el)) {
	    el = parseTemplate(el);
	  }
	  if (options) {
	    if (options._asComponent && !options.template) {
	      options.template = '<slot></slot>';
	    }
	    if (options.template) {
	      options._content = extractContent(el);
	      el = transcludeTemplate(el, options);
	    }
	  }
	  if (isFragment(el)) {
	    // anchors for fragment instance
	    // passing in `persist: true` to avoid them being
	    // discarded by IE during template cloning
	    prepend(createAnchor('v-start', true), el);
	    el.appendChild(createAnchor('v-end', true));
	  }
	  return el;
	}
	
	/**
	 * Process the template option.
	 * If the replace option is true this will swap the $el.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Element|DocumentFragment}
	 */
	
	function transcludeTemplate(el, options) {
	  var template = options.template;
	  var frag = parseTemplate(template, true);
	  if (frag) {
	    var replacer = frag.firstChild;
	    var tag = replacer.tagName && replacer.tagName.toLowerCase();
	    if (options.replace) {
	      /* istanbul ignore if */
	      if (el === document.body) {
	        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');
	      }
	      // there are many cases where the instance must
	      // become a fragment instance: basically anything that
	      // can create more than 1 root nodes.
	      if (
	      // multi-children template
	      frag.childNodes.length > 1 ||
	      // non-element template
	      replacer.nodeType !== 1 ||
	      // single nested component
	      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||
	      // element directive
	      resolveAsset(options, 'elementDirectives', tag) ||
	      // for block
	      replacer.hasAttribute('v-for') ||
	      // if block
	      replacer.hasAttribute('v-if')) {
	        return frag;
	      } else {
	        options._replacerAttrs = extractAttrs(replacer);
	        mergeAttrs(el, replacer);
	        return replacer;
	      }
	    } else {
	      el.appendChild(frag);
	      return el;
	    }
	  } else {
	    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);
	  }
	}
	
	/**
	 * Helper to extract a component container's attributes
	 * into a plain object array.
	 *
	 * @param {Element} el
	 * @return {Array}
	 */
	
	function extractAttrs(el) {
	  if (el.nodeType === 1 && el.hasAttributes()) {
	    return toArray(el.attributes);
	  }
	}
	
	/**
	 * Merge the attributes of two elements, and make sure
	 * the class names are merged properly.
	 *
	 * @param {Element} from
	 * @param {Element} to
	 */
	
	function mergeAttrs(from, to) {
	  var attrs = from.attributes;
	  var i = attrs.length;
	  var name, value;
	  while (i--) {
	    name = attrs[i].name;
	    value = attrs[i].value;
	    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {
	      to.setAttribute(name, value);
	    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {
	      value.split(/\s+/).forEach(function (cls) {
	        addClass(to, cls);
	      });
	    }
	  }
	}
	
	/**
	 * Scan and determine slot content distribution.
	 * We do this during transclusion instead at compile time so that
	 * the distribution is decoupled from the compilation order of
	 * the slots.
	 *
	 * @param {Element|DocumentFragment} template
	 * @param {Element} content
	 * @param {Vue} vm
	 */
	
	function resolveSlots(vm, content) {
	  if (!content) {
	    return;
	  }
	  var contents = vm._slotContents = Object.create(null);
	  var el, name;
	  for (var i = 0, l = content.children.length; i < l; i++) {
	    el = content.children[i];
	    /* eslint-disable no-cond-assign */
	    if (name = el.getAttribute('slot')) {
	      (contents[name] || (contents[name] = [])).push(el);
	    }
	    /* eslint-enable no-cond-assign */
	    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {
	      warn('The "slot" attribute must be static.', vm.$parent);
	    }
	  }
	  for (name in contents) {
	    contents[name] = extractFragment(contents[name], content);
	  }
	  if (content.hasChildNodes()) {
	    var nodes = content.childNodes;
	    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {
	      return;
	    }
	    contents['default'] = extractFragment(content.childNodes, content);
	  }
	}
	
	/**
	 * Extract qualified content nodes from a node list.
	 *
	 * @param {NodeList} nodes
	 * @return {DocumentFragment}
	 */
	
	function extractFragment(nodes, parent) {
	  var frag = document.createDocumentFragment();
	  nodes = toArray(nodes);
	  for (var i = 0, l = nodes.length; i < l; i++) {
	    var node = nodes[i];
	    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {
	      parent.removeChild(node);
	      node = parseTemplate(node, true);
	    }
	    frag.appendChild(node);
	  }
	  return frag;
	}
	
	
	
	var compiler = Object.freeze({
		compile: compile,
		compileAndLinkProps: compileAndLinkProps,
		compileRoot: compileRoot,
		transclude: transclude,
		resolveSlots: resolveSlots
	});
	
	function stateMixin (Vue) {
	  /**
	   * Accessor for `$data` property, since setting $data
	   * requires observing the new object and updating
	   * proxied properties.
	   */
	
	  Object.defineProperty(Vue.prototype, '$data', {
	    get: function get() {
	      return this._data;
	    },
	    set: function set(newData) {
	      if (newData !== this._data) {
	        this._setData(newData);
	      }
	    }
	  });
	
	  /**
	   * Setup the scope of an instance, which contains:
	   * - observed data
	   * - computed properties
	   * - user methods
	   * - meta properties
	   */
	
	  Vue.prototype._initState = function () {
	    this._initProps();
	    this._initMeta();
	    this._initMethods();
	    this._initData();
	    this._initComputed();
	  };
	
	  /**
	   * Initialize props.
	   */
	
	  Vue.prototype._initProps = function () {
	    var options = this.$options;
	    var el = options.el;
	    var props = options.props;
	    if (props && !el) {
	      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);
	    }
	    // make sure to convert string selectors into element now
	    el = options.el = query(el);
	    this._propsUnlinkFn = el && el.nodeType === 1 && props
	    // props must be linked in proper scope if inside v-for
	    ? compileAndLinkProps(this, el, props, this._scope) : null;
	  };
	
	  /**
	   * Initialize the data.
	   */
	
	  Vue.prototype._initData = function () {
	    var dataFn = this.$options.data;
	    var data = this._data = dataFn ? dataFn() : {};
	    if (!isPlainObject(data)) {
	      data = {};
	      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);
	    }
	    var props = this._props;
	    // proxy data on instance
	    var keys = Object.keys(data);
	    var i, key;
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      // there are two scenarios where we can proxy a data key:
	      // 1. it's not already defined as a prop
	      // 2. it's provided via a instantiation option AND there are no
	      //    template prop present
	      if (!props || !hasOwn(props, key)) {
	        this._proxy(key);
	      } else if (process.env.NODE_ENV !== 'production') {
	        warn('Data field "' + key + '" is already defined ' + 'as a prop. To provide default value for a prop, use the "default" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the "propsData" option.', this);
	      }
	    }
	    // observe data
	    observe(data, this);
	  };
	
	  /**
	   * Swap the instance's $data. Called in $data's setter.
	   *
	   * @param {Object} newData
	   */
	
	  Vue.prototype._setData = function (newData) {
	    newData = newData || {};
	    var oldData = this._data;
	    this._data = newData;
	    var keys, key, i;
	    // unproxy keys not present in new data
	    keys = Object.keys(oldData);
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      if (!(key in newData)) {
	        this._unproxy(key);
	      }
	    }
	    // proxy keys not already proxied,
	    // and trigger change for changed values
	    keys = Object.keys(newData);
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      if (!hasOwn(this, key)) {
	        // new property
	        this._proxy(key);
	      }
	    }
	    oldData.__ob__.removeVm(this);
	    observe(newData, this);
	    this._digest();
	  };
	
	  /**
	   * Proxy a property, so that
	   * vm.prop === vm._data.prop
	   *
	   * @param {String} key
	   */
	
	  Vue.prototype._proxy = function (key) {
	    if (!isReserved(key)) {
	      // need to store ref to self here
	      // because these getter/setters might
	      // be called by child scopes via
	      // prototype inheritance.
	      var self = this;
	      Object.defineProperty(self, key, {
	        configurable: true,
	        enumerable: true,
	        get: function proxyGetter() {
	          return self._data[key];
	        },
	        set: function proxySetter(val) {
	          self._data[key] = val;
	        }
	      });
	    }
	  };
	
	  /**
	   * Unproxy a property.
	   *
	   * @param {String} key
	   */
	
	  Vue.prototype._unproxy = function (key) {
	    if (!isReserved(key)) {
	      delete this[key];
	    }
	  };
	
	  /**
	   * Force update on every watcher in scope.
	   */
	
	  Vue.prototype._digest = function () {
	    for (var i = 0, l = this._watchers.length; i < l; i++) {
	      this._watchers[i].update(true); // shallow updates
	    }
	  };
	
	  /**
	   * Setup computed properties. They are essentially
	   * special getter/setters
	   */
	
	  function noop() {}
	  Vue.prototype._initComputed = function () {
	    var computed = this.$options.computed;
	    if (computed) {
	      for (var key in computed) {
	        var userDef = computed[key];
	        var def = {
	          enumerable: true,
	          configurable: true
	        };
	        if (typeof userDef === 'function') {
	          def.get = makeComputedGetter(userDef, this);
	          def.set = noop;
	        } else {
	          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;
	          def.set = userDef.set ? bind(userDef.set, this) : noop;
	        }
	        Object.defineProperty(this, key, def);
	      }
	    }
	  };
	
	  function makeComputedGetter(getter, owner) {
	    var watcher = new Watcher(owner, getter, null, {
	      lazy: true
	    });
	    return function computedGetter() {
	      if (watcher.dirty) {
	        watcher.evaluate();
	      }
	      if (Dep.target) {
	        watcher.depend();
	      }
	      return watcher.value;
	    };
	  }
	
	  /**
	   * Setup instance methods. Methods must be bound to the
	   * instance since they might be passed down as a prop to
	   * child components.
	   */
	
	  Vue.prototype._initMethods = function () {
	    var methods = this.$options.methods;
	    if (methods) {
	      for (var key in methods) {
	        this[key] = bind(methods[key], this);
	      }
	    }
	  };
	
	  /**
	   * Initialize meta information like $index, $key & $value.
	   */
	
	  Vue.prototype._initMeta = function () {
	    var metas = this.$options._meta;
	    if (metas) {
	      for (var key in metas) {
	        defineReactive(this, key, metas[key]);
	      }
	    }
	  };
	}
	
	var eventRE = /^v-on:|^@/;
	
	function eventsMixin (Vue) {
	  /**
	   * Setup the instance's option events & watchers.
	   * If the value is a string, we pull it from the
	   * instance's methods by name.
	   */
	
	  Vue.prototype._initEvents = function () {
	    var options = this.$options;
	    if (options._asComponent) {
	      registerComponentEvents(this, options.el);
	    }
	    registerCallbacks(this, '$on', options.events);
	    registerCallbacks(this, '$watch', options.watch);
	  };
	
	  /**
	   * Register v-on events on a child component
	   *
	   * @param {Vue} vm
	   * @param {Element} el
	   */
	
	  function registerComponentEvents(vm, el) {
	    var attrs = el.attributes;
	    var name, value, handler;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      name = attrs[i].name;
	      if (eventRE.test(name)) {
	        name = name.replace(eventRE, '');
	        // force the expression into a statement so that
	        // it always dynamically resolves the method to call (#2670)
	        // kinda ugly hack, but does the job.
	        value = attrs[i].value;
	        if (isSimplePath(value)) {
	          value += '.apply(this, $arguments)';
	        }
	        handler = (vm._scope || vm._context).$eval(value, true);
	        handler._fromParent = true;
	        vm.$on(name.replace(eventRE), handler);
	      }
	    }
	  }
	
	  /**
	   * Register callbacks for option events and watchers.
	   *
	   * @param {Vue} vm
	   * @param {String} action
	   * @param {Object} hash
	   */
	
	  function registerCallbacks(vm, action, hash) {
	    if (!hash) return;
	    var handlers, key, i, j;
	    for (key in hash) {
	      handlers = hash[key];
	      if (isArray(handlers)) {
	        for (i = 0, j = handlers.length; i < j; i++) {
	          register(vm, action, key, handlers[i]);
	        }
	      } else {
	        register(vm, action, key, handlers);
	      }
	    }
	  }
	
	  /**
	   * Helper to register an event/watch callback.
	   *
	   * @param {Vue} vm
	   * @param {String} action
	   * @param {String} key
	   * @param {Function|String|Object} handler
	   * @param {Object} [options]
	   */
	
	  function register(vm, action, key, handler, options) {
	    var type = typeof handler;
	    if (type === 'function') {
	      vm[action](key, handler, options);
	    } else if (type === 'string') {
	      var methods = vm.$options.methods;
	      var method = methods && methods[handler];
	      if (method) {
	        vm[action](key, method, options);
	      } else {
	        process.env.NODE_ENV !== 'production' && warn('Unknown method: "' + handler + '" when ' + 'registering callback for ' + action + ': "' + key + '".', vm);
	      }
	    } else if (handler && type === 'object') {
	      register(vm, action, key, handler.handler, handler);
	    }
	  }
	
	  /**
	   * Setup recursive attached/detached calls
	   */
	
	  Vue.prototype._initDOMHooks = function () {
	    this.$on('hook:attached', onAttached);
	    this.$on('hook:detached', onDetached);
	  };
	
	  /**
	   * Callback to recursively call attached hook on children
	   */
	
	  function onAttached() {
	    if (!this._isAttached) {
	      this._isAttached = true;
	      this.$children.forEach(callAttach);
	    }
	  }
	
	  /**
	   * Iterator to call attached hook
	   *
	   * @param {Vue} child
	   */
	
	  function callAttach(child) {
	    if (!child._isAttached && inDoc(child.$el)) {
	      child._callHook('attached');
	    }
	  }
	
	  /**
	   * Callback to recursively call detached hook on children
	   */
	
	  function onDetached() {
	    if (this._isAttached) {
	      this._isAttached = false;
	      this.$children.forEach(callDetach);
	    }
	  }
	
	  /**
	   * Iterator to call detached hook
	   *
	   * @param {Vue} child
	   */
	
	  function callDetach(child) {
	    if (child._isAttached && !inDoc(child.$el)) {
	      child._callHook('detached');
	    }
	  }
	
	  /**
	   * Trigger all handlers for a hook
	   *
	   * @param {String} hook
	   */
	
	  Vue.prototype._callHook = function (hook) {
	    this.$emit('pre-hook:' + hook);
	    var handlers = this.$options[hook];
	    if (handlers) {
	      for (var i = 0, j = handlers.length; i < j; i++) {
	        handlers[i].call(this);
	      }
	    }
	    this.$emit('hook:' + hook);
	  };
	}
	
	function noop$1() {}
	
	/**
	 * A directive links a DOM element with a piece of data,
	 * which is the result of evaluating an expression.
	 * It registers a watcher with the expression and calls
	 * the DOM update function when a change is triggered.
	 *
	 * @param {Object} descriptor
	 *                 - {String} name
	 *                 - {Object} def
	 *                 - {String} expression
	 *                 - {Array<Object>} [filters]
	 *                 - {Object} [modifiers]
	 *                 - {Boolean} literal
	 *                 - {String} attr
	 *                 - {String} arg
	 *                 - {String} raw
	 *                 - {String} [ref]
	 *                 - {Array<Object>} [interp]
	 *                 - {Boolean} [hasOneTime]
	 * @param {Vue} vm
	 * @param {Node} el
	 * @param {Vue} [host] - transclusion host component
	 * @param {Object} [scope] - v-for scope
	 * @param {Fragment} [frag] - owner fragment
	 * @constructor
	 */
	function Directive(descriptor, vm, el, host, scope, frag) {
	  this.vm = vm;
	  this.el = el;
	  // copy descriptor properties
	  this.descriptor = descriptor;
	  this.name = descriptor.name;
	  this.expression = descriptor.expression;
	  this.arg = descriptor.arg;
	  this.modifiers = descriptor.modifiers;
	  this.filters = descriptor.filters;
	  this.literal = this.modifiers && this.modifiers.literal;
	  // private
	  this._locked = false;
	  this._bound = false;
	  this._listeners = null;
	  // link context
	  this._host = host;
	  this._scope = scope;
	  this._frag = frag;
	  // store directives on node in dev mode
	  if (process.env.NODE_ENV !== 'production' && this.el) {
	    this.el._vue_directives = this.el._vue_directives || [];
	    this.el._vue_directives.push(this);
	  }
	}
	
	/**
	 * Initialize the directive, mixin definition properties,
	 * setup the watcher, call definition bind() and update()
	 * if present.
	 */
	
	Directive.prototype._bind = function () {
	  var name = this.name;
	  var descriptor = this.descriptor;
	
	  // remove attribute
	  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {
	    var attr = descriptor.attr || 'v-' + name;
	    this.el.removeAttribute(attr);
	  }
	
	  // copy def properties
	  var def = descriptor.def;
	  if (typeof def === 'function') {
	    this.update = def;
	  } else {
	    extend(this, def);
	  }
	
	  // setup directive params
	  this._setupParams();
	
	  // initial bind
	  if (this.bind) {
	    this.bind();
	  }
	  this._bound = true;
	
	  if (this.literal) {
	    this.update && this.update(descriptor.raw);
	  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {
	    // wrapped updater for context
	    var dir = this;
	    if (this.update) {
	      this._update = function (val, oldVal) {
	        if (!dir._locked) {
	          dir.update(val, oldVal);
	        }
	      };
	    } else {
	      this._update = noop$1;
	    }
	    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;
	    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;
	    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback
	    {
	      filters: this.filters,
	      twoWay: this.twoWay,
	      deep: this.deep,
	      preProcess: preProcess,
	      postProcess: postProcess,
	      scope: this._scope
	    });
	    // v-model with inital inline value need to sync back to
	    // model instead of update to DOM on init. They would
	    // set the afterBind hook to indicate that.
	    if (this.afterBind) {
	      this.afterBind();
	    } else if (this.update) {
	      this.update(watcher.value);
	    }
	  }
	};
	
	/**
	 * Setup all param attributes, e.g. track-by,
	 * transition-mode, etc...
	 */
	
	Directive.prototype._setupParams = function () {
	  if (!this.params) {
	    return;
	  }
	  var params = this.params;
	  // swap the params array with a fresh object.
	  this.params = Object.create(null);
	  var i = params.length;
	  var key, val, mappedKey;
	  while (i--) {
	    key = hyphenate(params[i]);
	    mappedKey = camelize(key);
	    val = getBindAttr(this.el, key);
	    if (val != null) {
	      // dynamic
	      this._setupParamWatcher(mappedKey, val);
	    } else {
	      // static
	      val = getAttr(this.el, key);
	      if (val != null) {
	        this.params[mappedKey] = val === '' ? true : val;
	      }
	    }
	  }
	};
	
	/**
	 * Setup a watcher for a dynamic param.
	 *
	 * @param {String} key
	 * @param {String} expression
	 */
	
	Directive.prototype._setupParamWatcher = function (key, expression) {
	  var self = this;
	  var called = false;
	  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {
	    self.params[key] = val;
	    // since we are in immediate mode,
	    // only call the param change callbacks if this is not the first update.
	    if (called) {
	      var cb = self.paramWatchers && self.paramWatchers[key];
	      if (cb) {
	        cb.call(self, val, oldVal);
	      }
	    } else {
	      called = true;
	    }
	  }, {
	    immediate: true,
	    user: false
	  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);
	};
	
	/**
	 * Check if the directive is a function caller
	 * and if the expression is a callable one. If both true,
	 * we wrap up the expression and use it as the event
	 * handler.
	 *
	 * e.g. on-click="a++"
	 *
	 * @return {Boolean}
	 */
	
	Directive.prototype._checkStatement = function () {
	  var expression = this.expression;
	  if (expression && this.acceptStatement && !isSimplePath(expression)) {
	    var fn = parseExpression(expression).get;
	    var scope = this._scope || this.vm;
	    var handler = function handler(e) {
	      scope.$event = e;
	      fn.call(scope, scope);
	      scope.$event = null;
	    };
	    if (this.filters) {
	      handler = scope._applyFilters(handler, null, this.filters);
	    }
	    this.update(handler);
	    return true;
	  }
	};
	
	/**
	 * Set the corresponding value with the setter.
	 * This should only be used in two-way directives
	 * e.g. v-model.
	 *
	 * @param {*} value
	 * @public
	 */
	
	Directive.prototype.set = function (value) {
	  /* istanbul ignore else */
	  if (this.twoWay) {
	    this._withLock(function () {
	      this._watcher.set(value);
	    });
	  } else if (process.env.NODE_ENV !== 'production') {
	    warn('Directive.set() can only be used inside twoWay' + 'directives.');
	  }
	};
	
	/**
	 * Execute a function while preventing that function from
	 * triggering updates on this directive instance.
	 *
	 * @param {Function} fn
	 */
	
	Directive.prototype._withLock = function (fn) {
	  var self = this;
	  self._locked = true;
	  fn.call(self);
	  nextTick(function () {
	    self._locked = false;
	  });
	};
	
	/**
	 * Convenience method that attaches a DOM event listener
	 * to the directive element and autometically tears it down
	 * during unbind.
	 *
	 * @param {String} event
	 * @param {Function} handler
	 * @param {Boolean} [useCapture]
	 */
	
	Directive.prototype.on = function (event, handler, useCapture) {
	  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);
	};
	
	/**
	 * Teardown the watcher and call unbind.
	 */
	
	Directive.prototype._teardown = function () {
	  if (this._bound) {
	    this._bound = false;
	    if (this.unbind) {
	      this.unbind();
	    }
	    if (this._watcher) {
	      this._watcher.teardown();
	    }
	    var listeners = this._listeners;
	    var i;
	    if (listeners) {
	      i = listeners.length;
	      while (i--) {
	        off(this.el, listeners[i][0], listeners[i][1]);
	      }
	    }
	    var unwatchFns = this._paramUnwatchFns;
	    if (unwatchFns) {
	      i = unwatchFns.length;
	      while (i--) {
	        unwatchFns[i]();
	      }
	    }
	    if (process.env.NODE_ENV !== 'production' && this.el) {
	      this.el._vue_directives.$remove(this);
	    }
	    this.vm = this.el = this._watcher = this._listeners = null;
	  }
	};
	
	function lifecycleMixin (Vue) {
	  /**
	   * Update v-ref for component.
	   *
	   * @param {Boolean} remove
	   */
	
	  Vue.prototype._updateRef = function (remove) {
	    var ref = this.$options._ref;
	    if (ref) {
	      var refs = (this._scope || this._context).$refs;
	      if (remove) {
	        if (refs[ref] === this) {
	          refs[ref] = null;
	        }
	      } else {
	        refs[ref] = this;
	      }
	    }
	  };
	
	  /**
	   * Transclude, compile and link element.
	   *
	   * If a pre-compiled linker is available, that means the
	   * passed in element will be pre-transcluded and compiled
	   * as well - all we need to do is to call the linker.
	   *
	   * Otherwise we need to call transclude/compile/link here.
	   *
	   * @param {Element} el
	   */
	
	  Vue.prototype._compile = function (el) {
	    var options = this.$options;
	
	    // transclude and init element
	    // transclude can potentially replace original
	    // so we need to keep reference; this step also injects
	    // the template and caches the original attributes
	    // on the container node and replacer node.
	    var original = el;
	    el = transclude(el, options);
	    this._initElement(el);
	
	    // handle v-pre on root node (#2026)
	    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {
	      return;
	    }
	
	    // root is always compiled per-instance, because
	    // container attrs and props can be different every time.
	    var contextOptions = this._context && this._context.$options;
	    var rootLinker = compileRoot(el, options, contextOptions);
	
	    // resolve slot distribution
	    resolveSlots(this, options._content);
	
	    // compile and link the rest
	    var contentLinkFn;
	    var ctor = this.constructor;
	    // component compilation can be cached
	    // as long as it's not using inline-template
	    if (options._linkerCachable) {
	      contentLinkFn = ctor.linker;
	      if (!contentLinkFn) {
	        contentLinkFn = ctor.linker = compile(el, options);
	      }
	    }
	
	    // link phase
	    // make sure to link root with prop scope!
	    var rootUnlinkFn = rootLinker(this, el, this._scope);
	    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);
	
	    // register composite unlink function
	    // to be called during instance destruction
	    this._unlinkFn = function () {
	      rootUnlinkFn();
	      // passing destroying: true to avoid searching and
	      // splicing the directives
	      contentUnlinkFn(true);
	    };
	
	    // finally replace original
	    if (options.replace) {
	      replace(original, el);
	    }
	
	    this._isCompiled = true;
	    this._callHook('compiled');
	  };
	
	  /**
	   * Initialize instance element. Called in the public
	   * $mount() method.
	   *
	   * @param {Element} el
	   */
	
	  Vue.prototype._initElement = function (el) {
	    if (isFragment(el)) {
	      this._isFragment = true;
	      this.$el = this._fragmentStart = el.firstChild;
	      this._fragmentEnd = el.lastChild;
	      // set persisted text anchors to empty
	      if (this._fragmentStart.nodeType === 3) {
	        this._fragmentStart.data = this._fragmentEnd.data = '';
	      }
	      this._fragment = el;
	    } else {
	      this.$el = el;
	    }
	    this.$el.__vue__ = this;
	    this._callHook('beforeCompile');
	  };
	
	  /**
	   * Create and bind a directive to an element.
	   *
	   * @param {Object} descriptor - parsed directive descriptor
	   * @param {Node} node   - target node
	   * @param {Vue} [host] - transclusion host component
	   * @param {Object} [scope] - v-for scope
	   * @param {Fragment} [frag] - owner fragment
	   */
	
	  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {
	    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));
	  };
	
	  /**
	   * Teardown an instance, unobserves the data, unbind all the
	   * directives, turn off all the event listeners, etc.
	   *
	   * @param {Boolean} remove - whether to remove the DOM node.
	   * @param {Boolean} deferCleanup - if true, defer cleanup to
	   *                                 be called later
	   */
	
	  Vue.prototype._destroy = function (remove, deferCleanup) {
	    if (this._isBeingDestroyed) {
	      if (!deferCleanup) {
	        this._cleanup();
	      }
	      return;
	    }
	
	    var destroyReady;
	    var pendingRemoval;
	
	    var self = this;
	    // Cleanup should be called either synchronously or asynchronoysly as
	    // callback of this.$remove(), or if remove and deferCleanup are false.
	    // In any case it should be called after all other removing, unbinding and
	    // turning of is done
	    var cleanupIfPossible = function cleanupIfPossible() {
	      if (destroyReady && !pendingRemoval && !deferCleanup) {
	        self._cleanup();
	      }
	    };
	
	    // remove DOM element
	    if (remove && this.$el) {
	      pendingRemoval = true;
	      this.$remove(function () {
	        pendingRemoval = false;
	        cleanupIfPossible();
	      });
	    }
	
	    this._callHook('beforeDestroy');
	    this._isBeingDestroyed = true;
	    var i;
	    // remove self from parent. only necessary
	    // if parent is not being destroyed as well.
	    var parent = this.$parent;
	    if (parent && !parent._isBeingDestroyed) {
	      parent.$children.$remove(this);
	      // unregister ref (remove: true)
	      this._updateRef(true);
	    }
	    // destroy all children.
	    i = this.$children.length;
	    while (i--) {
	      this.$children[i].$destroy();
	    }
	    // teardown props
	    if (this._propsUnlinkFn) {
	      this._propsUnlinkFn();
	    }
	    // teardown all directives. this also tearsdown all
	    // directive-owned watchers.
	    if (this._unlinkFn) {
	      this._unlinkFn();
	    }
	    i = this._watchers.length;
	    while (i--) {
	      this._watchers[i].teardown();
	    }
	    // remove reference to self on $el
	    if (this.$el) {
	      this.$el.__vue__ = null;
	    }
	
	    destroyReady = true;
	    cleanupIfPossible();
	  };
	
	  /**
	   * Clean up to ensure garbage collection.
	   * This is called after the leave transition if there
	   * is any.
	   */
	
	  Vue.prototype._cleanup = function () {
	    if (this._isDestroyed) {
	      return;
	    }
	    // remove self from owner fragment
	    // do it in cleanup so that we can call $destroy with
	    // defer right when a fragment is about to be removed.
	    if (this._frag) {
	      this._frag.children.$remove(this);
	    }
	    // remove reference from data ob
	    // frozen object may not have observer.
	    if (this._data && this._data.__ob__) {
	      this._data.__ob__.removeVm(this);
	    }
	    // Clean up references to private properties and other
	    // instances. preserve reference to _data so that proxy
	    // accessors still work. The only potential side effect
	    // here is that mutating the instance after it's destroyed
	    // may affect the state of other components that are still
	    // observing the same object, but that seems to be a
	    // reasonable responsibility for the user rather than
	    // always throwing an error on them.
	    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;
	    // call the last hook...
	    this._isDestroyed = true;
	    this._callHook('destroyed');
	    // turn off all instance listeners.
	    this.$off();
	  };
	}
	
	function miscMixin (Vue) {
	  /**
	   * Apply a list of filter (descriptors) to a value.
	   * Using plain for loops here because this will be called in
	   * the getter of any watcher with filters so it is very
	   * performance sensitive.
	   *
	   * @param {*} value
	   * @param {*} [oldValue]
	   * @param {Array} filters
	   * @param {Boolean} write
	   * @return {*}
	   */
	
	  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {
	    var filter, fn, args, arg, offset, i, l, j, k;
	    for (i = 0, l = filters.length; i < l; i++) {
	      filter = filters[write ? l - i - 1 : i];
	      fn = resolveAsset(this.$options, 'filters', filter.name, true);
	      if (!fn) continue;
	      fn = write ? fn.write : fn.read || fn;
	      if (typeof fn !== 'function') continue;
	      args = write ? [value, oldValue] : [value];
	      offset = write ? 2 : 1;
	      if (filter.args) {
	        for (j = 0, k = filter.args.length; j < k; j++) {
	          arg = filter.args[j];
	          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;
	        }
	      }
	      value = fn.apply(this, args);
	    }
	    return value;
	  };
	
	  /**
	   * Resolve a component, depending on whether the component
	   * is defined normally or using an async factory function.
	   * Resolves synchronously if already resolved, otherwise
	   * resolves asynchronously and caches the resolved
	   * constructor on the factory.
	   *
	   * @param {String|Function} value
	   * @param {Function} cb
	   */
	
	  Vue.prototype._resolveComponent = function (value, cb) {
	    var factory;
	    if (typeof value === 'function') {
	      factory = value;
	    } else {
	      factory = resolveAsset(this.$options, 'components', value, true);
	    }
	    /* istanbul ignore if */
	    if (!factory) {
	      return;
	    }
	    // async component factory
	    if (!factory.options) {
	      if (factory.resolved) {
	        // cached
	        cb(factory.resolved);
	      } else if (factory.requested) {
	        // pool callbacks
	        factory.pendingCallbacks.push(cb);
	      } else {
	        factory.requested = true;
	        var cbs = factory.pendingCallbacks = [cb];
	        factory.call(this, function resolve(res) {
	          if (isPlainObject(res)) {
	            res = Vue.extend(res);
	          }
	          // cache resolved
	          factory.resolved = res;
	          // invoke callbacks
	          for (var i = 0, l = cbs.length; i < l; i++) {
	            cbs[i](res);
	          }
	        }, function reject(reason) {
	          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\nReason: ' + reason : ''));
	        });
	      }
	    } else {
	      // normal component
	      cb(factory);
	    }
	  };
	}
	
	var filterRE$1 = /[^|]\|[^|]/;
	
	function dataAPI (Vue) {
	  /**
	   * Get the value from an expression on this vm.
	   *
	   * @param {String} exp
	   * @param {Boolean} [asStatement]
	   * @return {*}
	   */
	
	  Vue.prototype.$get = function (exp, asStatement) {
	    var res = parseExpression(exp);
	    if (res) {
	      if (asStatement) {
	        var self = this;
	        return function statementHandler() {
	          self.$arguments = toArray(arguments);
	          var result = res.get.call(self, self);
	          self.$arguments = null;
	          return result;
	        };
	      } else {
	        try {
	          return res.get.call(this, this);
	        } catch (e) {}
	      }
	    }
	  };
	
	  /**
	   * Set the value from an expression on this vm.
	   * The expression must be a valid left-hand
	   * expression in an assignment.
	   *
	   * @param {String} exp
	   * @param {*} val
	   */
	
	  Vue.prototype.$set = function (exp, val) {
	    var res = parseExpression(exp, true);
	    if (res && res.set) {
	      res.set.call(this, this, val);
	    }
	  };
	
	  /**
	   * Delete a property on the VM
	   *
	   * @param {String} key
	   */
	
	  Vue.prototype.$delete = function (key) {
	    del(this._data, key);
	  };
	
	  /**
	   * Watch an expression, trigger callback when its
	   * value changes.
	   *
	   * @param {String|Function} expOrFn
	   * @param {Function} cb
	   * @param {Object} [options]
	   *                 - {Boolean} deep
	   *                 - {Boolean} immediate
	   * @return {Function} - unwatchFn
	   */
	
	  Vue.prototype.$watch = function (expOrFn, cb, options) {
	    var vm = this;
	    var parsed;
	    if (typeof expOrFn === 'string') {
	      parsed = parseDirective(expOrFn);
	      expOrFn = parsed.expression;
	    }
	    var watcher = new Watcher(vm, expOrFn, cb, {
	      deep: options && options.deep,
	      sync: options && options.sync,
	      filters: parsed && parsed.filters,
	      user: !options || options.user !== false
	    });
	    if (options && options.immediate) {
	      cb.call(vm, watcher.value);
	    }
	    return function unwatchFn() {
	      watcher.teardown();
	    };
	  };
	
	  /**
	   * Evaluate a text directive, including filters.
	   *
	   * @param {String} text
	   * @param {Boolean} [asStatement]
	   * @return {String}
	   */
	
	  Vue.prototype.$eval = function (text, asStatement) {
	    // check for filters.
	    if (filterRE$1.test(text)) {
	      var dir = parseDirective(text);
	      // the filter regex check might give false positive
	      // for pipes inside strings, so it's possible that
	      // we don't get any filters here
	      var val = this.$get(dir.expression, asStatement);
	      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;
	    } else {
	      // no filter
	      return this.$get(text, asStatement);
	    }
	  };
	
	  /**
	   * Interpolate a piece of template text.
	   *
	   * @param {String} text
	   * @return {String}
	   */
	
	  Vue.prototype.$interpolate = function (text) {
	    var tokens = parseText(text);
	    var vm = this;
	    if (tokens) {
	      if (tokens.length === 1) {
	        return vm.$eval(tokens[0].value) + '';
	      } else {
	        return tokens.map(function (token) {
	          return token.tag ? vm.$eval(token.value) : token.value;
	        }).join('');
	      }
	    } else {
	      return text;
	    }
	  };
	
	  /**
	   * Log instance data as a plain JS object
	   * so that it is easier to inspect in console.
	   * This method assumes console is available.
	   *
	   * @param {String} [path]
	   */
	
	  Vue.prototype.$log = function (path) {
	    var data = path ? getPath(this._data, path) : this._data;
	    if (data) {
	      data = clean(data);
	    }
	    // include computed fields
	    if (!path) {
	      var key;
	      for (key in this.$options.computed) {
	        data[key] = clean(this[key]);
	      }
	      if (this._props) {
	        for (key in this._props) {
	          data[key] = clean(this[key]);
	        }
	      }
	    }
	    console.log(data);
	  };
	
	  /**
	   * "clean" a getter/setter converted object into a plain
	   * object copy.
	   *
	   * @param {Object} - obj
	   * @return {Object}
	   */
	
	  function clean(obj) {
	    return JSON.parse(JSON.stringify(obj));
	  }
	}
	
	function domAPI (Vue) {
	  /**
	   * Convenience on-instance nextTick. The callback is
	   * auto-bound to the instance, and this avoids component
	   * modules having to rely on the global Vue.
	   *
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$nextTick = function (fn) {
	    nextTick(fn, this);
	  };
	
	  /**
	   * Append instance to target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$appendTo = function (target, cb, withTransition) {
	    return insert(this, target, cb, withTransition, append, appendWithTransition);
	  };
	
	  /**
	   * Prepend instance to target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$prependTo = function (target, cb, withTransition) {
	    target = query(target);
	    if (target.hasChildNodes()) {
	      this.$before(target.firstChild, cb, withTransition);
	    } else {
	      this.$appendTo(target, cb, withTransition);
	    }
	    return this;
	  };
	
	  /**
	   * Insert instance before target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$before = function (target, cb, withTransition) {
	    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);
	  };
	
	  /**
	   * Insert instance after target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$after = function (target, cb, withTransition) {
	    target = query(target);
	    if (target.nextSibling) {
	      this.$before(target.nextSibling, cb, withTransition);
	    } else {
	      this.$appendTo(target.parentNode, cb, withTransition);
	    }
	    return this;
	  };
	
	  /**
	   * Remove instance from DOM
	   *
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$remove = function (cb, withTransition) {
	    if (!this.$el.parentNode) {
	      return cb && cb();
	    }
	    var inDocument = this._isAttached && inDoc(this.$el);
	    // if we are not in document, no need to check
	    // for transitions
	    if (!inDocument) withTransition = false;
	    var self = this;
	    var realCb = function realCb() {
	      if (inDocument) self._callHook('detached');
	      if (cb) cb();
	    };
	    if (this._isFragment) {
	      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);
	    } else {
	      var op = withTransition === false ? removeWithCb : removeWithTransition;
	      op(this.$el, this, realCb);
	    }
	    return this;
	  };
	
	  /**
	   * Shared DOM insertion function.
	   *
	   * @param {Vue} vm
	   * @param {Element} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition]
	   * @param {Function} op1 - op for non-transition insert
	   * @param {Function} op2 - op for transition insert
	   * @return vm
	   */
	
	  function insert(vm, target, cb, withTransition, op1, op2) {
	    target = query(target);
	    var targetIsDetached = !inDoc(target);
	    var op = withTransition === false || targetIsDetached ? op1 : op2;
	    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);
	    if (vm._isFragment) {
	      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {
	        op(node, target, vm);
	      });
	      cb && cb();
	    } else {
	      op(vm.$el, target, vm, cb);
	    }
	    if (shouldCallHook) {
	      vm._callHook('attached');
	    }
	    return vm;
	  }
	
	  /**
	   * Check for selectors
	   *
	   * @param {String|Element} el
	   */
	
	  function query(el) {
	    return typeof el === 'string' ? document.querySelector(el) : el;
	  }
	
	  /**
	   * Append operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Node} target
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */
	
	  function append(el, target, vm, cb) {
	    target.appendChild(el);
	    if (cb) cb();
	  }
	
	  /**
	   * InsertBefore operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Node} target
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */
	
	  function beforeWithCb(el, target, vm, cb) {
	    before(el, target);
	    if (cb) cb();
	  }
	
	  /**
	   * Remove operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */
	
	  function removeWithCb(el, vm, cb) {
	    remove(el);
	    if (cb) cb();
	  }
	}
	
	function eventsAPI (Vue) {
	  /**
	   * Listen on the given `event` with `fn`.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$on = function (event, fn) {
	    (this._events[event] || (this._events[event] = [])).push(fn);
	    modifyListenerCount(this, event, 1);
	    return this;
	  };
	
	  /**
	   * Adds an `event` listener that will be invoked a single
	   * time then automatically removed.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$once = function (event, fn) {
	    var self = this;
	    function on() {
	      self.$off(event, on);
	      fn.apply(this, arguments);
	    }
	    on.fn = fn;
	    this.$on(event, on);
	    return this;
	  };
	
	  /**
	   * Remove the given callback for `event` or all
	   * registered callbacks.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$off = function (event, fn) {
	    var cbs;
	    // all
	    if (!arguments.length) {
	      if (this.$parent) {
	        for (event in this._events) {
	          cbs = this._events[event];
	          if (cbs) {
	            modifyListenerCount(this, event, -cbs.length);
	          }
	        }
	      }
	      this._events = {};
	      return this;
	    }
	    // specific event
	    cbs = this._events[event];
	    if (!cbs) {
	      return this;
	    }
	    if (arguments.length === 1) {
	      modifyListenerCount(this, event, -cbs.length);
	      this._events[event] = null;
	      return this;
	    }
	    // specific handler
	    var cb;
	    var i = cbs.length;
	    while (i--) {
	      cb = cbs[i];
	      if (cb === fn || cb.fn === fn) {
	        modifyListenerCount(this, event, -1);
	        cbs.splice(i, 1);
	        break;
	      }
	    }
	    return this;
	  };
	
	  /**
	   * Trigger an event on self.
	   *
	   * @param {String|Object} event
	   * @return {Boolean} shouldPropagate
	   */
	
	  Vue.prototype.$emit = function (event) {
	    var isSource = typeof event === 'string';
	    event = isSource ? event : event.name;
	    var cbs = this._events[event];
	    var shouldPropagate = isSource || !cbs;
	    if (cbs) {
	      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
	      // this is a somewhat hacky solution to the question raised
	      // in #2102: for an inline component listener like <comp @test="doThis">,
	      // the propagation handling is somewhat broken. Therefore we
	      // need to treat these inline callbacks differently.
	      var hasParentCbs = isSource && cbs.some(function (cb) {
	        return cb._fromParent;
	      });
	      if (hasParentCbs) {
	        shouldPropagate = false;
	      }
	      var args = toArray(arguments, 1);
	      for (var i = 0, l = cbs.length; i < l; i++) {
	        var cb = cbs[i];
	        var res = cb.apply(this, args);
	        if (res === true && (!hasParentCbs || cb._fromParent)) {
	          shouldPropagate = true;
	        }
	      }
	    }
	    return shouldPropagate;
	  };
	
	  /**
	   * Recursively broadcast an event to all children instances.
	   *
	   * @param {String|Object} event
	   * @param {...*} additional arguments
	   */
	
	  Vue.prototype.$broadcast = function (event) {
	    var isSource = typeof event === 'string';
	    event = isSource ? event : event.name;
	    // if no child has registered for this event,
	    // then there's no need to broadcast.
	    if (!this._eventsCount[event]) return;
	    var children = this.$children;
	    var args = toArray(arguments);
	    if (isSource) {
	      // use object event to indicate non-source emit
	      // on children
	      args[0] = { name: event, source: this };
	    }
	    for (var i = 0, l = children.length; i < l; i++) {
	      var child = children[i];
	      var shouldPropagate = child.$emit.apply(child, args);
	      if (shouldPropagate) {
	        child.$broadcast.apply(child, args);
	      }
	    }
	    return this;
	  };
	
	  /**
	   * Recursively propagate an event up the parent chain.
	   *
	   * @param {String} event
	   * @param {...*} additional arguments
	   */
	
	  Vue.prototype.$dispatch = function (event) {
	    var shouldPropagate = this.$emit.apply(this, arguments);
	    if (!shouldPropagate) return;
	    var parent = this.$parent;
	    var args = toArray(arguments);
	    // use object event to indicate non-source emit
	    // on parents
	    args[0] = { name: event, source: this };
	    while (parent) {
	      shouldPropagate = parent.$emit.apply(parent, args);
	      parent = shouldPropagate ? parent.$parent : null;
	    }
	    return this;
	  };
	
	  /**
	   * Modify the listener counts on all parents.
	   * This bookkeeping allows $broadcast to return early when
	   * no child has listened to a certain event.
	   *
	   * @param {Vue} vm
	   * @param {String} event
	   * @param {Number} count
	   */
	
	  var hookRE = /^hook:/;
	  function modifyListenerCount(vm, event, count) {
	    var parent = vm.$parent;
	    // hooks do not get broadcasted so no need
	    // to do bookkeeping for them
	    if (!parent || !count || hookRE.test(event)) return;
	    while (parent) {
	      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;
	      parent = parent.$parent;
	    }
	  }
	}
	
	function lifecycleAPI (Vue) {
	  /**
	   * Set instance target element and kick off the compilation
	   * process. The passed in `el` can be a selector string, an
	   * existing Element, or a DocumentFragment (for block
	   * instances).
	   *
	   * @param {Element|DocumentFragment|string} el
	   * @public
	   */
	
	  Vue.prototype.$mount = function (el) {
	    if (this._isCompiled) {
	      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);
	      return;
	    }
	    el = query(el);
	    if (!el) {
	      el = document.createElement('div');
	    }
	    this._compile(el);
	    this._initDOMHooks();
	    if (inDoc(this.$el)) {
	      this._callHook('attached');
	      ready.call(this);
	    } else {
	      this.$once('hook:attached', ready);
	    }
	    return this;
	  };
	
	  /**
	   * Mark an instance as ready.
	   */
	
	  function ready() {
	    this._isAttached = true;
	    this._isReady = true;
	    this._callHook('ready');
	  }
	
	  /**
	   * Teardown the instance, simply delegate to the internal
	   * _destroy.
	   *
	   * @param {Boolean} remove
	   * @param {Boolean} deferCleanup
	   */
	
	  Vue.prototype.$destroy = function (remove, deferCleanup) {
	    this._destroy(remove, deferCleanup);
	  };
	
	  /**
	   * Partially compile a piece of DOM and return a
	   * decompile function.
	   *
	   * @param {Element|DocumentFragment} el
	   * @param {Vue} [host]
	   * @param {Object} [scope]
	   * @param {Fragment} [frag]
	   * @return {Function}
	   */
	
	  Vue.prototype.$compile = function (el, host, scope, frag) {
	    return compile(el, this.$options, true)(this, el, host, scope, frag);
	  };
	}
	
	/**
	 * The exposed Vue constructor.
	 *
	 * API conventions:
	 * - public API methods/properties are prefixed with `$`
	 * - internal methods/properties are prefixed with `_`
	 * - non-prefixed properties are assumed to be proxied user
	 *   data.
	 *
	 * @constructor
	 * @param {Object} [options]
	 * @public
	 */
	
	function Vue(options) {
	  this._init(options);
	}
	
	// install internals
	initMixin(Vue);
	stateMixin(Vue);
	eventsMixin(Vue);
	lifecycleMixin(Vue);
	miscMixin(Vue);
	
	// install instance APIs
	dataAPI(Vue);
	domAPI(Vue);
	eventsAPI(Vue);
	lifecycleAPI(Vue);
	
	var slot = {
	
	  priority: SLOT,
	  params: ['name'],
	
	  bind: function bind() {
	    // this was resolved during component transclusion
	    var name = this.params.name || 'default';
	    var content = this.vm._slotContents && this.vm._slotContents[name];
	    if (!content || !content.hasChildNodes()) {
	      this.fallback();
	    } else {
	      this.compile(content.cloneNode(true), this.vm._context, this.vm);
	    }
	  },
	
	  compile: function compile(content, context, host) {
	    if (content && context) {
	      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {
	        // if the inserted slot has v-if
	        // inject fallback content as the v-else
	        var elseBlock = document.createElement('template');
	        elseBlock.setAttribute('v-else', '');
	        elseBlock.innerHTML = this.el.innerHTML;
	        // the else block should be compiled in child scope
	        elseBlock._context = this.vm;
	        content.appendChild(elseBlock);
	      }
	      var scope = host ? host._scope : this._scope;
	      this.unlink = context.$compile(content, host, scope, this._frag);
	    }
	    if (content) {
	      replace(this.el, content);
	    } else {
	      remove(this.el);
	    }
	  },
	
	  fallback: function fallback() {
	    this.compile(extractContent(this.el, true), this.vm);
	  },
	
	  unbind: function unbind() {
	    if (this.unlink) {
	      this.unlink();
	    }
	  }
	};
	
	var partial = {
	
	  priority: PARTIAL,
	
	  params: ['name'],
	
	  // watch changes to name for dynamic partials
	  paramWatchers: {
	    name: function name(value) {
	      vIf.remove.call(this);
	      if (value) {
	        this.insert(value);
	      }
	    }
	  },
	
	  bind: function bind() {
	    this.anchor = createAnchor('v-partial');
	    replace(this.el, this.anchor);
	    this.insert(this.params.name);
	  },
	
	  insert: function insert(id) {
	    var partial = resolveAsset(this.vm.$options, 'partials', id, true);
	    if (partial) {
	      this.factory = new FragmentFactory(this.vm, partial);
	      vIf.insert.call(this);
	    }
	  },
	
	  unbind: function unbind() {
	    if (this.frag) {
	      this.frag.destroy();
	    }
	  }
	};
	
	var elementDirectives = {
	  slot: slot,
	  partial: partial
	};
	
	var convertArray = vFor._postProcess;
	
	/**
	 * Limit filter for arrays
	 *
	 * @param {Number} n
	 * @param {Number} offset (Decimal expected)
	 */
	
	function limitBy(arr, n, offset) {
	  offset = offset ? parseInt(offset, 10) : 0;
	  n = toNumber(n);
	  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;
	}
	
	/**
	 * Filter filter for arrays
	 *
	 * @param {String} search
	 * @param {String} [delimiter]
	 * @param {String} ...dataKeys
	 */
	
	function filterBy(arr, search, delimiter) {
	  arr = convertArray(arr);
	  if (search == null) {
	    return arr;
	  }
	  if (typeof search === 'function') {
	    return arr.filter(search);
	  }
	  // cast to lowercase string
	  search = ('' + search).toLowerCase();
	  // allow optional `in` delimiter
	  // because why not
	  var n = delimiter === 'in' ? 3 : 2;
	  // extract and flatten keys
	  var keys = Array.prototype.concat.apply([], toArray(arguments, n));
	  var res = [];
	  var item, key, val, j;
	  for (var i = 0, l = arr.length; i < l; i++) {
	    item = arr[i];
	    val = item && item.$value || item;
	    j = keys.length;
	    if (j) {
	      while (j--) {
	        key = keys[j];
	        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {
	          res.push(item);
	          break;
	        }
	      }
	    } else if (contains(item, search)) {
	      res.push(item);
	    }
	  }
	  return res;
	}
	
	/**
	 * Filter filter for arrays
	 *
	 * @param {String|Array<String>|Function} ...sortKeys
	 * @param {Number} [order]
	 */
	
	function orderBy(arr) {
	  var comparator = null;
	  var sortKeys = undefined;
	  arr = convertArray(arr);
	
	  // determine order (last argument)
	  var args = toArray(arguments, 1);
	  var order = args[args.length - 1];
	  if (typeof order === 'number') {
	    order = order < 0 ? -1 : 1;
	    args = args.length > 1 ? args.slice(0, -1) : args;
	  } else {
	    order = 1;
	  }
	
	  // determine sortKeys & comparator
	  var firstArg = args[0];
	  if (!firstArg) {
	    return arr;
	  } else if (typeof firstArg === 'function') {
	    // custom comparator
	    comparator = function (a, b) {
	      return firstArg(a, b) * order;
	    };
	  } else {
	    // string keys. flatten first
	    sortKeys = Array.prototype.concat.apply([], args);
	    comparator = function (a, b, i) {
	      i = i || 0;
	      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);
	    };
	  }
	
	  function baseCompare(a, b, sortKeyIndex) {
	    var sortKey = sortKeys[sortKeyIndex];
	    if (sortKey) {
	      if (sortKey !== '$key') {
	        if (isObject(a) && '$value' in a) a = a.$value;
	        if (isObject(b) && '$value' in b) b = b.$value;
	      }
	      a = isObject(a) ? getPath(a, sortKey) : a;
	      b = isObject(b) ? getPath(b, sortKey) : b;
	    }
	    return a === b ? 0 : a > b ? order : -order;
	  }
	
	  // sort on a copy to avoid mutating original array
	  return arr.slice().sort(comparator);
	}
	
	/**
	 * String contain helper
	 *
	 * @param {*} val
	 * @param {String} search
	 */
	
	function contains(val, search) {
	  var i;
	  if (isPlainObject(val)) {
	    var keys = Object.keys(val);
	    i = keys.length;
	    while (i--) {
	      if (contains(val[keys[i]], search)) {
	        return true;
	      }
	    }
	  } else if (isArray(val)) {
	    i = val.length;
	    while (i--) {
	      if (contains(val[i], search)) {
	        return true;
	      }
	    }
	  } else if (val != null) {
	    return val.toString().toLowerCase().indexOf(search) > -1;
	  }
	}
	
	var digitsRE = /(\d{3})(?=\d)/g;
	
	// asset collections must be a plain object.
	var filters = {
	
	  orderBy: orderBy,
	  filterBy: filterBy,
	  limitBy: limitBy,
	
	  /**
	   * Stringify value.
	   *
	   * @param {Number} indent
	   */
	
	  json: {
	    read: function read(value, indent) {
	      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);
	    },
	    write: function write(value) {
	      try {
	        return JSON.parse(value);
	      } catch (e) {
	        return value;
	      }
	    }
	  },
	
	  /**
	   * 'abc' => 'Abc'
	   */
	
	  capitalize: function capitalize(value) {
	    if (!value && value !== 0) return '';
	    value = value.toString();
	    return value.charAt(0).toUpperCase() + value.slice(1);
	  },
	
	  /**
	   * 'abc' => 'ABC'
	   */
	
	  uppercase: function uppercase(value) {
	    return value || value === 0 ? value.toString().toUpperCase() : '';
	  },
	
	  /**
	   * 'AbC' => 'abc'
	   */
	
	  lowercase: function lowercase(value) {
	    return value || value === 0 ? value.toString().toLowerCase() : '';
	  },
	
	  /**
	   * 12345 => $12,345.00
	   *
	   * @param {String} sign
	   * @param {Number} decimals Decimal places
	   */
	
	  currency: function currency(value, _currency, decimals) {
	    value = parseFloat(value);
	    if (!isFinite(value) || !value && value !== 0) return '';
	    _currency = _currency != null ? _currency : '$';
	    decimals = decimals != null ? decimals : 2;
	    var stringified = Math.abs(value).toFixed(decimals);
	    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;
	    var i = _int.length % 3;
	    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';
	    var _float = decimals ? stringified.slice(-1 - decimals) : '';
	    var sign = value < 0 ? '-' : '';
	    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;
	  },
	
	  /**
	   * 'item' => 'items'
	   *
	   * @params
	   *  an array of strings corresponding to
	   *  the single, double, triple ... forms of the word to
	   *  be pluralized. When the number to be pluralized
	   *  exceeds the length of the args, it will use the last
	   *  entry in the array.
	   *
	   *  e.g. ['single', 'double', 'triple', 'multiple']
	   */
	
	  pluralize: function pluralize(value) {
	    var args = toArray(arguments, 1);
	    var length = args.length;
	    if (length > 1) {
	      var index = value % 10 - 1;
	      return index in args ? args[index] : args[length - 1];
	    } else {
	      return args[0] + (value === 1 ? '' : 's');
	    }
	  },
	
	  /**
	   * Debounce a handler function.
	   *
	   * @param {Function} handler
	   * @param {Number} delay = 300
	   * @return {Function}
	   */
	
	  debounce: function debounce(handler, delay) {
	    if (!handler) return;
	    if (!delay) {
	      delay = 300;
	    }
	    return _debounce(handler, delay);
	  }
	};
	
	function installGlobalAPI (Vue) {
	  /**
	   * Vue and every constructor that extends Vue has an
	   * associated options object, which can be accessed during
	   * compilation steps as `this.constructor.options`.
	   *
	   * These can be seen as the default options of every
	   * Vue instance.
	   */
	
	  Vue.options = {
	    directives: directives,
	    elementDirectives: elementDirectives,
	    filters: filters,
	    transitions: {},
	    components: {},
	    partials: {},
	    replace: true
	  };
	
	  /**
	   * Expose useful internals
	   */
	
	  Vue.util = util;
	  Vue.config = config;
	  Vue.set = set;
	  Vue['delete'] = del;
	  Vue.nextTick = nextTick;
	
	  /**
	   * The following are exposed for advanced usage / plugins
	   */
	
	  Vue.compiler = compiler;
	  Vue.FragmentFactory = FragmentFactory;
	  Vue.internalDirectives = internalDirectives;
	  Vue.parsers = {
	    path: path,
	    text: text,
	    template: template,
	    directive: directive,
	    expression: expression
	  };
	
	  /**
	   * Each instance constructor, including Vue, has a unique
	   * cid. This enables us to create wrapped "child
	   * constructors" for prototypal inheritance and cache them.
	   */
	
	  Vue.cid = 0;
	  var cid = 1;
	
	  /**
	   * Class inheritance
	   *
	   * @param {Object} extendOptions
	   */
	
	  Vue.extend = function (extendOptions) {
	    extendOptions = extendOptions || {};
	    var Super = this;
	    var isFirstExtend = Super.cid === 0;
	    if (isFirstExtend && extendOptions._Ctor) {
	      return extendOptions._Ctor;
	    }
	    var name = extendOptions.name || Super.options.name;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
	        warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');
	        name = null;
	      }
	    }
	    var Sub = createClass(name || 'VueComponent');
	    Sub.prototype = Object.create(Super.prototype);
	    Sub.prototype.constructor = Sub;
	    Sub.cid = cid++;
	    Sub.options = mergeOptions(Super.options, extendOptions);
	    Sub['super'] = Super;
	    // allow further extension
	    Sub.extend = Super.extend;
	    // create asset registers, so extended classes
	    // can have their private assets too.
	    config._assetTypes.forEach(function (type) {
	      Sub[type] = Super[type];
	    });
	    // enable recursive self-lookup
	    if (name) {
	      Sub.options.components[name] = Sub;
	    }
	    // cache constructor
	    if (isFirstExtend) {
	      extendOptions._Ctor = Sub;
	    }
	    return Sub;
	  };
	
	  /**
	   * A function that returns a sub-class constructor with the
	   * given name. This gives us much nicer output when
	   * logging instances in the console.
	   *
	   * @param {String} name
	   * @return {Function}
	   */
	
	  function createClass(name) {
	    /* eslint-disable no-new-func */
	    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();
	    /* eslint-enable no-new-func */
	  }
	
	  /**
	   * Plugin system
	   *
	   * @param {Object} plugin
	   */
	
	  Vue.use = function (plugin) {
	    /* istanbul ignore if */
	    if (plugin.installed) {
	      return;
	    }
	    // additional parameters
	    var args = toArray(arguments, 1);
	    args.unshift(this);
	    if (typeof plugin.install === 'function') {
	      plugin.install.apply(plugin, args);
	    } else {
	      plugin.apply(null, args);
	    }
	    plugin.installed = true;
	    return this;
	  };
	
	  /**
	   * Apply a global mixin by merging it into the default
	   * options.
	   */
	
	  Vue.mixin = function (mixin) {
	    Vue.options = mergeOptions(Vue.options, mixin);
	  };
	
	  /**
	   * Create asset registration methods with the following
	   * signature:
	   *
	   * @param {String} id
	   * @param {*} definition
	   */
	
	  config._assetTypes.forEach(function (type) {
	    Vue[type] = function (id, definition) {
	      if (!definition) {
	        return this.options[type + 's'][id];
	      } else {
	        /* istanbul ignore if */
	        if (process.env.NODE_ENV !== 'production') {
	          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {
	            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
	          }
	        }
	        if (type === 'component' && isPlainObject(definition)) {
	          if (!definition.name) {
	            definition.name = id;
	          }
	          definition = Vue.extend(definition);
	        }
	        this.options[type + 's'][id] = definition;
	        return definition;
	      }
	    };
	  });
	
	  // expose internal transition API
	  extend(Vue.transition, transition);
	}
	
	installGlobalAPI(Vue);
	
	Vue.version = '1.0.26';
	
	// devtools global hook
	/* istanbul ignore next */
	setTimeout(function () {
	  if (config.devtools) {
	    if (devtools) {
	      devtools.emit('init', Vue);
	    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\/\d+/.test(window.navigator.userAgent)) {
	      console.log('Download the Vue Devtools for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
	    }
	  }
	}, 0);
	
	module.exports = Vue;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 9), __webpack_require__(/*! jquery */ 3)))

/***/ },
/* 134 */
/*!***************************!*\
  !*** ./src/views/App.vue ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-92ef8cba&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./App.vue */ 135)
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js!./../../~/vue-loader/lib/selector.js?type=style&index=1!./App.vue */ 140)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./App.vue */ 142)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\views\\App.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-92ef8cba!./../../~/vue-loader/lib/selector.js?type=template&index=0!./App.vue */ 175)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./App.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 135 */
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-92ef8cba&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/App.vue ***!
  \*******************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-92ef8cba&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./App.vue */ 136);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-92ef8cba&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./App.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-92ef8cba&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./App.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 136 */
/*!**********************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-92ef8cba&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/App.vue ***!
  \**********************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/app.css */ 138), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"App.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 137 */
/*!**************************************!*\
  !*** ./~/css-loader/lib/css-base.js ***!
  \**************************************/
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 138 */
/*!********************************************************!*\
  !*** ./~/css-loader?sourceMap!./src/views/css/app.css ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, ".mui-popup-backdrop {\r\n  z-index: 999998; }\r\n\r\n.mui-popup {\r\n  z-index: 999999; }\r\n\r\n.split-line {\r\n  content: '';\r\n  height: 1px;\r\n  width: 100%;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%; }\r\n\r\n.split-line-v {\r\n  content: '';\r\n  height: 100%;\r\n  width: 1px;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%;\r\n  color: white;\r\n  float: left; }\r\n\r\n.left {\r\n  float: left; }\r\n\r\n.right {\r\n  float: right; }\r\n\r\n.hide {\r\n  display: none; }\r\n\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none !important;\r\n  margin: 0; }\r\n\r\n::-webkit-inner-spin-button {\r\n  visibility: hidden; }\r\n\r\n::-webkit-calendar-picker-indicator {\r\n  border: 1px solid #ccc;\r\n  border-radius: 2px;\r\n  box-shadow: inset 0 1px #fff, 0 1px #eee;\r\n  background-color: #eee;\r\n  background-image: -webkit-linear-gradient(top, #f0f0f0, #e6e6e6);\r\n  color: #666; }\r\n\r\ninput[type='number'] {\r\n  -moz-appearance: textfield;\r\n  -webkit-appearance: none !important; }\r\n\r\ninput[type=color], input[type=date], input[type=datetime-local], input[type=datetime], input[type=email], input[type=month], input[type=number], input[type=password], input[type=search], input[type=tel], input[type=text] {\r\n  font-family: 'Microsoft YaHei', 'Hiragino Sans GB', Helvetica, Arial, 'Lucida Grande', sans-serif;\r\n  -webkit-appearance: none;\r\n  border: 0 none;\r\n  background-color: white;\r\n  outline: none;\r\n  font-size: 0.3rem; }\r\n\r\ninput:focus {\r\n  outline: none; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .split-line {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); }\r\n\r\n  .split-line-v {\r\n    -webkit-transform: scaleX(0.33);\r\n    transform: scaleX(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .split-line {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); }\r\n\r\n  .split-line-v {\r\n    -webkit-transform: scaleX(0.5);\r\n    transform: scaleX(0.5); } }\r\n\r\n/*# sourceMappingURL=app.css.map */\r\n", "", {"version":3,"sources":["/./src/views/css/app.css"],"names":[],"mappings":"AAAA;EACE,gBAAgB,EAAE;;AAEpB;EACE,gBAAgB,EAAE;;AAEpB;EACE,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,0BAA0B;EAC1B,eAAe;EACf,mCAAmC;EACnC,2BAA2B,EAAE;;AAE/B;EACE,YAAY;EACZ,aAAa;EACb,WAAW;EACX,0BAA0B;EAC1B,eAAe;EACf,mCAAmC;EACnC,2BAA2B;EAC3B,aAAa;EACb,YAAY,EAAE;;AAEhB;EACE,YAAY,EAAE;;AAEhB;EACE,aAAa,EAAE;;AAEjB;EACE,cAAc,EAAE;;AAElB;;EAEE,oCAAoC;EACpC,UAAU,EAAE;;AAEd;EACE,mBAAmB,EAAE;;AAEvB;EACE,uBAAuB;EACvB,mBAAmB;EACnB,yCAAyC;EACzC,uBAAuB;EACvB,iEAAiE;EACjE,YAAY,EAAE;;AAEhB;EACE,2BAA2B;EAC3B,oCAAoC,EAAE;;AAExC;EACE,kGAAkG;EAClG,yBAAyB;EACzB,eAAe;EACf,wBAAwB;EACxB,cAAc;EACd,kBAAkB,EAAE;;AAEtB;EACE,cAAc,EAAE;;AAElB;EACE;IACE,gCAAgC;IAChC,wBAAwB,EAAE;;EAE5B;IACE,gCAAgC;IAChC,wBAAwB,EAAE,EAAE;AAChC;EACE;IACE,+BAA+B;IAC/B,uBAAuB,EAAE;;EAE3B;IACE,+BAA+B;IAC/B,uBAAuB,EAAE,EAAE;;AAE/B,mCAAmC","file":"app.css","sourcesContent":[".mui-popup-backdrop {\r\n  z-index: 999998; }\r\n\r\n.mui-popup {\r\n  z-index: 999999; }\r\n\r\n.split-line {\r\n  content: '';\r\n  height: 1px;\r\n  width: 100%;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%; }\r\n\r\n.split-line-v {\r\n  content: '';\r\n  height: 100%;\r\n  width: 1px;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%;\r\n  color: white;\r\n  float: left; }\r\n\r\n.left {\r\n  float: left; }\r\n\r\n.right {\r\n  float: right; }\r\n\r\n.hide {\r\n  display: none; }\r\n\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none !important;\r\n  margin: 0; }\r\n\r\n::-webkit-inner-spin-button {\r\n  visibility: hidden; }\r\n\r\n::-webkit-calendar-picker-indicator {\r\n  border: 1px solid #ccc;\r\n  border-radius: 2px;\r\n  box-shadow: inset 0 1px #fff, 0 1px #eee;\r\n  background-color: #eee;\r\n  background-image: -webkit-linear-gradient(top, #f0f0f0, #e6e6e6);\r\n  color: #666; }\r\n\r\ninput[type='number'] {\r\n  -moz-appearance: textfield;\r\n  -webkit-appearance: none !important; }\r\n\r\ninput[type=color], input[type=date], input[type=datetime-local], input[type=datetime], input[type=email], input[type=month], input[type=number], input[type=password], input[type=search], input[type=tel], input[type=text] {\r\n  font-family: 'Microsoft YaHei', 'Hiragino Sans GB', Helvetica, Arial, 'Lucida Grande', sans-serif;\r\n  -webkit-appearance: none;\r\n  border: 0 none;\r\n  background-color: white;\r\n  outline: none;\r\n  font-size: 0.3rem; }\r\n\r\ninput:focus {\r\n  outline: none; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .split-line {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); }\r\n\r\n  .split-line-v {\r\n    -webkit-transform: scaleX(0.33);\r\n    transform: scaleX(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .split-line {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); }\r\n\r\n  .split-line-v {\r\n    -webkit-transform: scaleX(0.5);\r\n    transform: scaleX(0.5); } }\r\n\r\n/*# sourceMappingURL=app.css.map */\r\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 139 */
/*!*****************************************!*\
  !*** ./~/vue-style-loader/addStyles.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(true) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if (media) {
			styleElement.setAttribute("media", media);
		}
	
		if (sourceMap) {
			// https://developer.chrome.com/devtools/docs/javascript-debugging
			// this makes source maps inside style tags work properly in Chrome
			css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */';
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ },
/* 140 */
/*!****************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js!./~/vue-loader/lib/selector.js?type=style&index=1!./src/views/App.vue ***!
  \****************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js!./../../~/vue-loader/lib/selector.js?type=style&index=1!./App.vue */ 141);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=1!./App.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=1!./App.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 141 */
/*!*******************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js!./~/vue-loader/lib/selector.js?type=style&index=1!./src/views/App.vue ***!
  \*******************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.hide {\n    display: none;\n}\n\n.play {\n    position: fixed;\n    bottom: 0;\n}\n", "", {"version":3,"sources":["/./src/views/App.vue?3e43023b"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HA;IACA,cAAA;CACA;;AAEA;IACA,gBAAA;IACA,UAAA;CACA","file":"App.vue","sourcesContent":["<style scoped>\r\n    @import \"css/app.css\";\r\n</style>\r\n<template>\r\n    <div>\r\n        <title-bar></title-bar>\r\n        <router-view></router-view>\r\n        <spinner id='spinner' :style=\"{ display: spinner }\"></spinner>\r\n        <audio id=\"player\" autoplay=\"autoplay\" rel=\"{{playing}}\" val=\"{{mode}}\"\r\n               :src=\"current.url\"\r\n               @timeupdate=\"updateProgress\"\r\n               @ended=\"complete\"\r\n               @play=\"playEvent\"\r\n               @pause=\"pauseEvent\"\r\n               @error=\"error\"\r\n               @stalled=\"stalled\"></audio>\r\n        <div class=\"play\" :class=\"{'hide':!isShow}\">\r\n            <play-bar></play-bar>\r\n        </div>\r\n        <pop-list></pop-list>\r\n    </div>\r\n</template>\r\n\r\n<script type=\"text/ecmascript-6\">\r\n    import titleBar from '../components/titleBar.vue'\r\n    import spinner from '../components/spinner.vue'\r\n    import playBar from '../components/playBar.vue'\r\n    import popList from '../views/playList.vue'\r\n    import Common from '../js/rock';\r\n    import {updateTitle,\r\n            progress,\r\n            nextSong,\r\n            switchRotate} from '../vuex/actions'\r\n    import store from '../vuex/store';\r\n    var player;\r\n    var urlError = false;\r\n    export default{\r\n        store,\r\n        vuex: {\r\n            actions: {\r\n                updateTitle,\r\n                progress,\r\n                nextSong,\r\n                switchRotate\r\n            }\r\n        },\r\n        components: {\r\n            titleBar,\r\n            spinner,\r\n            playBar,\r\n            popList\r\n        },\r\n        computed: {\r\n            spinner () {\r\n                if (store.state.spinner) {\r\n                    return 'block'\r\n                } else {\r\n                    return 'none'\r\n                }\r\n            },\r\n            mode(){\r\n                if (player && player.currentSrc.length != 0) {\r\n                    if (store.state.play.status.mode == 0) {\r\n                        player.loop = true;\r\n                    } else {\r\n                        player.loop = false;\r\n                    }\r\n                }\r\n                return store.state.play.status.mode;\r\n            },\r\n            current(){\r\n                if (!store.state.play.current.url) {\r\n                    store.state.play.current.url = store.state.play.current.m4a;\r\n                }\r\n                console.log(store.state.play.current);\r\n                return store.state.play.current;\r\n            },\r\n            playing(){\r\n                if (player && player.currentSrc.length != 0) {\r\n                    if (!urlError) {\r\n                        if (store.state.play.status.playing) {\r\n                            player.play();\r\n                        } else {\r\n                            player.pause();\r\n                        }\r\n                    }\r\n\r\n                }\r\n                return store.state.play.status.playing;\r\n            },\r\n            isShow(){\r\n                return store.state.play.isShow;\r\n            }\r\n        },\r\n        methods: {\r\n            updateProgress: function () {\r\n                this.progress(player.duration, player.currentTime);\r\n            },\r\n            complete: function () {\r\n                console.log('complete');\r\n                this.nextSong();\r\n                this.switchRotate(false);\r\n            },\r\n            playEvent: function () {\r\n                urlError = false;\r\n                this.switchRotate(true);\r\n            },\r\n            pauseEvent: function () {\r\n                urlError = false;\r\n            },\r\n            stalled: function () {\r\n                console.log('stalled');\r\n            },\r\n            error: function () {\r\n                urlError = true;\r\n                console.log('error');\r\n            }\r\n        },\r\n        ready: function () {\r\n            player = document.getElementById('player');\r\n            Common.init(this);\r\n            this.updateTitle('主页面', false, 'hide');\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .hide {\r\n        display: none;\r\n    }\r\n\r\n    .play {\r\n        position: fixed;\r\n        bottom: 0;\r\n    }\r\n</style>"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 142 */
/*!***********************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/views/App.vue ***!
  \***********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _titleBar = __webpack_require__(/*! ../components/titleBar.vue */ 143);
	
	var _titleBar2 = _interopRequireDefault(_titleBar);
	
	var _spinner = __webpack_require__(/*! ../components/spinner.vue */ 152);
	
	var _spinner2 = _interopRequireDefault(_spinner);
	
	var _playBar = __webpack_require__(/*! ../components/playBar.vue */ 156);
	
	var _playBar2 = _interopRequireDefault(_playBar);
	
	var _playList = __webpack_require__(/*! ../views/playList.vue */ 163);
	
	var _playList2 = _interopRequireDefault(_playList);
	
	var _rock = __webpack_require__(/*! ../js/rock */ 2);
	
	var _rock2 = _interopRequireDefault(_rock);
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	var _store = __webpack_require__(/*! ../vuex/store */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var player; // <style scoped>
	//     @import "css/app.css";
	// </style>
	// <template>
	//     <div>
	//         <title-bar></title-bar>
	//         <router-view></router-view>
	//         <spinner id='spinner' :style="{ display: spinner }"></spinner>
	//         <audio id="player" autoplay="autoplay" rel="{{playing}}" val="{{mode}}"
	//                :src="current.url"
	//                @timeupdate="updateProgress"
	//                @ended="complete"
	//                @play="playEvent"
	//                @pause="pauseEvent"
	//                @error="error"
	//                @stalled="stalled"></audio>
	//         <div class="play" :class="{'hide':!isShow}">
	//             <play-bar></play-bar>
	//         </div>
	//         <pop-list></pop-list>
	//     </div>
	// </template>
	//
	// <script type="text/ecmascript-6">
	
	var urlError = false;
	exports.default = {
	    store: _store2.default,
	    vuex: {
	        actions: {
	            updateTitle: _actions.updateTitle,
	            progress: _actions.progress,
	            nextSong: _actions.nextSong,
	            switchRotate: _actions.switchRotate
	        }
	    },
	    components: {
	        titleBar: _titleBar2.default,
	        spinner: _spinner2.default,
	        playBar: _playBar2.default,
	        popList: _playList2.default
	    },
	    computed: {
	        spinner: function spinner() {
	            if (_store2.default.state.spinner) {
	                return 'block';
	            } else {
	                return 'none';
	            }
	        },
	        mode: function mode() {
	            if (player && player.currentSrc.length != 0) {
	                if (_store2.default.state.play.status.mode == 0) {
	                    player.loop = true;
	                } else {
	                    player.loop = false;
	                }
	            }
	            return _store2.default.state.play.status.mode;
	        },
	        current: function current() {
	            if (!_store2.default.state.play.current.url) {
	                _store2.default.state.play.current.url = _store2.default.state.play.current.m4a;
	            }
	            console.log(_store2.default.state.play.current);
	            return _store2.default.state.play.current;
	        },
	        playing: function playing() {
	            if (player && player.currentSrc.length != 0) {
	                if (!urlError) {
	                    if (_store2.default.state.play.status.playing) {
	                        player.play();
	                    } else {
	                        player.pause();
	                    }
	                }
	            }
	            return _store2.default.state.play.status.playing;
	        },
	        isShow: function isShow() {
	            return _store2.default.state.play.isShow;
	        }
	    },
	    methods: {
	        updateProgress: function updateProgress() {
	            this.progress(player.duration, player.currentTime);
	        },
	        complete: function complete() {
	            console.log('complete');
	            this.nextSong();
	            this.switchRotate(false);
	        },
	        playEvent: function playEvent() {
	            urlError = false;
	            this.switchRotate(true);
	        },
	        pauseEvent: function pauseEvent() {
	            urlError = false;
	        },
	        stalled: function stalled() {
	            console.log('stalled');
	        },
	        error: function error() {
	            urlError = true;
	            console.log('error');
	        }
	    },
	    ready: function ready() {
	        player = document.getElementById('player');
	        _rock2.default.init(this);
	        this.updateTitle('主页面', false, 'hide');
	    }
	};
	// </script>
	//
	// <style>
	//     .hide {
	//         display: none;
	//     }
	//
	//     .play {
	//         position: fixed;
	//         bottom: 0;
	//     }
	// </style>
	/* generated by vue-loader */

/***/ },
/* 143 */
/*!*************************************!*\
  !*** ./src/components/titleBar.vue ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-a1c77c9e&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./titleBar.vue */ 144)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./titleBar.vue */ 147)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\titleBar.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-a1c77c9e!./../../~/vue-loader/lib/selector.js?type=template&index=0!./titleBar.vue */ 151)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./titleBar.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 144 */
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-a1c77c9e&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/titleBar.vue ***!
  \*****************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-a1c77c9e&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./titleBar.vue */ 145);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-a1c77c9e&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./titleBar.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-a1c77c9e&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./titleBar.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 145 */
/*!********************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-a1c77c9e&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/titleBar.vue ***!
  \********************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/titleBar.css */ 146), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"titleBar.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 146 */
/*!******************************************************************!*\
  !*** ./~/css-loader?sourceMap!./src/components/css/titleBar.css ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, ".title-bar {\r\n  width: 6.4rem;\r\n  height: 0.8rem;\r\n  background: #2fcdfe;\r\n  text-align: center;\r\n  line-height: 0.8rem;\r\n  max-height: 0.8rem;\r\n  position: fixed;\r\n  top: 0;\r\n  z-index: 999998; }\r\n  .title-bar ::-webkit-input-placeholder {\r\n    /* WebKit browsers */\r\n    color: #ddd;\r\n    font-family: 'Microsoft YaHei', sans-serif; }\r\n  .title-bar :-moz-placeholder {\r\n    /* Mozilla Firefox 4 to 18 */\r\n    color: #ddd;\r\n    font-family: 'Microsoft YaHei', sans-serif; }\r\n  .title-bar ::-moz-placeholder {\r\n    /* Mozilla Firefox 19+ */\r\n    color: #ddd;\r\n    font-family: 'Microsoft YaHei', sans-serif; }\r\n  .title-bar .title {\r\n    font-size: 0.3rem;\r\n    line-height: 0.8rem;\r\n    color: #ffffff; }\r\n  .title-bar .search {\r\n    width: 4.78rem;\r\n    height: 0.6rem;\r\n    float: left; }\r\n    .title-bar .search input[type=search] {\r\n      width: 100%;\r\n      height: 100%;\r\n      margin: 0;\r\n      background: #006cbf;\r\n      color: white; }\r\n  .title-bar .btn {\r\n    font-family: Muiicons;\r\n    font-size: 0.6rem;\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    line-height: 1;\r\n    display: inline-block;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    -webkit-font-smoothing: antialiased;\r\n    color: #ffffff;\r\n    margin-top: 0.1rem;\r\n    margin-left: 0.1rem;\r\n    margin-right: 0.1rem; }\r\n  .title-bar .btn-div-left:active {\r\n    background-color: #5fcdae; }\r\n  .title-bar .btn-div-right:active {\r\n    background-color: #5fcdae; }\r\n  .title-bar .hide {\r\n    display: none; }\r\n  .title-bar .btn-div-right {\r\n    width: 0.8rem;\r\n    height: 0.8rem; }\r\n  .title-bar .btn-div-left {\r\n    width: 0.8rem;\r\n    height: 0.8rem; }\r\n  .title-bar .blue-line-left {\r\n    border-left: 1px solid #2fcdfe; }\r\n  .title-bar .blue-line-right {\r\n    border-right: 1px solid #2fcdfe; }\r\n\r\n.title-bar-position {\r\n  width: 6.4rem;\r\n  height: 0.8rem; }\r\n\r\n/*# sourceMappingURL=titleBar.css.map */\r\n", "", {"version":3,"sources":["/./src/components/css/titleBar.css"],"names":[],"mappings":"AAAA;EACE,cAAc;EACd,eAAe;EACf,oBAAoB;EACpB,mBAAmB;EACnB,oBAAoB;EACpB,mBAAmB;EACnB,gBAAgB;EAChB,OAAO;EACP,gBAAgB,EAAE;EAClB;IACE,qBAAqB;IACrB,YAAY;IACZ,2CAA2C,EAAE;EAC/C;IACE,6BAA6B;IAC7B,YAAY;IACZ,2CAA2C,EAAE;EAC/C;IACE,yBAAyB;IACzB,YAAY;IACZ,2CAA2C,EAAE;EAC/C;IACE,kBAAkB;IAClB,oBAAoB;IACpB,eAAe,EAAE;EACnB;IACE,eAAe;IACf,eAAe;IACf,YAAY,EAAE;IACd;MACE,YAAY;MACZ,aAAa;MACb,UAAU;MACV,oBAAoB;MACpB,aAAa,EAAE;EACnB;IACE,sBAAsB;IACtB,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,eAAe;IACf,sBAAsB;IACtB,sBAAsB;IACtB,mBAAmB;IACnB,oCAAoC;IACpC,eAAe;IACf,mBAAmB;IACnB,oBAAoB;IACpB,qBAAqB,EAAE;EACzB;IACE,0BAA0B,EAAE;EAC9B;IACE,0BAA0B,EAAE;EAC9B;IACE,cAAc,EAAE;EAClB;IACE,cAAc;IACd,eAAe,EAAE;EACnB;IACE,cAAc;IACd,eAAe,EAAE;EACnB;IACE,+BAA+B,EAAE;EACnC;IACE,gCAAgC,EAAE;;AAEtC;EACE,cAAc;EACd,eAAe,EAAE;;AAEnB,wCAAwC","file":"titleBar.css","sourcesContent":[".title-bar {\r\n  width: 6.4rem;\r\n  height: 0.8rem;\r\n  background: #2fcdfe;\r\n  text-align: center;\r\n  line-height: 0.8rem;\r\n  max-height: 0.8rem;\r\n  position: fixed;\r\n  top: 0;\r\n  z-index: 999998; }\r\n  .title-bar ::-webkit-input-placeholder {\r\n    /* WebKit browsers */\r\n    color: #ddd;\r\n    font-family: 'Microsoft YaHei', sans-serif; }\r\n  .title-bar :-moz-placeholder {\r\n    /* Mozilla Firefox 4 to 18 */\r\n    color: #ddd;\r\n    font-family: 'Microsoft YaHei', sans-serif; }\r\n  .title-bar ::-moz-placeholder {\r\n    /* Mozilla Firefox 19+ */\r\n    color: #ddd;\r\n    font-family: 'Microsoft YaHei', sans-serif; }\r\n  .title-bar .title {\r\n    font-size: 0.3rem;\r\n    line-height: 0.8rem;\r\n    color: #ffffff; }\r\n  .title-bar .search {\r\n    width: 4.78rem;\r\n    height: 0.6rem;\r\n    float: left; }\r\n    .title-bar .search input[type=search] {\r\n      width: 100%;\r\n      height: 100%;\r\n      margin: 0;\r\n      background: #006cbf;\r\n      color: white; }\r\n  .title-bar .btn {\r\n    font-family: Muiicons;\r\n    font-size: 0.6rem;\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    line-height: 1;\r\n    display: inline-block;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    -webkit-font-smoothing: antialiased;\r\n    color: #ffffff;\r\n    margin-top: 0.1rem;\r\n    margin-left: 0.1rem;\r\n    margin-right: 0.1rem; }\r\n  .title-bar .btn-div-left:active {\r\n    background-color: #5fcdae; }\r\n  .title-bar .btn-div-right:active {\r\n    background-color: #5fcdae; }\r\n  .title-bar .hide {\r\n    display: none; }\r\n  .title-bar .btn-div-right {\r\n    width: 0.8rem;\r\n    height: 0.8rem; }\r\n  .title-bar .btn-div-left {\r\n    width: 0.8rem;\r\n    height: 0.8rem; }\r\n  .title-bar .blue-line-left {\r\n    border-left: 1px solid #2fcdfe; }\r\n  .title-bar .blue-line-right {\r\n    border-right: 1px solid #2fcdfe; }\r\n\r\n.title-bar-position {\r\n  width: 6.4rem;\r\n  height: 0.8rem; }\r\n\r\n/*# sourceMappingURL=titleBar.css.map */\r\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 147 */
/*!*********************************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/components/titleBar.vue ***!
  \*********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _store = __webpack_require__(/*! ../vuex/store.js */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// <style scoped>
	//     @import "css/titleBar.css";
	// </style>
	//
	// <template>
	//     <div class="title-bar">
	//         <div class="btn-div-left left">
	//             <span id="backBtn" class="btn left mui-icon-undo" @click="back()"
	//                   :class="{'hide':!titleBar.isShowBack}"></span>
	//         </div>
	//         <span class="title" id="title" :class="{'hide': titleBar.icon=='sBar'}">{{titleBar.title}}</span>
	//         <form class="search" action="javascrpit:void(0)" @submit.prevent="actionClick"
	//               :class="{'hide': titleBar.icon!='sBar'}">
	//             <input type="search" placeholder="搜索" id="keyword"/>
	//         </form>
	//         <div class="btn-div-right right">
	//         <span id="actionBtn" class="btn right"
	//               :class="{'hide': titleBar.icon=='hide',
	//                 'mui-icon-checkmarkempty': titleBar.icon=='complete',
	//                 'mui-icon-search ' : titleBar.icon=='sBar',
	//                 'mui-icon-compose': titleBar.icon=='change',
	//                 'mui-icon-plusempty': titleBar.icon=='add',
	//                 'mui-icon-search' : titleBar.icon=='search'}"
	//               @click="actionClick"></span>
	//         </div>
	//     </div>
	//     <div class="title-bar-position"></div>
	// </template>
	// <script>
	exports.default = {
	    computed: {
	        titleBar: function titleBar() {
	            return _store2.default.state.titleBar;
	        }
	    },
	    vuex: {
	        actions: {
	            updateKeyword: _actions.updateKeyword
	        }
	    },
	    methods: {
	        back: function back() {
	            window.history.back(-1);
	        },
	        actionClick: function actionClick() {
	            console.log('keyword');
	            if (this.titleBar.icon == 'sBar') this.updateKeyword(document.getElementById("keyword").value);
	            this.$parent.action();
	        }
	    }
	};
	// </script>

	/* generated by vue-loader */

/***/ },
/* 148 */
/*!***************************!*\
  !*** ./src/vuex/store.js ***!
  \***************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _vue = __webpack_require__(/*! vue */ 133);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _vuex = __webpack_require__(/*! vuex */ 149);
	
	var _vuex2 = _interopRequireDefault(_vuex);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_vue2.default.use(_vuex2.default);
	
	var state = {
	    titleBar: {
	        title: '主页',
	        isShowBack: false,
	        icon: 'hide'
	    },
	    spinner: false,
	    play: {
	        list: [],
	        current: {
	            albumpic_small: '',
	            songname: '',
	            singername: '',
	            url: '',
	            songid: ''
	        },
	        status: {
	            total: 10000,
	            position: 1,
	            playing: false,
	            mode: 1,
	            rotate: false
	        },
	        isShow: true,
	        popList: {
	            pop: false
	        }
	    },
	    rank: {
	        topid: 26
	    },
	
	    search: {
	        keyword: ''
	    }
	};
	
	var mutations = {
	    UPDATE_TITLE: function UPDATE_TITLE(state, title, showBack, icon) {
	        state.titleBar.title = title;
	        state.titleBar.isShowBack = showBack;
	        state.titleBar.icon = icon;
	    },
	    TOGGLE_SPINNER: function TOGGLE_SPINNER(state) {
	        state.spinner = !state.spinner;
	    },
	    UPDATE_TOP_ID: function UPDATE_TOP_ID(state, id) {
	        state.rank.topid = id;
	    },
	    SWITCH_SONG: function SWITCH_SONG(state, obj) {
	        state.play.status.playing = true;
	        state.play.current = obj;
	    },
	    ADD_PLAY_LIST: function ADD_PLAY_LIST(state, obj) {
	        state.play.list.unshift(obj);
	    },
	    UPDATE_PROGRESS: function UPDATE_PROGRESS(state, total, position) {
	        state.play.status.total = total;
	        state.play.status.position = position;
	    },
	    SWITCH_PLAYER_STATUS: function SWITCH_PLAYER_STATUS(state) {
	        state.play.status.playing = !state.play.status.playing;
	    },
	    PLAYER_STATUS: function PLAYER_STATUS(state) {
	        state.play.status.playing = true;
	    },
	    SWITCH_ROTATE: function SWITCH_ROTATE(state, isRotate) {
	        state.play.status.rotate = isRotate;
	    },
	    SWITCH_MODE: function SWITCH_MODE(state) {
	        if (state.play.status.mode == 0) {
	            state.play.status.mode = 1;
	        } else if (state.play.status.mode == 1) {
	            state.play.status.mode = 2;
	        } else {
	            state.play.status.mode = 0;
	        }
	    },
	    LAST_SONG: function LAST_SONG(state) {
	        var list = state.play.list;
	        state.play.status.playing = true;
	        if (state.play.status.mode == 0) {} else if (state.play.status.mode == 1) {
	            for (var i = 0; i < list.length; i++) {
	                if (state.play.current.songid == list[i].songid) {
	                    if (i == 0) {
	                        state.play.current = list[list.length - 1];
	                    } else {
	                        state.play.current = list[i + 1];
	                    }
	                    break;
	                }
	            }
	        } else {
	            state.play.current = list[Math.floor(Math.random() * list.length)];
	        }
	    },
	    NEXT_SONG: function NEXT_SONG(state) {
	        var list = state.play.list;
	        if (list.length == 0) {
	            return;
	        }
	        if (list.length == 1) {
	            return;
	        }
	        state.play.status.rotate = false;
	        state.play.status.playing = true;
	        if (state.play.status.mode == 0) {} else if (state.play.status.mode == 1) {
	            for (var i = 0; i < list.length; i++) {
	                if (state.play.current.songid == list[i].songid) {
	                    if (i == list.length - 1) {
	                        state.play.current = list[0];
	                    } else {
	                        state.play.current = list[i + 1];
	                    }
	                    break;
	                }
	            }
	        } else {
	            state.play.current = list[Math.floor(Math.random() * list.length)];
	        }
	    },
	    UPDATE_KEYWORD: function UPDATE_KEYWORD(state, keyword) {
	        state.search.keyword = keyword;
	    },
	    UPDATE_POP_LIST: function UPDATE_POP_LIST(state, pop) {
	        state.play.popList.pop = pop;
	    },
	    REMOVE_FROM_PLAY_LIST: function REMOVE_FROM_PLAY_LIST(state, song) {
	        var list = state.play.list;
	        for (var i = 0; i < list.length; i++) {
	            if (list.length == 1) {
	                state.play.status.playing = false;
	                state.play.status.position = 1;
	                state.play.status.rotate = false;
	                state.play.status.total = 10000;
	                state.play.current = {
	                    albumpic_small: '',
	                    songname: '',
	                    singername: '',
	                    songid: '',
	                    url: 'clean'
	                };
	            }
	            if (song.songid == list[i].songid) {
	                if (song.songid == state.play.current.songid) {
	                    if (i = list.length - 1) {
	                        state.play.current = list[0];
	                    } else {
	                        state.play.current = list[i + 1];
	                    }
	                }
	                list.splice(i, 1);
	                break;
	            }
	        }
	    },
	    CLEAN_PLAY_LIST: function CLEAN_PLAY_LIST(state) {
	        state.play.list = [];
	        state.play.status.playing = false;
	        state.play.status.position = 1;
	        state.play.status.rotate = false;
	        state.play.status.total = 10000;
	        state.play.current = {
	            albumpic_small: '',
	            songname: '',
	            singername: '',
	            songid: '',
	            url: 'clean'
	        };
	    }
	};
	exports.default = new _vuex2.default.Store({
	    state: state,
	    mutations: mutations
	});

/***/ },
/* 149 */
/*!*****************************!*\
  !*** ./~/vuex/dist/vuex.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Vuex v0.8.2
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  (global.Vuex = factory());
	}(this, function () { 'use strict';
	
	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
	  };
	
	  var classCallCheck = function (instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  };
	
	  var createClass = function () {
	    function defineProperties(target, props) {
	      for (var i = 0; i < props.length; i++) {
	        var descriptor = props[i];
	        descriptor.enumerable = descriptor.enumerable || false;
	        descriptor.configurable = true;
	        if ("value" in descriptor) descriptor.writable = true;
	        Object.defineProperty(target, descriptor.key, descriptor);
	      }
	    }
	
	    return function (Constructor, protoProps, staticProps) {
	      if (protoProps) defineProperties(Constructor.prototype, protoProps);
	      if (staticProps) defineProperties(Constructor, staticProps);
	      return Constructor;
	    };
	  }();
	
	  var toConsumableArray = function (arr) {
	    if (Array.isArray(arr)) {
	      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
	
	      return arr2;
	    } else {
	      return Array.from(arr);
	    }
	  };
	
	  /**
	   * Merge an array of objects into one.
	   *
	   * @param {Array<Object>} arr
	   * @return {Object}
	   */
	
	  function mergeObjects(arr) {
	    return arr.reduce(function (prev, obj) {
	      Object.keys(obj).forEach(function (key) {
	        var existing = prev[key];
	        if (existing) {
	          // allow multiple mutation objects to contain duplicate
	          // handlers for the same mutation type
	          if (Array.isArray(existing)) {
	            existing.push(obj[key]);
	          } else {
	            prev[key] = [prev[key], obj[key]];
	          }
	        } else {
	          prev[key] = obj[key];
	        }
	      });
	      return prev;
	    }, {});
	  }
	
	  /**
	   * Deep clone an object. Faster than JSON.parse(JSON.stringify()).
	   *
	   * @param {*} obj
	   * @return {*}
	   */
	
	  function deepClone(obj) {
	    if (Array.isArray(obj)) {
	      return obj.map(deepClone);
	    } else if (obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	      var cloned = {};
	      var keys = Object.keys(obj);
	      for (var i = 0, l = keys.length; i < l; i++) {
	        var key = keys[i];
	        cloned[key] = deepClone(obj[key]);
	      }
	      return cloned;
	    } else {
	      return obj;
	    }
	  }
	
	  /**
	   * Hacks to get access to Vue internals.
	   * Maybe we should expose these...
	   */
	
	  var Watcher = void 0;
	  function getWatcher(vm) {
	    if (!Watcher) {
	      var noop = function noop() {};
	      var unwatch = vm.$watch(noop, noop);
	      Watcher = vm._watchers[0].constructor;
	      unwatch();
	    }
	    return Watcher;
	  }
	
	  var Dep = void 0;
	  function getDep(vm) {
	    if (!Dep) {
	      Dep = vm._data.__ob__.dep.constructor;
	    }
	    return Dep;
	  }
	
	  var hook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
	
	  var devtoolMiddleware = {
	    onInit: function onInit(state, store) {
	      if (!hook) return;
	      hook.emit('vuex:init', store);
	      hook.on('vuex:travel-to-state', function (targetState) {
	        store._dispatching = true;
	        store._vm.state = targetState;
	        store._dispatching = false;
	      });
	    },
	    onMutation: function onMutation(mutation, state) {
	      if (!hook) return;
	      hook.emit('vuex:mutation', mutation, state);
	    }
	  };
	
	  function override (Vue) {
	    var version = Number(Vue.version.split('.')[0]);
	
	    if (version >= 2) {
	      var usesInit = Vue.config._lifecycleHooks.indexOf('init') > -1;
	      Vue.mixin(usesInit ? { init: vuexInit } : { beforeCreate: vuexInit });
	    } else {
	      (function () {
	        // override init and inject vuex init procedure
	        // for 1.x backwards compatibility.
	        var _init = Vue.prototype._init;
	        Vue.prototype._init = function () {
	          var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	          options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;
	          _init.call(this, options);
	        };
	      })();
	    }
	
	    /**
	     * Vuex init hook, injected into each instances init hooks list.
	     */
	
	    function vuexInit() {
	      var options = this.$options;
	      var store = options.store;
	      var vuex = options.vuex;
	      // store injection
	
	      if (store) {
	        this.$store = store;
	      } else if (options.parent && options.parent.$store) {
	        this.$store = options.parent.$store;
	      }
	      // vuex option handling
	      if (vuex) {
	        if (!this.$store) {
	          console.warn('[vuex] store not injected. make sure to ' + 'provide the store option in your root component.');
	        }
	        var state = vuex.state;
	        var actions = vuex.actions;
	        var getters = vuex.getters;
	        // handle deprecated state option
	
	        if (state && !getters) {
	          console.warn('[vuex] vuex.state option will been deprecated in 1.0. ' + 'Use vuex.getters instead.');
	          getters = state;
	        }
	        // getters
	        if (getters) {
	          options.computed = options.computed || {};
	          for (var key in getters) {
	            defineVuexGetter(this, key, getters[key]);
	          }
	        }
	        // actions
	        if (actions) {
	          options.methods = options.methods || {};
	          for (var _key in actions) {
	            options.methods[_key] = makeBoundAction(this.$store, actions[_key], _key);
	          }
	        }
	      }
	    }
	
	    /**
	     * Setter for all getter properties.
	     */
	
	    function setter() {
	      throw new Error('vuex getter properties are read-only.');
	    }
	
	    /**
	     * Define a Vuex getter on an instance.
	     *
	     * @param {Vue} vm
	     * @param {String} key
	     * @param {Function} getter
	     */
	
	    function defineVuexGetter(vm, key, getter) {
	      if (typeof getter !== 'function') {
	        console.warn('[vuex] Getter bound to key \'vuex.getters.' + key + '\' is not a function.');
	      } else {
	        Object.defineProperty(vm, key, {
	          enumerable: true,
	          configurable: true,
	          get: makeComputedGetter(vm.$store, getter),
	          set: setter
	        });
	      }
	    }
	
	    /**
	     * Make a computed getter, using the same caching mechanism of computed
	     * properties. In addition, it is cached on the raw getter function using
	     * the store's unique cache id. This makes the same getter shared
	     * across all components use the same underlying watcher, and makes
	     * the getter evaluated only once during every flush.
	     *
	     * @param {Store} store
	     * @param {Function} getter
	     */
	
	    function makeComputedGetter(store, getter) {
	      var id = store._getterCacheId;
	
	      // cached
	      if (getter[id]) {
	        return getter[id];
	      }
	      var vm = store._vm;
	      var Watcher = getWatcher(vm);
	      var Dep = getDep(vm);
	      var watcher = new Watcher(vm, function (vm) {
	        return getter(vm.state);
	      }, null, { lazy: true });
	      var computedGetter = function computedGetter() {
	        if (watcher.dirty) {
	          watcher.evaluate();
	        }
	        if (Dep.target) {
	          watcher.depend();
	        }
	        return watcher.value;
	      };
	      getter[id] = computedGetter;
	      return computedGetter;
	    }
	
	    /**
	     * Make a bound-to-store version of a raw action function.
	     *
	     * @param {Store} store
	     * @param {Function} action
	     * @param {String} key
	     */
	
	    function makeBoundAction(store, action, key) {
	      if (typeof action !== 'function') {
	        console.warn('[vuex] Action bound to key \'vuex.actions.' + key + '\' is not a function.');
	      }
	      return function vuexBoundAction() {
	        for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
	          args[_key2] = arguments[_key2];
	        }
	
	        return action.call.apply(action, [this, store].concat(args));
	      };
	    }
	
	    // option merging
	    var merge = Vue.config.optionMergeStrategies.computed;
	    Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {
	      if (!toVal) return fromVal;
	      if (!fromVal) return toVal;
	      return {
	        getters: merge(toVal.getters, fromVal.getters),
	        state: merge(toVal.state, fromVal.state),
	        actions: merge(toVal.actions, fromVal.actions)
	      };
	    };
	  }
	
	  var Vue = void 0;
	  var uid = 0;
	
	  var Store = function () {
	
	    /**
	     * @param {Object} options
	     *        - {Object} state
	     *        - {Object} actions
	     *        - {Object} mutations
	     *        - {Array} middlewares
	     *        - {Boolean} strict
	     */
	
	    function Store() {
	      var _this = this;
	
	      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	      var _ref$state = _ref.state;
	      var state = _ref$state === undefined ? {} : _ref$state;
	      var _ref$mutations = _ref.mutations;
	      var mutations = _ref$mutations === undefined ? {} : _ref$mutations;
	      var _ref$modules = _ref.modules;
	      var modules = _ref$modules === undefined ? {} : _ref$modules;
	      var _ref$middlewares = _ref.middlewares;
	      var middlewares = _ref$middlewares === undefined ? [] : _ref$middlewares;
	      var _ref$strict = _ref.strict;
	      var strict = _ref$strict === undefined ? false : _ref$strict;
	      classCallCheck(this, Store);
	
	      this._getterCacheId = 'vuex_store_' + uid++;
	      this._dispatching = false;
	      this._rootMutations = this._mutations = mutations;
	      this._modules = modules;
	      // bind dispatch to self
	      var dispatch = this.dispatch;
	      this.dispatch = function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }
	
	        dispatch.apply(_this, args);
	      };
	      // use a Vue instance to store the state tree
	      // suppress warnings just in case the user has added
	      // some funky global mixins
	      if (!Vue) {
	        throw new Error('[vuex] must call Vue.use(Vuex) before creating a store instance.');
	      }
	      var silent = Vue.config.silent;
	      Vue.config.silent = true;
	      this._vm = new Vue({
	        data: {
	          state: state
	        }
	      });
	      Vue.config.silent = silent;
	      this._setupModuleState(state, modules);
	      this._setupModuleMutations(modules);
	      this._setupMiddlewares(middlewares, state);
	      // add extra warnings in strict mode
	      if (strict) {
	        this._setupMutationCheck();
	      }
	    }
	
	    /**
	     * Getter for the entire state tree.
	     * Read only.
	     *
	     * @return {Object}
	     */
	
	    createClass(Store, [{
	      key: 'dispatch',
	
	
	      /**
	       * Dispatch an action.
	       *
	       * @param {String} type
	       */
	
	      value: function dispatch(type) {
	        for (var _len2 = arguments.length, payload = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	          payload[_key2 - 1] = arguments[_key2];
	        }
	
	        var silent = false;
	        // compatibility for object actions, e.g. FSA
	        if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type.type && arguments.length === 1) {
	          payload = [type.payload];
	          if (type.silent) silent = true;
	          type = type.type;
	        }
	        var mutation = this._mutations[type];
	        var state = this.state;
	        if (mutation) {
	          this._dispatching = true;
	          // apply the mutation
	          if (Array.isArray(mutation)) {
	            mutation.forEach(function (m) {
	              return m.apply(undefined, [state].concat(toConsumableArray(payload)));
	            });
	          } else {
	            mutation.apply(undefined, [state].concat(toConsumableArray(payload)));
	          }
	          this._dispatching = false;
	          if (!silent) this._applyMiddlewares(type, payload);
	        } else {
	          console.warn('[vuex] Unknown mutation: ' + type);
	        }
	      }
	
	      /**
	       * Watch state changes on the store.
	       * Same API as Vue's $watch, except when watching a function,
	       * the function gets the state as the first argument.
	       *
	       * @param {Function} fn
	       * @param {Function} cb
	       * @param {Object} [options]
	       */
	
	    }, {
	      key: 'watch',
	      value: function watch(fn, cb, options) {
	        var _this2 = this;
	
	        if (typeof fn !== 'function') {
	          console.error('Vuex store.watch only accepts function.');
	          return;
	        }
	        return this._vm.$watch(function () {
	          return fn(_this2.state);
	        }, cb, options);
	      }
	
	      /**
	       * Hot update mutations & modules.
	       *
	       * @param {Object} options
	       *        - {Object} [mutations]
	       *        - {Object} [modules]
	       */
	
	    }, {
	      key: 'hotUpdate',
	      value: function hotUpdate() {
	        var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        var mutations = _ref2.mutations;
	        var modules = _ref2.modules;
	
	        this._rootMutations = this._mutations = mutations || this._rootMutations;
	        this._setupModuleMutations(modules || this._modules);
	      }
	
	      /**
	       * Attach sub state tree of each module to the root tree.
	       *
	       * @param {Object} state
	       * @param {Object} modules
	       */
	
	    }, {
	      key: '_setupModuleState',
	      value: function _setupModuleState(state, modules) {
	        Object.keys(modules).forEach(function (key) {
	          Vue.set(state, key, modules[key].state || {});
	        });
	      }
	
	      /**
	       * Bind mutations for each module to its sub tree and
	       * merge them all into one final mutations map.
	       *
	       * @param {Object} updatedModules
	       */
	
	    }, {
	      key: '_setupModuleMutations',
	      value: function _setupModuleMutations(updatedModules) {
	        var modules = this._modules;
	        var allMutations = [this._rootMutations];
	        Object.keys(updatedModules).forEach(function (key) {
	          modules[key] = updatedModules[key];
	        });
	        Object.keys(modules).forEach(function (key) {
	          var module = modules[key];
	          if (!module || !module.mutations) return;
	          // bind mutations to sub state tree
	          var mutations = {};
	          Object.keys(module.mutations).forEach(function (name) {
	            var original = module.mutations[name];
	            mutations[name] = function (state) {
	              for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	                args[_key3 - 1] = arguments[_key3];
	              }
	
	              original.apply(undefined, [state[key]].concat(args));
	            };
	          });
	          allMutations.push(mutations);
	        });
	        this._mutations = mergeObjects(allMutations);
	      }
	
	      /**
	       * Setup mutation check: if the vuex instance's state is mutated
	       * outside of a mutation handler, we throw en error. This effectively
	       * enforces all mutations to the state to be trackable and hot-reloadble.
	       * However, this comes at a run time cost since we are doing a deep
	       * watch on the entire state tree, so it is only enalbed with the
	       * strict option is set to true.
	       */
	
	    }, {
	      key: '_setupMutationCheck',
	      value: function _setupMutationCheck() {
	        var _this3 = this;
	
	        var Watcher = getWatcher(this._vm);
	        /* eslint-disable no-new */
	        new Watcher(this._vm, 'state', function () {
	          if (!_this3._dispatching) {
	            throw new Error('[vuex] Do not mutate vuex store state outside mutation handlers.');
	          }
	        }, { deep: true, sync: true });
	        /* eslint-enable no-new */
	      }
	
	      /**
	       * Setup the middlewares. The devtools middleware is always
	       * included, since it does nothing if no devtool is detected.
	       *
	       * A middleware can demand the state it receives to be
	       * "snapshots", i.e. deep clones of the actual state tree.
	       *
	       * @param {Array} middlewares
	       * @param {Object} state
	       */
	
	    }, {
	      key: '_setupMiddlewares',
	      value: function _setupMiddlewares(middlewares, state) {
	        var _this4 = this;
	
	        this._middlewares = [devtoolMiddleware].concat(middlewares);
	        this._needSnapshots = middlewares.some(function (m) {
	          return m.snapshot;
	        });
	        if (this._needSnapshots) {
	          console.log('[vuex] One or more of your middlewares are taking state snapshots ' + 'for each mutation. Make sure to use them only during development.');
	        }
	        var initialSnapshot = this._prevSnapshot = this._needSnapshots ? deepClone(state) : null;
	        // call init hooks
	        this._middlewares.forEach(function (m) {
	          if (m.onInit) {
	            m.onInit(m.snapshot ? initialSnapshot : state, _this4);
	          }
	        });
	      }
	
	      /**
	       * Apply the middlewares on a given mutation.
	       *
	       * @param {String} type
	       * @param {Array} payload
	       */
	
	    }, {
	      key: '_applyMiddlewares',
	      value: function _applyMiddlewares(type, payload) {
	        var _this5 = this;
	
	        var state = this.state;
	        var prevSnapshot = this._prevSnapshot;
	        var snapshot = void 0,
	            clonedPayload = void 0;
	        if (this._needSnapshots) {
	          snapshot = this._prevSnapshot = deepClone(state);
	          clonedPayload = deepClone(payload);
	        }
	        this._middlewares.forEach(function (m) {
	          if (m.onMutation) {
	            if (m.snapshot) {
	              m.onMutation({ type: type, payload: clonedPayload }, snapshot, prevSnapshot, _this5);
	            } else {
	              m.onMutation({ type: type, payload: payload }, state, _this5);
	            }
	          }
	        });
	      }
	    }, {
	      key: 'state',
	      get: function get() {
	        return this._vm.state;
	      },
	      set: function set(v) {
	        throw new Error('[vuex] Vuex root state is read only.');
	      }
	    }]);
	    return Store;
	  }();
	
	  function install(_Vue) {
	    if (Vue) {
	      console.warn('[vuex] already installed. Vue.use(Vuex) should be called only once.');
	      return;
	    }
	    Vue = _Vue;
	    override(Vue);
	  }
	
	  // auto install in dist mode
	  if (typeof window !== 'undefined' && window.Vue) {
	    install(window.Vue);
	  }
	
	  var index = {
	    Store: Store,
	    install: install
	  };
	
	  return index;
	
	}));

/***/ },
/* 150 */
/*!*****************************!*\
  !*** ./src/vuex/actions.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.cleanPlayList = exports.removeFromPlayList = exports.togglePopList = exports.updateKeyword = exports.nextSong = exports.lastSong = exports.switchRotate = exports.switchMode = exports.playerStatus = exports.switchPlayerStatus = exports.progress = exports.addPlayList = exports.switchSong = exports.updateTopId = exports.toggleSpinner = exports.updateTitle = undefined;
	
	var _rock = __webpack_require__(/*! ../js/rock */ 2);
	
	var _rock2 = _interopRequireDefault(_rock);
	
	var _jquery = __webpack_require__(/*! jquery */ 3);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _store = __webpack_require__(/*! ../vuex/store */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * 更新标题 和按钮
	 * @param dispatch
	 * @param title 标题
	 * @param showBack 是否显示返回按钮
	 * @param icon 右侧按钮图标
	 */
	var updateTitle = exports.updateTitle = function updateTitle(_ref, title, showBack, icon) {
	    var dispatch = _ref.dispatch;
	
	    document.title = title;
	    dispatch('UPDATE_TITLE', title, showBack, icon);
	};
	
	/**
	 * 显示或隐藏 滚动条
	 * @param dispatch
	 */
	var toggleSpinner = exports.toggleSpinner = function toggleSpinner(_ref2) {
	    var dispatch = _ref2.dispatch;
	
	    dispatch('TOGGLE_SPINNER');
	};
	/**
	 * 排行榜 id
	 * @param dispatch
	 * @param id
	 */
	var updateTopId = exports.updateTopId = function updateTopId(_ref3, id) {
	    var dispatch = _ref3.dispatch;
	
	    dispatch('UPDATE_TOP_ID', id);
	};
	/**
	 * 切换播放的歌曲
	 * @param dispatch
	 * @param obj
	 * @param list
	 * @param current
	 */
	var switchSong = exports.switchSong = function switchSong(_ref4, obj, list, current) {
	    var dispatch = _ref4.dispatch;
	
	    if (obj.songid != current.songid) {
	        dispatch('PLAYER_STATUS');
	        dispatch('SWITCH_ROTATE', false);
	        dispatch('SWITCH_SONG', obj);
	        var exist = false;
	        for (var i = 0; i < list.length; i++) {
	            if (list[i].songid == obj.songid) {
	                exist = true;
	                break;
	            }
	        }
	        if (!exist) {
	            dispatch('ADD_PLAY_LIST', obj);
	        }
	    }
	};
	/**
	 * 添加到播放列表
	 * @param dispatch
	 * @param obj
	 */
	var addPlayList = exports.addPlayList = function addPlayList(_ref5, obj) {
	    var dispatch = _ref5.dispatch;
	
	    dispatch('ADD_PLAY_LIST', obj);
	};
	/**
	 * 更新进度条
	 * @param dispatch
	 * @param total
	 * @param current
	 */
	var progress = exports.progress = function progress(_ref6, total, current) {
	    var dispatch = _ref6.dispatch;
	
	    dispatch('UPDATE_PROGRESS', total, current);
	};
	/**
	 * 切换播放状态
	 * @param dispatch
	 */
	var switchPlayerStatus = exports.switchPlayerStatus = function switchPlayerStatus(_ref7) {
	    var dispatch = _ref7.dispatch;
	
	    dispatch('SWITCH_PLAYER_STATUS');
	};
	/**
	 * 将播放状态置为true
	 * @param dispatch
	 */
	var playerStatus = exports.playerStatus = function playerStatus(_ref8) {
	    var dispatch = _ref8.dispatch;
	
	    dispatch('PLAYER_STATUS');
	};
	/**
	 * 切换播放模式
	 * @param dispatch
	 */
	var switchMode = exports.switchMode = function switchMode(_ref9) {
	    var dispatch = _ref9.dispatch;
	
	    dispatch('SWITCH_MODE');
	};
	/**
	 * 重新开始或停止动画
	 * @param dispatch
	 * @param isRotate
	 */
	var switchRotate = exports.switchRotate = function switchRotate(_ref10, isRotate) {
	    var dispatch = _ref10.dispatch;
	
	    dispatch('SWITCH_ROTATE', isRotate);
	};
	/**
	 * 上一首
	 * @param dispatch
	 */
	var lastSong = exports.lastSong = function lastSong(_ref11) {
	    var dispatch = _ref11.dispatch;
	
	    dispatch('SWITCH_ROTATE', false);
	    dispatch('LAST_SONG');
	};
	/**
	 * 下一首
	 * @param dispatch
	 */
	var nextSong = exports.nextSong = function nextSong(_ref12) {
	    var dispatch = _ref12.dispatch;
	
	    dispatch('NEXT_SONG');
	};
	
	/**
	 * 下一首
	 * @param dispatch
	 * @param keyword
	 */
	var updateKeyword = exports.updateKeyword = function updateKeyword(_ref13, keyword) {
	    var dispatch = _ref13.dispatch;
	
	    dispatch('UPDATE_KEYWORD', keyword);
	};
	
	/**
	 * 切换播放列表
	 * @param dispatch
	 * @param pop
	 */
	var togglePopList = exports.togglePopList = function togglePopList(_ref14, pop) {
	    var dispatch = _ref14.dispatch;
	
	    dispatch('UPDATE_POP_LIST', pop);
	};
	/**
	 * 从播放列表删除
	 * @param dispatch
	 * @param song
	 */
	var removeFromPlayList = exports.removeFromPlayList = function removeFromPlayList(_ref15, song) {
	    var dispatch = _ref15.dispatch;
	
	    dispatch('REMOVE_FROM_PLAY_LIST', song);
	};
	/**
	 * 清空播放列表
	 * @param dispatch
	 * @param song
	 */
	var cleanPlayList = exports.cleanPlayList = function cleanPlayList(_ref16, song) {
	    var dispatch = _ref16.dispatch;
	
	    dispatch('CLEAN_PLAY_LIST', song);
	};

/***/ },
/* 151 */
/*!*********************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-a1c77c9e!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/titleBar.vue ***!
  \*********************************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n\n\n\n<div class=\"title-bar\" _v-a1c77c9e=\"\">\n    <div class=\"btn-div-left left\" _v-a1c77c9e=\"\">\n        <span id=\"backBtn\" class=\"btn left mui-icon-undo\" @click=\"back()\" :class=\"{'hide':!titleBar.isShowBack}\" _v-a1c77c9e=\"\"></span>\n    </div>\n    <span class=\"title\" id=\"title\" :class=\"{'hide': titleBar.icon=='sBar'}\" _v-a1c77c9e=\"\">{{titleBar.title}}</span>\n    <form class=\"search\" action=\"javascrpit:void(0)\" @submit.prevent=\"actionClick\" :class=\"{'hide': titleBar.icon!='sBar'}\" _v-a1c77c9e=\"\">\n        <input type=\"search\" placeholder=\"搜索\" id=\"keyword\" _v-a1c77c9e=\"\">\n    </form>\n    <div class=\"btn-div-right right\" _v-a1c77c9e=\"\">\n    <span id=\"actionBtn\" class=\"btn right\" :class=\"{'hide': titleBar.icon=='hide',\n            'mui-icon-checkmarkempty': titleBar.icon=='complete',\n            'mui-icon-search ' : titleBar.icon=='sBar',\n            'mui-icon-compose': titleBar.icon=='change',\n            'mui-icon-plusempty': titleBar.icon=='add',\n            'mui-icon-search' : titleBar.icon=='search'}\" @click=\"actionClick\" _v-a1c77c9e=\"\"></span>\n    </div>\n</div>\n<div class=\"title-bar-position\" _v-a1c77c9e=\"\"></div>\n";

/***/ },
/* 152 */
/*!************************************!*\
  !*** ./src/components/spinner.vue ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-5cfa731a&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./spinner.vue */ 153)
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-5cfa731a!./../../~/vue-loader/lib/selector.js?type=template&index=0!./spinner.vue */ 155)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./spinner.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 153 */
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-5cfa731a&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/spinner.vue ***!
  \****************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-5cfa731a&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./spinner.vue */ 154);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-5cfa731a&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./spinner.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-5cfa731a&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./spinner.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 154 */
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-5cfa731a&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/spinner.vue ***!
  \*******************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, "\n.spinner-bg[_v-5cfa731a] {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    top: 0;\n    left: 0;\n    background: rgba(0, 0, 0, 0.1);\n    z-index: 999999;\n}\n\n.windows8[_v-5cfa731a] {\n    position: absolute;\n    width: 0.3rem;\n    height: 0.3rem;\n    top: 45%;\n    left: 50%;\n    margin-left: -0.3rem;\n}\n\n.windows8 .wBall[_v-5cfa731a] {\n    position: absolute;\n    width: 0.6rem;\n    height: 0.6rem;\n    opacity: 0;\n    transform: rotate(225deg);\n    -o-transform: rotate(225deg);\n    -ms-transform: rotate(225deg);\n    -webkit-transform: rotate(225deg);\n    -moz-transform: rotate(225deg);\n    animation: orbit 6.96s infinite;\n    -o-animation: orbit 6.96s infinite;\n    -ms-animation: orbit 6.96s infinite;\n    -webkit-animation: orbit 6.96s infinite;\n    -moz-animation: orbit 6.96s infinite;\n}\n\n.windows8 .wBall .wInnerBall[_v-5cfa731a] {\n    position: absolute;\n    width: 0.08rem;\n    height: 0.08rem;\n    background: #2fcdfe;\n    left: 0px;\n    top: 0px;\n    border-radius: 100%;\n}\n\n.windows8 #wBall_1[_v-5cfa731a] {\n    animation-delay: 1.52s;\n    -o-animation-delay: 1.52s;\n    -ms-animation-delay: 1.52s;\n    -webkit-animation-delay: 1.52s;\n    -moz-animation-delay: 1.52s;\n}\n\n.windows8 #wBall_2[_v-5cfa731a] {\n    animation-delay: 0.3s;\n    -o-animation-delay: 0.3s;\n    -ms-animation-delay: 0.3s;\n    -webkit-animation-delay: 0.3s;\n    -moz-animation-delay: 0.3s;\n}\n\n.windows8 #wBall_3[_v-5cfa731a] {\n    animation-delay: 0.61s;\n    -o-animation-delay: 0.61s;\n    -ms-animation-delay: 0.61s;\n    -webkit-animation-delay: 0.61s;\n    -moz-animation-delay: 0.61s;\n}\n\n.windows8 #wBall_4[_v-5cfa731a] {\n    animation-delay: 0.91s;\n    -o-animation-delay: 0.91s;\n    -ms-animation-delay: 0.91s;\n    -webkit-animation-delay: 0.91s;\n    -moz-animation-delay: 0.91s;\n}\n\n.windows8 #wBall_5[_v-5cfa731a] {\n    animation-delay: 1.22s;\n    -o-animation-delay: 1.22s;\n    -ms-animation-delay: 1.22s;\n    -webkit-animation-delay: 1.22s;\n    -moz-animation-delay: 1.22s;\n}\n\n@keyframes orbit {\n    0% {\n        opacity: 1;\n        z-index: 99;\n        -webkit-transform: rotate(180deg);\n                transform: rotate(180deg);\n        -webkit-animation-timing-function: ease-out;\n                animation-timing-function: ease-out;\n    }\n\n    7% {\n        opacity: 1;\n        -webkit-transform: rotate(300deg);\n                transform: rotate(300deg);\n        -webkit-animation-timing-function: linear;\n                animation-timing-function: linear;\n        origin: 0%;\n    }\n\n    30% {\n        opacity: 1;\n        -webkit-transform: rotate(410deg);\n                transform: rotate(410deg);\n        -webkit-animation-timing-function: ease-in-out;\n                animation-timing-function: ease-in-out;\n        origin: 7%;\n    }\n\n    39% {\n        opacity: 1;\n        -webkit-transform: rotate(645deg);\n                transform: rotate(645deg);\n        -webkit-animation-timing-function: linear;\n                animation-timing-function: linear;\n        origin: 30%;\n    }\n\n    70% {\n        opacity: 1;\n        -webkit-transform: rotate(770deg);\n                transform: rotate(770deg);\n        -webkit-animation-timing-function: ease-out;\n                animation-timing-function: ease-out;\n        origin: 39%;\n    }\n\n    75% {\n        opacity: 1;\n        -webkit-transform: rotate(900deg);\n                transform: rotate(900deg);\n        -webkit-animation-timing-function: ease-out;\n                animation-timing-function: ease-out;\n        origin: 70%;\n    }\n\n    76% {\n        opacity: 0;\n        -webkit-transform: rotate(900deg);\n                transform: rotate(900deg);\n    }\n\n    100% {\n        opacity: 0;\n        -webkit-transform: rotate(900deg);\n                transform: rotate(900deg);\n    }\n}\n\n@-webkit-keyframes orbit {\n    0% {\n        opacity: 1;\n        z-index: 99;\n        -webkit-transform: rotate(180deg);\n        -webkit-animation-timing-function: ease-out;\n    }\n\n    7% {\n        opacity: 1;\n        -webkit-transform: rotate(300deg);\n        -webkit-animation-timing-function: linear;\n        -webkit-origin: 0%;\n    }\n\n    30% {\n        opacity: 1;\n        -webkit-transform: rotate(410deg);\n        -webkit-animation-timing-function: ease-in-out;\n        -webkit-origin: 7%;\n    }\n\n    39% {\n        opacity: 1;\n        -webkit-transform: rotate(645deg);\n        -webkit-animation-timing-function: linear;\n        -webkit-origin: 30%;\n    }\n\n    70% {\n        opacity: 1;\n        -webkit-transform: rotate(770deg);\n        -webkit-animation-timing-function: ease-out;\n        -webkit-origin: 39%;\n    }\n\n    75% {\n        opacity: 1;\n        -webkit-transform: rotate(900deg);\n        -webkit-animation-timing-function: ease-out;\n        -webkit-origin: 70%;\n    }\n\n    76% {\n        opacity: 0;\n        -webkit-transform: rotate(900deg);\n    }\n\n    100% {\n        opacity: 0;\n        -webkit-transform: rotate(900deg);\n    }\n}\n\n", "", {"version":3,"sources":["/./src/components/spinner.vue?16b8592a"],"names":[],"mappings":";AACA;IACA,gBAAA;IACA,YAAA;IACA,aAAA;IACA,UAAA;IACA,OAAA;IACA,QAAA;IACA,+BAAA;IACA,gBAAA;CACA;;AAEA;IACA,mBAAA;IACA,cAAA;IACA,eAAA;IACA,SAAA;IACA,UAAA;IACA,qBAAA;CACA;;AAEA;IACA,mBAAA;IACA,cAAA;IACA,eAAA;IACA,WAAA;IACA,0BAAA;IACA,6BAAA;IACA,8BAAA;IACA,kCAAA;IACA,+BAAA;IACA,gCAAA;IACA,mCAAA;IACA,oCAAA;IACA,wCAAA;IACA,qCAAA;CACA;;AAEA;IACA,mBAAA;IACA,eAAA;IACA,gBAAA;IACA,oBAAA;IACA,UAAA;IACA,SAAA;IACA,oBAAA;CACA;;AAEA;IACA,uBAAA;IACA,0BAAA;IACA,2BAAA;IACA,+BAAA;IACA,4BAAA;CACA;;AAEA;IACA,sBAAA;IACA,yBAAA;IACA,0BAAA;IACA,8BAAA;IACA,2BAAA;CACA;;AAEA;IACA,uBAAA;IACA,0BAAA;IACA,2BAAA;IACA,+BAAA;IACA,4BAAA;CACA;;AAEA;IACA,uBAAA;IACA,0BAAA;IACA,2BAAA;IACA,+BAAA;IACA,4BAAA;CACA;;AAEA;IACA,uBAAA;IACA,0BAAA;IACA,2BAAA;IACA,+BAAA;IACA,4BAAA;CACA;;AAEA;IACA;QACA,WAAA;QACA,YAAA;QACA,kCAAA;gBAAA,0BAAA;QACA,4CAAA;gBAAA,oCAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;gBAAA,0BAAA;QACA,0CAAA;gBAAA,kCAAA;QACA,WAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;gBAAA,0BAAA;QACA,+CAAA;gBAAA,uCAAA;QACA,WAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;gBAAA,0BAAA;QACA,0CAAA;gBAAA,kCAAA;QACA,YAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;gBAAA,0BAAA;QACA,4CAAA;gBAAA,oCAAA;QACA,YAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;gBAAA,0BAAA;QACA,4CAAA;gBAAA,oCAAA;QACA,YAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;gBAAA,0BAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;gBAAA,0BAAA;KACA;CACA;;AA8GA;IACA;QACA,WAAA;QACA,YAAA;QACA,kCAAA;QACA,4CAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;QACA,0CAAA;QACA,mBAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;QACA,+CAAA;QACA,mBAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;QACA,0CAAA;QACA,oBAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;QACA,4CAAA;QACA,oBAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;QACA,4CAAA;QACA,oBAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;KACA;;IAEA;QACA,WAAA;QACA,kCAAA;KACA;CACA","file":"spinner.vue","sourcesContent":["<style scoped>\r\n    .spinner-bg {\r\n        position: fixed;\r\n        width: 100%;\r\n        height: 100%;\r\n        margin: 0;\r\n        top: 0;\r\n        left: 0;\r\n        background: rgba(0, 0, 0, 0.1);\r\n        z-index: 999999;\r\n    }\r\n\r\n    .windows8 {\r\n        position: absolute;\r\n        width: 0.3rem;\r\n        height: 0.3rem;\r\n        top: 45%;\r\n        left: 50%;\r\n        margin-left: -0.3rem;\r\n    }\r\n\r\n    .windows8 .wBall {\r\n        position: absolute;\r\n        width: 0.6rem;\r\n        height: 0.6rem;\r\n        opacity: 0;\r\n        transform: rotate(225deg);\r\n        -o-transform: rotate(225deg);\r\n        -ms-transform: rotate(225deg);\r\n        -webkit-transform: rotate(225deg);\r\n        -moz-transform: rotate(225deg);\r\n        animation: orbit 6.96s infinite;\r\n        -o-animation: orbit 6.96s infinite;\r\n        -ms-animation: orbit 6.96s infinite;\r\n        -webkit-animation: orbit 6.96s infinite;\r\n        -moz-animation: orbit 6.96s infinite;\r\n    }\r\n\r\n    .windows8 .wBall .wInnerBall {\r\n        position: absolute;\r\n        width: 0.08rem;\r\n        height: 0.08rem;\r\n        background: #2fcdfe;\r\n        left: 0px;\r\n        top: 0px;\r\n        border-radius: 100%;\r\n    }\r\n\r\n    .windows8 #wBall_1 {\r\n        animation-delay: 1.52s;\r\n        -o-animation-delay: 1.52s;\r\n        -ms-animation-delay: 1.52s;\r\n        -webkit-animation-delay: 1.52s;\r\n        -moz-animation-delay: 1.52s;\r\n    }\r\n\r\n    .windows8 #wBall_2 {\r\n        animation-delay: 0.3s;\r\n        -o-animation-delay: 0.3s;\r\n        -ms-animation-delay: 0.3s;\r\n        -webkit-animation-delay: 0.3s;\r\n        -moz-animation-delay: 0.3s;\r\n    }\r\n\r\n    .windows8 #wBall_3 {\r\n        animation-delay: 0.61s;\r\n        -o-animation-delay: 0.61s;\r\n        -ms-animation-delay: 0.61s;\r\n        -webkit-animation-delay: 0.61s;\r\n        -moz-animation-delay: 0.61s;\r\n    }\r\n\r\n    .windows8 #wBall_4 {\r\n        animation-delay: 0.91s;\r\n        -o-animation-delay: 0.91s;\r\n        -ms-animation-delay: 0.91s;\r\n        -webkit-animation-delay: 0.91s;\r\n        -moz-animation-delay: 0.91s;\r\n    }\r\n\r\n    .windows8 #wBall_5 {\r\n        animation-delay: 1.22s;\r\n        -o-animation-delay: 1.22s;\r\n        -ms-animation-delay: 1.22s;\r\n        -webkit-animation-delay: 1.22s;\r\n        -moz-animation-delay: 1.22s;\r\n    }\r\n\r\n    @keyframes orbit {\r\n        0% {\r\n            opacity: 1;\r\n            z-index: 99;\r\n            transform: rotate(180deg);\r\n            animation-timing-function: ease-out;\r\n        }\r\n\r\n        7% {\r\n            opacity: 1;\r\n            transform: rotate(300deg);\r\n            animation-timing-function: linear;\r\n            origin: 0%;\r\n        }\r\n\r\n        30% {\r\n            opacity: 1;\r\n            transform: rotate(410deg);\r\n            animation-timing-function: ease-in-out;\r\n            origin: 7%;\r\n        }\r\n\r\n        39% {\r\n            opacity: 1;\r\n            transform: rotate(645deg);\r\n            animation-timing-function: linear;\r\n            origin: 30%;\r\n        }\r\n\r\n        70% {\r\n            opacity: 1;\r\n            transform: rotate(770deg);\r\n            animation-timing-function: ease-out;\r\n            origin: 39%;\r\n        }\r\n\r\n        75% {\r\n            opacity: 1;\r\n            transform: rotate(900deg);\r\n            animation-timing-function: ease-out;\r\n            origin: 70%;\r\n        }\r\n\r\n        76% {\r\n            opacity: 0;\r\n            transform: rotate(900deg);\r\n        }\r\n\r\n        100% {\r\n            opacity: 0;\r\n            transform: rotate(900deg);\r\n        }\r\n    }\r\n\r\n    @-o-keyframes orbit {\r\n        0% {\r\n            opacity: 1;\r\n            z-index: 99;\r\n            -o-transform: rotate(180deg);\r\n            -o-animation-timing-function: ease-out;\r\n        }\r\n\r\n        7% {\r\n            opacity: 1;\r\n            -o-transform: rotate(300deg);\r\n            -o-animation-timing-function: linear;\r\n            -o-origin: 0%;\r\n        }\r\n\r\n        30% {\r\n            opacity: 1;\r\n            -o-transform: rotate(410deg);\r\n            -o-animation-timing-function: ease-in-out;\r\n            -o-origin: 7%;\r\n        }\r\n\r\n        39% {\r\n            opacity: 1;\r\n            -o-transform: rotate(645deg);\r\n            -o-animation-timing-function: linear;\r\n            -o-origin: 30%;\r\n        }\r\n\r\n        70% {\r\n            opacity: 1;\r\n            -o-transform: rotate(770deg);\r\n            -o-animation-timing-function: ease-out;\r\n            -o-origin: 39%;\r\n        }\r\n\r\n        75% {\r\n            opacity: 1;\r\n            -o-transform: rotate(900deg);\r\n            -o-animation-timing-function: ease-out;\r\n            -o-origin: 70%;\r\n        }\r\n\r\n        76% {\r\n            opacity: 0;\r\n            -o-transform: rotate(900deg);\r\n        }\r\n\r\n        100% {\r\n            opacity: 0;\r\n            -o-transform: rotate(900deg);\r\n        }\r\n    }\r\n\r\n    @-ms-keyframes orbit {\r\n        0% {\r\n            opacity: 1;\r\n            z-index: 99;\r\n            -ms-transform: rotate(180deg);\r\n            -ms-animation-timing-function: ease-out;\r\n        }\r\n\r\n        7% {\r\n            opacity: 1;\r\n            -ms-transform: rotate(300deg);\r\n            -ms-animation-timing-function: linear;\r\n            -ms-origin: 0%;\r\n        }\r\n\r\n        30% {\r\n            opacity: 1;\r\n            -ms-transform: rotate(410deg);\r\n            -ms-animation-timing-function: ease-in-out;\r\n            -ms-origin: 7%;\r\n        }\r\n\r\n        39% {\r\n            opacity: 1;\r\n            -ms-transform: rotate(645deg);\r\n            -ms-animation-timing-function: linear;\r\n            -ms-origin: 30%;\r\n        }\r\n\r\n        70% {\r\n            opacity: 1;\r\n            -ms-transform: rotate(770deg);\r\n            -ms-animation-timing-function: ease-out;\r\n            -ms-origin: 39%;\r\n        }\r\n\r\n        75% {\r\n            opacity: 1;\r\n            -ms-transform: rotate(900deg);\r\n            -ms-animation-timing-function: ease-out;\r\n            -ms-origin: 70%;\r\n        }\r\n\r\n        76% {\r\n            opacity: 0;\r\n            -ms-transform: rotate(900deg);\r\n        }\r\n\r\n        100% {\r\n            opacity: 0;\r\n            -ms-transform: rotate(900deg);\r\n        }\r\n    }\r\n\r\n    @-webkit-keyframes orbit {\r\n        0% {\r\n            opacity: 1;\r\n            z-index: 99;\r\n            -webkit-transform: rotate(180deg);\r\n            -webkit-animation-timing-function: ease-out;\r\n        }\r\n\r\n        7% {\r\n            opacity: 1;\r\n            -webkit-transform: rotate(300deg);\r\n            -webkit-animation-timing-function: linear;\r\n            -webkit-origin: 0%;\r\n        }\r\n\r\n        30% {\r\n            opacity: 1;\r\n            -webkit-transform: rotate(410deg);\r\n            -webkit-animation-timing-function: ease-in-out;\r\n            -webkit-origin: 7%;\r\n        }\r\n\r\n        39% {\r\n            opacity: 1;\r\n            -webkit-transform: rotate(645deg);\r\n            -webkit-animation-timing-function: linear;\r\n            -webkit-origin: 30%;\r\n        }\r\n\r\n        70% {\r\n            opacity: 1;\r\n            -webkit-transform: rotate(770deg);\r\n            -webkit-animation-timing-function: ease-out;\r\n            -webkit-origin: 39%;\r\n        }\r\n\r\n        75% {\r\n            opacity: 1;\r\n            -webkit-transform: rotate(900deg);\r\n            -webkit-animation-timing-function: ease-out;\r\n            -webkit-origin: 70%;\r\n        }\r\n\r\n        76% {\r\n            opacity: 0;\r\n            -webkit-transform: rotate(900deg);\r\n        }\r\n\r\n        100% {\r\n            opacity: 0;\r\n            -webkit-transform: rotate(900deg);\r\n        }\r\n    }\r\n\r\n    @-moz-keyframes orbit {\r\n        0% {\r\n            opacity: 1;\r\n            z-index: 99;\r\n            -moz-transform: rotate(180deg);\r\n            -moz-animation-timing-function: ease-out;\r\n        }\r\n\r\n        7% {\r\n            opacity: 1;\r\n            -moz-transform: rotate(300deg);\r\n            -moz-animation-timing-function: linear;\r\n            -moz-origin: 0%;\r\n        }\r\n\r\n        30% {\r\n            opacity: 1;\r\n            -moz-transform: rotate(410deg);\r\n            -moz-animation-timing-function: ease-in-out;\r\n            -moz-origin: 7%;\r\n        }\r\n\r\n        39% {\r\n            opacity: 1;\r\n            -moz-transform: rotate(645deg);\r\n            -moz-animation-timing-function: linear;\r\n            -moz-origin: 30%;\r\n        }\r\n\r\n        70% {\r\n            opacity: 1;\r\n            -moz-transform: rotate(770deg);\r\n            -moz-animation-timing-function: ease-out;\r\n            -moz-origin: 39%;\r\n        }\r\n\r\n        75% {\r\n            opacity: 1;\r\n            -moz-transform: rotate(900deg);\r\n            -moz-animation-timing-function: ease-out;\r\n            -moz-origin: 70%;\r\n        }\r\n\r\n        76% {\r\n            opacity: 0;\r\n            -moz-transform: rotate(900deg);\r\n        }\r\n\r\n        100% {\r\n            opacity: 0;\r\n            -moz-transform: rotate(900deg);\r\n        }\r\n    }\r\n\r\n</style>\r\n\r\n<template>\r\n    <div class=\"spinner-bg\">\r\n        <div class=\"windows8\">\r\n            <div class=\"wBall\" id=\"wBall_1\">\r\n                <div class=\"wInnerBall\"></div>\r\n            </div>\r\n            <div class=\"wBall\" id=\"wBall_2\">\r\n                <div class=\"wInnerBall\"></div>\r\n            </div>\r\n            <div class=\"wBall\" id=\"wBall_3\">\r\n                <div class=\"wInnerBall\"></div>\r\n            </div>\r\n            <div class=\"wBall\" id=\"wBall_4\">\r\n                <div class=\"wInnerBall\"></div>\r\n            </div>\r\n            <div class=\"wBall\" id=\"wBall_5\">\r\n                <div class=\"wInnerBall\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 155 */
/*!********************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-5cfa731a!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/spinner.vue ***!
  \********************************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"spinner-bg\" _v-5cfa731a=\"\">\n    <div class=\"windows8\" _v-5cfa731a=\"\">\n        <div class=\"wBall\" id=\"wBall_1\" _v-5cfa731a=\"\">\n            <div class=\"wInnerBall\" _v-5cfa731a=\"\"></div>\n        </div>\n        <div class=\"wBall\" id=\"wBall_2\" _v-5cfa731a=\"\">\n            <div class=\"wInnerBall\" _v-5cfa731a=\"\"></div>\n        </div>\n        <div class=\"wBall\" id=\"wBall_3\" _v-5cfa731a=\"\">\n            <div class=\"wInnerBall\" _v-5cfa731a=\"\"></div>\n        </div>\n        <div class=\"wBall\" id=\"wBall_4\" _v-5cfa731a=\"\">\n            <div class=\"wInnerBall\" _v-5cfa731a=\"\"></div>\n        </div>\n        <div class=\"wBall\" id=\"wBall_5\" _v-5cfa731a=\"\">\n            <div class=\"wInnerBall\" _v-5cfa731a=\"\"></div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 156 */
/*!************************************!*\
  !*** ./src/components/playBar.vue ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-105a64ce&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./playBar.vue */ 157)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./playBar.vue */ 161)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\playBar.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-105a64ce!./../../~/vue-loader/lib/selector.js?type=template&index=0!./playBar.vue */ 162)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./playBar.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 157 */
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-105a64ce&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/playBar.vue ***!
  \****************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-105a64ce&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./playBar.vue */ 158);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-105a64ce&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./playBar.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-105a64ce&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./playBar.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 158 */
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-105a64ce&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/playBar.vue ***!
  \*******************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/playBar.css */ 159), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"playBar.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 159 */
/*!*****************************************************************!*\
  !*** ./~/css-loader?sourceMap!./src/components/css/playBar.css ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, ".play-bar {\r\n  height: 1.4rem;\r\n  width: 100%;\r\n  position: relative;\r\n  z-index: 999990; }\r\n  .play-bar .cycle {\r\n    width: 1.2rem;\r\n    height: 1.2rem;\r\n    bottom: 0.1rem;\r\n    margin-left: 0.1rem;\r\n    border-radius: 50%;\r\n    background: white;\r\n    position: absolute;\r\n    z-index: 999997;\r\n    -webkit-box-shadow: 0 0 0.15rem #888;\r\n    -moz-box-shadow: 0 0 0.15rem #888;\r\n    box-shadow: 0 0 0.15rem #888;\r\n    padding: 0.02rem; }\r\n    .play-bar .cycle #album {\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%; }\r\n    .play-bar .cycle .ani {\r\n      -webkit-animation: rotate 30s infinite linear;\r\n      animation: rotate 30s infinite linear; }\r\n@-webkit-keyframes rotate {\r\n  0% {\r\n    -webkit-transform: rotate(0deg); }\r\n  100% {\r\n    -webkit-transform: rotate(360deg); } }\r\n@keyframes rotate {\r\n  0% {\r\n    transform: rotate(0deg); }\r\n  100% {\r\n    transform: rotate(360deg); } }\r\n  .play-bar .panel {\r\n    height: 1.2rem;\r\n    bottom: -1px;\r\n    background: white;\r\n    position: absolute;\r\n    z-index: 999995;\r\n    box-shadow: 0 0 0.15rem #888; }\r\n    .play-bar .panel .box {\r\n      height: 100%;\r\n      padding: 0.15rem 0.1rem 0.1rem 0.1rem;\r\n      width: 5rem;\r\n      margin-left: 1.4rem; }\r\n      .play-bar .panel .box .progress-bar {\r\n        height: 2px;\r\n        background: #ddd;\r\n        position: relative;\r\n        border-radius: 1px;\r\n        margin-right: 0.04rem; }\r\n        .play-bar .panel .box .progress-bar .progress {\r\n          height: 100%;\r\n          background: #2fcdfe;\r\n          border-radius: 1px 0 0 1px; }\r\n        .play-bar .panel .box .progress-bar .point {\r\n          position: absolute;\r\n          width: 6px;\r\n          height: 6px;\r\n          background: #2fcdfe;\r\n          border-radius: 50%;\r\n          top: -2px; }\r\n      .play-bar .panel .box .song {\r\n        width: 2.5rem;\r\n        height: 100%;\r\n        float: left; }\r\n        .play-bar .panel .box .song .song-name {\r\n          font-size: 0.27rem;\r\n          margin-top: 0.15rem;\r\n          color: #0e0e0e;\r\n          overflow: hidden;\r\n          white-space: nowrap;\r\n          text-overflow: ellipsis; }\r\n        .play-bar .panel .box .song .singer-name {\r\n          font-size: 0.22rem;\r\n          margin-top: 0.02rem;\r\n          color: #808080; }\r\n      .play-bar .panel .box .control {\r\n        width: 2.3rem;\r\n        height: 100%;\r\n        line-height: 1.4rem;\r\n        float: left; }\r\n        .play-bar .panel .box .control .sprites {\r\n          width: 0.5rem;\r\n          height: 0.5rem;\r\n          overflow: hidden;\r\n          box-sizing: border-box;\r\n          background: transparent url(" + __webpack_require__(/*! ../../image/icon-list.png */ 160) + ") 0 0 no-repeat;\r\n          background-size: 7.2rem 7.2rem;\r\n          float: left;\r\n          margin-top: 0.26rem;\r\n          margin-left: 0.2rem; }\r\n        .play-bar .panel .box .control .ic_menu {\r\n          background-position: 0% 0%; }\r\n        .play-bar .panel .box .control .ic_next {\r\n          background-position: 8.95522% 0%; }\r\n        .play-bar .panel .box .control .ic_pause {\r\n          background-position: 17.91045% 0%; }\r\n        .play-bar .panel .box .control .ic_play {\r\n          background-position: 26.86567% 0%; }\r\n\r\n.split-line {\r\n  content: '';\r\n  height: 1px;\r\n  width: 100%;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%; }\r\n\r\n.split-line-v {\r\n  content: '';\r\n  height: 100%;\r\n  width: 1px;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%;\r\n  color: white;\r\n  float: left; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .rank-item:after {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); }\r\n\r\n  .split-line {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .rank-item:after {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); }\r\n\r\n  .split-line {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); } }\r\n\r\n/*# sourceMappingURL=playBar.css.map */\r\n", "", {"version":3,"sources":["/./src/components/css/playBar.css"],"names":[],"mappings":"AAAA;EACE,eAAe;EACf,YAAY;EACZ,mBAAmB;EACnB,gBAAgB,EAAE;EAClB;IACE,cAAc;IACd,eAAe;IACf,eAAe;IACf,oBAAoB;IACpB,mBAAmB;IACnB,kBAAkB;IAClB,mBAAmB;IACnB,gBAAgB;IAChB,qCAAqC;IACrC,kCAAkC;IAClC,6BAA6B;IAC7B,iBAAiB,EAAE;IACnB;MACE,YAAY;MACZ,aAAa;MACb,mBAAmB,EAAE;IACvB;MACE,8CAA8C;MAC9C,sCAAsC,EAAE;AAC9C;EACE;IACE,gCAAgC,EAAE;EACpC;IACE,kCAAkC,EAAE,EAAE;AAC1C;EACE;IACE,wBAAwB,EAAE;EAC5B;IACE,0BAA0B,EAAE,EAAE;EAChC;IACE,eAAe;IACf,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,gBAAgB;IAChB,6BAA6B,EAAE;IAC/B;MACE,aAAa;MACb,sCAAsC;MACtC,YAAY;MACZ,oBAAoB,EAAE;MACtB;QACE,YAAY;QACZ,iBAAiB;QACjB,mBAAmB;QACnB,mBAAmB;QACnB,sBAAsB,EAAE;QACxB;UACE,aAAa;UACb,oBAAoB;UACpB,2BAA2B,EAAE;QAC/B;UACE,mBAAmB;UACnB,WAAW;UACX,YAAY;UACZ,oBAAoB;UACpB,mBAAmB;UACnB,UAAU,EAAE;MAChB;QACE,cAAc;QACd,aAAa;QACb,YAAY,EAAE;QACd;UACE,mBAAmB;UACnB,oBAAoB;UACpB,eAAe;UACf,iBAAiB;UACjB,oBAAoB;UACpB,wBAAwB,EAAE;QAC5B;UACE,mBAAmB;UACnB,oBAAoB;UACpB,eAAe,EAAE;MACrB;QACE,cAAc;QACd,aAAa;QACb,oBAAoB;QACpB,YAAY,EAAE;QACd;UACE,cAAc;UACd,eAAe;UACf,iBAAiB;UACjB,uBAAuB;UACvB,oEAAuE;UACvE,+BAA+B;UAC/B,YAAY;UACZ,oBAAoB;UACpB,oBAAoB,EAAE;QACxB;UACE,2BAA2B,EAAE;QAC/B;UACE,iCAAiC,EAAE;QACrC;UACE,kCAAkC,EAAE;QACtC;UACE,kCAAkC,EAAE;;AAE9C;EACE,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,0BAA0B;EAC1B,eAAe;EACf,mCAAmC;EACnC,2BAA2B,EAAE;;AAE/B;EACE,YAAY;EACZ,aAAa;EACb,WAAW;EACX,0BAA0B;EAC1B,eAAe;EACf,mCAAmC;EACnC,2BAA2B;EAC3B,aAAa;EACb,YAAY,EAAE;;AAEhB;EACE;IACE,gCAAgC;IAChC,wBAAwB,EAAE;;EAE5B;IACE,gCAAgC;IAChC,wBAAwB,EAAE,EAAE;AAChC;EACE;IACE,+BAA+B;IAC/B,uBAAuB,EAAE;;EAE3B;IACE,+BAA+B;IAC/B,uBAAuB,EAAE,EAAE;;AAE/B,uCAAuC","file":"playBar.css","sourcesContent":[".play-bar {\r\n  height: 1.4rem;\r\n  width: 100%;\r\n  position: relative;\r\n  z-index: 999990; }\r\n  .play-bar .cycle {\r\n    width: 1.2rem;\r\n    height: 1.2rem;\r\n    bottom: 0.1rem;\r\n    margin-left: 0.1rem;\r\n    border-radius: 50%;\r\n    background: white;\r\n    position: absolute;\r\n    z-index: 999997;\r\n    -webkit-box-shadow: 0 0 0.15rem #888;\r\n    -moz-box-shadow: 0 0 0.15rem #888;\r\n    box-shadow: 0 0 0.15rem #888;\r\n    padding: 0.02rem; }\r\n    .play-bar .cycle #album {\r\n      width: 100%;\r\n      height: 100%;\r\n      border-radius: 50%; }\r\n    .play-bar .cycle .ani {\r\n      -webkit-animation: rotate 30s infinite linear;\r\n      animation: rotate 30s infinite linear; }\r\n@-webkit-keyframes rotate {\r\n  0% {\r\n    -webkit-transform: rotate(0deg); }\r\n  100% {\r\n    -webkit-transform: rotate(360deg); } }\r\n@keyframes rotate {\r\n  0% {\r\n    transform: rotate(0deg); }\r\n  100% {\r\n    transform: rotate(360deg); } }\r\n  .play-bar .panel {\r\n    height: 1.2rem;\r\n    bottom: -1px;\r\n    background: white;\r\n    position: absolute;\r\n    z-index: 999995;\r\n    box-shadow: 0 0 0.15rem #888; }\r\n    .play-bar .panel .box {\r\n      height: 100%;\r\n      padding: 0.15rem 0.1rem 0.1rem 0.1rem;\r\n      width: 5rem;\r\n      margin-left: 1.4rem; }\r\n      .play-bar .panel .box .progress-bar {\r\n        height: 2px;\r\n        background: #ddd;\r\n        position: relative;\r\n        border-radius: 1px;\r\n        margin-right: 0.04rem; }\r\n        .play-bar .panel .box .progress-bar .progress {\r\n          height: 100%;\r\n          background: #2fcdfe;\r\n          border-radius: 1px 0 0 1px; }\r\n        .play-bar .panel .box .progress-bar .point {\r\n          position: absolute;\r\n          width: 6px;\r\n          height: 6px;\r\n          background: #2fcdfe;\r\n          border-radius: 50%;\r\n          top: -2px; }\r\n      .play-bar .panel .box .song {\r\n        width: 2.5rem;\r\n        height: 100%;\r\n        float: left; }\r\n        .play-bar .panel .box .song .song-name {\r\n          font-size: 0.27rem;\r\n          margin-top: 0.15rem;\r\n          color: #0e0e0e;\r\n          overflow: hidden;\r\n          white-space: nowrap;\r\n          text-overflow: ellipsis; }\r\n        .play-bar .panel .box .song .singer-name {\r\n          font-size: 0.22rem;\r\n          margin-top: 0.02rem;\r\n          color: #808080; }\r\n      .play-bar .panel .box .control {\r\n        width: 2.3rem;\r\n        height: 100%;\r\n        line-height: 1.4rem;\r\n        float: left; }\r\n        .play-bar .panel .box .control .sprites {\r\n          width: 0.5rem;\r\n          height: 0.5rem;\r\n          overflow: hidden;\r\n          box-sizing: border-box;\r\n          background: transparent url(\"../../image/icon-list.png\") 0 0 no-repeat;\r\n          background-size: 7.2rem 7.2rem;\r\n          float: left;\r\n          margin-top: 0.26rem;\r\n          margin-left: 0.2rem; }\r\n        .play-bar .panel .box .control .ic_menu {\r\n          background-position: 0% 0%; }\r\n        .play-bar .panel .box .control .ic_next {\r\n          background-position: 8.95522% 0%; }\r\n        .play-bar .panel .box .control .ic_pause {\r\n          background-position: 17.91045% 0%; }\r\n        .play-bar .panel .box .control .ic_play {\r\n          background-position: 26.86567% 0%; }\r\n\r\n.split-line {\r\n  content: '';\r\n  height: 1px;\r\n  width: 100%;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%; }\r\n\r\n.split-line-v {\r\n  content: '';\r\n  height: 100%;\r\n  width: 1px;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%;\r\n  color: white;\r\n  float: left; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .rank-item:after {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); }\r\n\r\n  .split-line {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .rank-item:after {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); }\r\n\r\n  .split-line {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); } }\r\n\r\n/*# sourceMappingURL=playBar.css.map */\r\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 160 */
/*!*********************************!*\
  !*** ./src/image/icon-list.png ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "image/icon-list.png";

/***/ },
/* 161 */
/*!********************************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/components/playBar.vue ***!
  \********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	var _store = __webpack_require__(/*! ../vuex/store.js */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// <style scoped>
	//     @import "css/playBar.css";
	// </style>
	//
	// <template>
	//     <div class="play-bar">
	//         <div class="cycle">
	//             <img :src="current.albumpic_small" :class="{'ani':rotate}" id="album">
	//         </div>
	//         <div class="panel">
	//             <div class="box">
	//                 <div class="progress-bar">
	//                     <div class="progress" :style="{width:progress+'%'}"></div>
	//                     <div class="point" :style="{left:progress+'%'}"></div>
	//                 </div>
	//                 <div class="song">
	//                     <div class="song-name">{{current.songname}}</div>
	//                     <div class="singer-name">{{current.singername}}</div>
	//                 </div>
	//                 <div class="control">
	//                     <div class="sprites ic_play" @click="playClick" :class="{'hide':playing}"></div>
	//                     <div class="sprites ic_pause" @click="playClick" :class="{'hide':!playing}"></div>
	//                     <div class="sprites ic_next" @click="next"></div>
	//                     <div class="sprites ic_menu" @click="toPop"></div>
	//                 </div>
	//                 <div style="clear: both"></div>
	//             </div>
	//         </div>
	//     </div>
	// </template>
	// <script>
	exports.default = {
	    vuex: {
	        actions: {
	            switchPlayerStatus: _actions.switchPlayerStatus,
	            nextSong: _actions.nextSong,
	            togglePopList: _actions.togglePopList
	        }
	    },
	    computed: {
	        current: function current() {
	            return _store2.default.state.play.current;
	        },
	        progress: function progress() {
	            return _store2.default.state.play.status.position / parseFloat(_store2.default.state.play.status.total) * 100;
	        },
	        playing: function playing() {
	            if (document.getElementById('album')) {
	                document.getElementById('album').style.webkitAnimationPlayState = _store2.default.state.play.status.playing ? 'running' : "paused";
	                document.getElementById('album').style.animationPlayState = _store2.default.state.play.status.playing ? 'running' : "paused";
	            }
	            return _store2.default.state.play.status.playing;
	        },
	        rotate: function rotate() {
	            return _store2.default.state.play.status.rotate;
	        }
	    },
	    methods: {
	        playClick: function playClick() {
	            this.switchPlayerStatus();
	        },
	        next: function next() {
	            this.nextSong();
	        },
	        toPop: function toPop() {
	            this.togglePopList(true);
	        }
	    }
	};
	// </script>

	/* generated by vue-loader */

/***/ },
/* 162 */
/*!********************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-105a64ce!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/playBar.vue ***!
  \********************************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n\n\n\n<div class=\"play-bar\" _v-105a64ce=\"\">\n    <div class=\"cycle\" _v-105a64ce=\"\">\n        <img :src=\"current.albumpic_small\" :class=\"{'ani':rotate}\" id=\"album\" _v-105a64ce=\"\">\n    </div>\n    <div class=\"panel\" _v-105a64ce=\"\">\n        <div class=\"box\" _v-105a64ce=\"\">\n            <div class=\"progress-bar\" _v-105a64ce=\"\">\n                <div class=\"progress\" :style=\"{width:progress+'%'}\" _v-105a64ce=\"\"></div>\n                <div class=\"point\" :style=\"{left:progress+'%'}\" _v-105a64ce=\"\"></div>\n            </div>\n            <div class=\"song\" _v-105a64ce=\"\">\n                <div class=\"song-name\" _v-105a64ce=\"\">{{current.songname}}</div>\n                <div class=\"singer-name\" _v-105a64ce=\"\">{{current.singername}}</div>\n            </div>\n            <div class=\"control\" _v-105a64ce=\"\">\n                <div class=\"sprites ic_play\" @click=\"playClick\" :class=\"{'hide':playing}\" _v-105a64ce=\"\"></div>\n                <div class=\"sprites ic_pause\" @click=\"playClick\" :class=\"{'hide':!playing}\" _v-105a64ce=\"\"></div>\n                <div class=\"sprites ic_next\" @click=\"next\" _v-105a64ce=\"\"></div>\n                <div class=\"sprites ic_menu\" @click=\"toPop\" _v-105a64ce=\"\"></div>\n            </div>\n            <div style=\"clear: both\" _v-105a64ce=\"\"></div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 163 */
/*!********************************!*\
  !*** ./src/views/playList.vue ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-4743d840&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./playList.vue */ 164)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./playList.vue */ 167)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\views\\playList.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-4743d840!./../../~/vue-loader/lib/selector.js?type=template&index=0!./playList.vue */ 174)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./playList.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 164 */
/*!************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-4743d840&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/playList.vue ***!
  \************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-4743d840&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./playList.vue */ 165);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4743d840&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./playList.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4743d840&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./playList.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 165 */
/*!***************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-4743d840&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/playList.vue ***!
  \***************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/playList.css */ 166), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"playList.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 166 */
/*!*************************************************************!*\
  !*** ./~/css-loader?sourceMap!./src/views/css/playList.css ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, ".box-bg {\r\n  position: fixed;\r\n  height: 0;\r\n  width: 6.4rem;\r\n  top: 0;\r\n  background: transparent;\r\n  transition: background 0.5s, height 0s ease;\r\n  -webkit-transition: background 0.5s, height 0s ease;\r\n  z-index: 999997; }\r\n\r\n.play-pop-box {\r\n  position: fixed;\r\n  height: 6.4rem;\r\n  width: 6.4rem;\r\n  background: white;\r\n  bottom: -6.4rem;\r\n  transition: bottom 0.5s;\r\n  -webkit-transition: bottom 0.5s;\r\n  z-index: 999998; }\r\n  .play-pop-box .title-box {\r\n    height: 0.8rem;\r\n    line-height: 0.8rem;\r\n    width: 100%;\r\n    text-align: center;\r\n    font-size: 0.28rem;\r\n    padding-left: 0.2rem;\r\n    padding-right: 0.2rem; }\r\n    .play-pop-box .title-box .title {\r\n      float: left;\r\n      width: 4.79rem; }\r\n      .play-pop-box .title-box .title .count {\r\n        font-size: 0.22rem; }\r\n    .play-pop-box .title-box .cleanList {\r\n      width: 0.6rem;\r\n      font-size: 0.22rem;\r\n      color: #e61624; }\r\n    .play-pop-box .title-box .opacity0 {\r\n      opacity: 0; }\r\n  .play-pop-box .list {\r\n    position: relative;\r\n    padding-left: 0.2rem;\r\n    padding-right: 0.2rem;\r\n    height: 5.7rem;\r\n    width: 100%;\r\n    overflow: auto; }\r\n\r\n.play-pop {\r\n  bottom: 0; }\r\n\r\nol, ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0; }\r\n\r\n.bg-pop {\r\n  background: rgba(0, 0, 0, 0.2);\r\n  height: 100%; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .item:after {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .item:after {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); } }\r\n\r\n/*# sourceMappingURL=playList.css.map */\r\n", "", {"version":3,"sources":["/./src/views/css/playList.css"],"names":[],"mappings":"AAAA;EACE,gBAAgB;EAChB,UAAU;EACV,cAAc;EACd,OAAO;EACP,wBAAwB;EACxB,4CAA4C;EAC5C,oDAAoD;EACpD,gBAAgB,EAAE;;AAEpB;EACE,gBAAgB;EAChB,eAAe;EACf,cAAc;EACd,kBAAkB;EAClB,gBAAgB;EAChB,wBAAwB;EACxB,gCAAgC;EAChC,gBAAgB,EAAE;EAClB;IACE,eAAe;IACf,oBAAoB;IACpB,YAAY;IACZ,mBAAmB;IACnB,mBAAmB;IACnB,qBAAqB;IACrB,sBAAsB,EAAE;IACxB;MACE,YAAY;MACZ,eAAe,EAAE;MACjB;QACE,mBAAmB,EAAE;IACzB;MACE,cAAc;MACd,mBAAmB;MACnB,eAAe,EAAE;IACnB;MACE,WAAW,EAAE;EACjB;IACE,mBAAmB;IACnB,qBAAqB;IACrB,sBAAsB;IACtB,eAAe;IACf,YAAY;IACZ,eAAe,EAAE;;AAErB;EACE,UAAU,EAAE;;AAEd;EACE,iBAAiB;EACjB,WAAW;EACX,UAAU,EAAE;;AAEd;EACE,+BAA+B;EAC/B,aAAa,EAAE;;AAEjB;EACE;IACE,gCAAgC;IAChC,wBAAwB,EAAE,EAAE;AAChC;EACE;IACE,+BAA+B;IAC/B,uBAAuB,EAAE,EAAE;;AAE/B,wCAAwC","file":"playList.css","sourcesContent":[".box-bg {\r\n  position: fixed;\r\n  height: 0;\r\n  width: 6.4rem;\r\n  top: 0;\r\n  background: transparent;\r\n  transition: background 0.5s, height 0s ease;\r\n  -webkit-transition: background 0.5s, height 0s ease;\r\n  z-index: 999997; }\r\n\r\n.play-pop-box {\r\n  position: fixed;\r\n  height: 6.4rem;\r\n  width: 6.4rem;\r\n  background: white;\r\n  bottom: -6.4rem;\r\n  transition: bottom 0.5s;\r\n  -webkit-transition: bottom 0.5s;\r\n  z-index: 999998; }\r\n  .play-pop-box .title-box {\r\n    height: 0.8rem;\r\n    line-height: 0.8rem;\r\n    width: 100%;\r\n    text-align: center;\r\n    font-size: 0.28rem;\r\n    padding-left: 0.2rem;\r\n    padding-right: 0.2rem; }\r\n    .play-pop-box .title-box .title {\r\n      float: left;\r\n      width: 4.79rem; }\r\n      .play-pop-box .title-box .title .count {\r\n        font-size: 0.22rem; }\r\n    .play-pop-box .title-box .cleanList {\r\n      width: 0.6rem;\r\n      font-size: 0.22rem;\r\n      color: #e61624; }\r\n    .play-pop-box .title-box .opacity0 {\r\n      opacity: 0; }\r\n  .play-pop-box .list {\r\n    position: relative;\r\n    padding-left: 0.2rem;\r\n    padding-right: 0.2rem;\r\n    height: 5.7rem;\r\n    width: 100%;\r\n    overflow: auto; }\r\n\r\n.play-pop {\r\n  bottom: 0; }\r\n\r\nol, ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0; }\r\n\r\n.bg-pop {\r\n  background: rgba(0, 0, 0, 0.2);\r\n  height: 100%; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .item:after {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .item:after {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); } }\r\n\r\n/*# sourceMappingURL=playList.css.map */\r\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 167 */
/*!****************************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/views/playList.vue ***!
  \****************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _playItem = __webpack_require__(/*! ../components/playItem.vue */ 168);
	
	var _playItem2 = _interopRequireDefault(_playItem);
	
	var _rock = __webpack_require__(/*! ../js/rock */ 2);
	
	var _rock2 = _interopRequireDefault(_rock);
	
	var _store = __webpack_require__(/*! ../vuex/store */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// <style scoped>
	//     @import "css/playList.css";
	// </style>
	//
	// <template>
	//     <div class="box-bg" :class="{'bg-pop':pop}" @click="toDown"></div>
	//     <div class="play-pop-box" :class="{'play-pop':pop}">
	//         <div class="title-box">
	//             <div class="cleanList left opacity0">清空</div>
	//             <div class="title">播放列表 <span class="count">({{list.length}}首)</span></div>
	//             <div class="cleanList right" @click="clean">清空</div>
	//         </div>
	//         <span class="split-line"></span>
	//         <ul class="list">
	//             <item :data="data" v-for="data in list"></item>
	//         </ul>
	//     </div>
	// </template>
	// <script>
	exports.default = {
	    vuex: {
	        actions: {
	            togglePopList: _actions.togglePopList,
	            cleanPlayList: _actions.cleanPlayList
	        }
	    },
	    components: {
	        item: _playItem2.default
	    },
	    computed: {
	        list: function list() {
	            return _store2.default.state.play.list;
	        },
	        pop: function pop() {
	            return _store2.default.state.play.popList.pop;
	        }
	    },
	    methods: {
	        clean: function clean() {
	            var _this = this;
	            if (_this.list.length > 0) {
	                mui.confirm('确定清空播放列表?', '提示', ['确定', '取消'], function (e) {
	                    if (e.index == 0) {
	                        _this.cleanPlayList();
	                        console.log('clean');
	                    }
	                });
	            }
	        },
	        toDown: function toDown() {
	            this.togglePopList(false);
	        }
	    },
	    ready: function ready() {}
	};
	
	// </script>

	/* generated by vue-loader */

/***/ },
/* 168 */
/*!*************************************!*\
  !*** ./src/components/playItem.vue ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-9824cd06&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./playItem.vue */ 169)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./playItem.vue */ 172)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\playItem.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-9824cd06!./../../~/vue-loader/lib/selector.js?type=template&index=0!./playItem.vue */ 173)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./playItem.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 169 */
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-9824cd06&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/playItem.vue ***!
  \*****************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-9824cd06&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./playItem.vue */ 170);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-9824cd06&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./playItem.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-9824cd06&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./playItem.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 170 */
/*!********************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-9824cd06&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/playItem.vue ***!
  \********************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/playItem.css */ 171), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"playItem.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 171 */
/*!******************************************************************!*\
  !*** ./~/css-loader?sourceMap!./src/components/css/playItem.css ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, ".playing-item {\r\n  height: 0.8rem;\r\n  width: 100%; }\r\n  .playing-item .song-name {\r\n    font-size: 0.26rem;\r\n    color: #0e0e0e;\r\n    width: 3.6rem;\r\n    float: left;\r\n    margin-top: 0.25rem;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis; }\r\n  .playing-item .playing-name {\r\n    width: 3.25rem; }\r\n  .playing-item .singer-name {\r\n    font-size: 0.20rem;\r\n    color: #999;\r\n    width: 1.3rem;\r\n    float: left;\r\n    margin-top: 0.24rem;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis; }\r\n  .playing-item .icon-box {\r\n    width: 0.5rem;\r\n    float: right;\r\n    height: 100%; }\r\n  .playing-item .icon {\r\n    font-family: Muiicons;\r\n    font-size: 0.5rem;\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    line-height: 1;\r\n    display: inline-block;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    -webkit-font-smoothing: antialiased;\r\n    color: #888;\r\n    margin-top: 0.15rem; }\r\n  .playing-item .hide {\r\n    display: none; }\r\n  .playing-item .red {\r\n    color: #e61624; }\r\n  .playing-item .playing-song {\r\n    width: 0.35rem;\r\n    float: left;\r\n    height: 100%; }\r\n  .playing-item .sprites {\r\n    width: 0.3rem;\r\n    height: 0.3rem;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n    background: transparent url(" + __webpack_require__(/*! ../../image/icon-list.png */ 160) + ") 0 0 no-repeat;\r\n    background-size: 4.32rem 4.32rem;\r\n    float: left;\r\n    margin-top: 0.29rem; }\r\n  .playing-item .ic_menu {\r\n    background-position: 44.92754% 0%; }\r\n\r\n.playing-item:after {\r\n  content: '';\r\n  height: 1px;\r\n  width: 100%;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%;\r\n  clear: both; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .playing-item:after {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .playing-item:after {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); } }\r\n\r\n/*# sourceMappingURL=playItem.css.map */\r\n", "", {"version":3,"sources":["/./src/components/css/playItem.css"],"names":[],"mappings":"AAAA;EACE,eAAe;EACf,YAAY,EAAE;EACd;IACE,mBAAmB;IACnB,eAAe;IACf,cAAc;IACd,YAAY;IACZ,oBAAoB;IACpB,iBAAiB;IACjB,oBAAoB;IACpB,wBAAwB,EAAE;EAC5B;IACE,eAAe,EAAE;EACnB;IACE,mBAAmB;IACnB,YAAY;IACZ,cAAc;IACd,YAAY;IACZ,oBAAoB;IACpB,iBAAiB;IACjB,oBAAoB;IACpB,wBAAwB,EAAE;EAC5B;IACE,cAAc;IACd,aAAa;IACb,aAAa,EAAE;EACjB;IACE,sBAAsB;IACtB,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,eAAe;IACf,sBAAsB;IACtB,sBAAsB;IACtB,mBAAmB;IACnB,oCAAoC;IACpC,YAAY;IACZ,oBAAoB,EAAE;EACxB;IACE,cAAc,EAAE;EAClB;IACE,eAAe,EAAE;EACnB;IACE,eAAe;IACf,YAAY;IACZ,aAAa,EAAE;EACjB;IACE,cAAc;IACd,eAAe;IACf,iBAAiB;IACjB,uBAAuB;IACvB,oEAAuE;IACvE,iCAAiC;IACjC,YAAY;IACZ,oBAAoB,EAAE;EACxB;IACE,kCAAkC,EAAE;;AAExC;EACE,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,0BAA0B;EAC1B,eAAe;EACf,mCAAmC;EACnC,2BAA2B;EAC3B,YAAY,EAAE;;AAEhB;EACE;IACE,gCAAgC;IAChC,wBAAwB,EAAE,EAAE;AAChC;EACE;IACE,+BAA+B;IAC/B,uBAAuB,EAAE,EAAE;;AAE/B,wCAAwC","file":"playItem.css","sourcesContent":[".playing-item {\r\n  height: 0.8rem;\r\n  width: 100%; }\r\n  .playing-item .song-name {\r\n    font-size: 0.26rem;\r\n    color: #0e0e0e;\r\n    width: 3.6rem;\r\n    float: left;\r\n    margin-top: 0.25rem;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis; }\r\n  .playing-item .playing-name {\r\n    width: 3.25rem; }\r\n  .playing-item .singer-name {\r\n    font-size: 0.20rem;\r\n    color: #999;\r\n    width: 1.3rem;\r\n    float: left;\r\n    margin-top: 0.24rem;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis; }\r\n  .playing-item .icon-box {\r\n    width: 0.5rem;\r\n    float: right;\r\n    height: 100%; }\r\n  .playing-item .icon {\r\n    font-family: Muiicons;\r\n    font-size: 0.5rem;\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    line-height: 1;\r\n    display: inline-block;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    -webkit-font-smoothing: antialiased;\r\n    color: #888;\r\n    margin-top: 0.15rem; }\r\n  .playing-item .hide {\r\n    display: none; }\r\n  .playing-item .red {\r\n    color: #e61624; }\r\n  .playing-item .playing-song {\r\n    width: 0.35rem;\r\n    float: left;\r\n    height: 100%; }\r\n  .playing-item .sprites {\r\n    width: 0.3rem;\r\n    height: 0.3rem;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n    background: transparent url(\"../../image/icon-list.png\") 0 0 no-repeat;\r\n    background-size: 4.32rem 4.32rem;\r\n    float: left;\r\n    margin-top: 0.29rem; }\r\n  .playing-item .ic_menu {\r\n    background-position: 44.92754% 0%; }\r\n\r\n.playing-item:after {\r\n  content: '';\r\n  height: 1px;\r\n  width: 100%;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%;\r\n  clear: both; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .playing-item:after {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .playing-item:after {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); } }\r\n\r\n/*# sourceMappingURL=playItem.css.map */\r\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 172 */
/*!*********************************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/components/playItem.vue ***!
  \*********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	var _store = __webpack_require__(/*! ../vuex/store.js */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// <style scoped>
	//     @import "css/playItem.css";
	// </style>
	//
	// <template>
	//     <li class="playing-item" @click="clickItem">
	//         <div class="playing-song" :class="{'hide':current.songid!=data.songid}">
	//             <div class="sprites ic_menu"></div>
	//         </div>
	//         <div class="song-name" :class="{'red':current.songid==data.songid,'playing-name':current.songid==data.songid}">
	//             {{data.songname}}
	//         </div>
	//         <div class="singer-name" :class="{'red':current.songid==data.songid}">&nbsp;{{data.singername}}</div>
	//         <div class="icon-box" @click="removeItem">
	//             <span class="icon mui-icon-closeempty"></span>
	//         </div>
	//     </li>
	// </template>
	// <script>
	exports.default = {
	    props: {
	        data: {
	            type: Object,
	            required: true
	        }
	    },
	    vuex: {
	        actions: {
	            switchSong: _actions.switchSong,
	            addPlayList: _actions.addPlayList,
	            playerStatus: _actions.playerStatus,
	            removeFromPlayList: _actions.removeFromPlayList
	        }
	    },
	    computed: {
	        current: function current() {
	            return _store2.default.state.play.current;
	        }
	    },
	    methods: {
	        clickItem: function clickItem() {
	            var _this = this;
	            _this.switchSong(_this.data, _store2.default.state.play.list, _store2.default.state.play.current);
	            //                _this.playerStatus();
	        },
	        removeItem: function removeItem() {
	            event.stopPropagation(); //阻止点击事件向上冒泡
	            this.removeFromPlayList(this.data);
	        }
	    }
	};
	// </script>

	/* generated by vue-loader */

/***/ },
/* 173 */
/*!*********************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-9824cd06!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/playItem.vue ***!
  \*********************************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n\n\n\n<li class=\"playing-item\" @click=\"clickItem\" _v-9824cd06=\"\">\n    <div class=\"playing-song\" :class=\"{'hide':current.songid!=data.songid}\" _v-9824cd06=\"\">\n        <div class=\"sprites ic_menu\" _v-9824cd06=\"\"></div>\n    </div>\n    <div class=\"song-name\" :class=\"{'red':current.songid==data.songid,'playing-name':current.songid==data.songid}\" _v-9824cd06=\"\">\n        {{data.songname}}\n    </div>\n    <div class=\"singer-name\" :class=\"{'red':current.songid==data.songid}\" _v-9824cd06=\"\">&nbsp;{{data.singername}}</div>\n    <div class=\"icon-box\" @click=\"removeItem\" _v-9824cd06=\"\">\n        <span class=\"icon mui-icon-closeempty\" _v-9824cd06=\"\"></span>\n    </div>\n</li>\n";

/***/ },
/* 174 */
/*!****************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-4743d840!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/playList.vue ***!
  \****************************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n\n\n\n<div class=\"box-bg\" :class=\"{'bg-pop':pop}\" @click=\"toDown\" _v-4743d840=\"\"></div>\n<div class=\"play-pop-box\" :class=\"{'play-pop':pop}\" _v-4743d840=\"\">\n    <div class=\"title-box\" _v-4743d840=\"\">\n        <div class=\"cleanList left opacity0\" _v-4743d840=\"\">清空</div>\n        <div class=\"title\" _v-4743d840=\"\">播放列表 <span class=\"count\" _v-4743d840=\"\">({{list.length}}首)</span></div>\n        <div class=\"cleanList right\" @click=\"clean\" _v-4743d840=\"\">清空</div>\n    </div>\n    <span class=\"split-line\" _v-4743d840=\"\"></span>\n    <ul class=\"list\" _v-4743d840=\"\">\n        <item :data=\"data\" v-for=\"data in list\" _v-4743d840=\"\"></item>\n    </ul>\n</div>\n";

/***/ },
/* 175 */
/*!***********************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-92ef8cba!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/App.vue ***!
  \***********************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n\n\n<div _v-92ef8cba=\"\">\n    <title-bar _v-92ef8cba=\"\"></title-bar>\n    <router-view _v-92ef8cba=\"\"></router-view>\n    <spinner id=\"spinner\" :style=\"{ display: spinner }\" _v-92ef8cba=\"\"></spinner>\n    <audio id=\"player\" autoplay=\"autoplay\" rel=\"{{playing}}\" val=\"{{mode}}\" :src=\"current.url\" @timeupdate=\"updateProgress\" @ended=\"complete\" @play=\"playEvent\" @pause=\"pauseEvent\" @error=\"error\" @stalled=\"stalled\" _v-92ef8cba=\"\"></audio>\n    <div class=\"play\" :class=\"{'hide':!isShow}\" _v-92ef8cba=\"\">\n        <play-bar _v-92ef8cba=\"\"></play-bar>\n    </div>\n    <pop-list _v-92ef8cba=\"\"></pop-list>\n</div>\n";

/***/ },
/* 176 */
/*!************************!*\
  !*** ./src/routers.js ***!
  \************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = function (router) {
	    var main = __webpack_require__(/*! ./views/musicMain.vue */ 177);
	    var mainView = __webpack_require__(/*! ./views/mainView.vue */ 187);
	    var rankList = __webpack_require__(/*! ./views/rankList.vue */ 189);
	    var searchList = __webpack_require__(/*! ./views/searchList.vue */ 202);
	    var likeList = __webpack_require__(/*! ./views/likeList.vue */ 207);
	    var playList = __webpack_require__(/*! ./views/likeList.vue */ 207);
	    var downList = __webpack_require__(/*! ./views/likeList.vue */ 207);
	    //路由表
	    router.map({
	        //默认
	        '/main': {
	            component: main
	        },
	        '/music': {
	            component: mainView,
	            subRoutes: {
	                '/': {
	                    component: mainView
	                },
	                '/rankList': {
	                    component: rankList
	                },
	                '/searchList': {
	                    component: searchList
	                },
	                '/likeList': {
	                    component: likeList
	                },
	                '/playList': {
	                    component: playList
	                },
	                '/downList': {
	                    component: downList
	                }
	            }
	        }
	    });
	
	    router.redirect({
	        '*': '/main'
	    });
	};

/***/ },
/* 177 */
/*!*********************************!*\
  !*** ./src/views/musicMain.vue ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-7c5f2f20&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./musicMain.vue */ 178)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./musicMain.vue */ 185)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\views\\musicMain.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-7c5f2f20!./../../~/vue-loader/lib/selector.js?type=template&index=0!./musicMain.vue */ 186)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./musicMain.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 178 */
/*!*************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-7c5f2f20&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/musicMain.vue ***!
  \*************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-7c5f2f20&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./musicMain.vue */ 179);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-7c5f2f20&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./musicMain.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-7c5f2f20&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./musicMain.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 179 */
/*!****************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-7c5f2f20&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/musicMain.vue ***!
  \****************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/musicMain.css */ 180), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"musicMain.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 180 */
/*!**************************************************************!*\
  !*** ./~/css-loader?sourceMap!./src/views/css/musicMain.css ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, "input[type=search] {\r\n  background: rgba(221, 221, 221, 0.8);\r\n  width: 6rem;\r\n  margin: 0.2rem 0.2rem 0 0.2rem; }\r\n\r\n.mm-bg {\r\n  background-color: #3ac0b5;\r\n  color: #404040;\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative; }\r\n  .mm-bg .list-1 {\r\n    width: 6rem;\r\n    height: 1.8rem;\r\n    background: rgba(221, 221, 221, 0.8);\r\n    margin: 0.45rem auto; }\r\n  .mm-bg .list-2 {\r\n    width: 6rem;\r\n    height: 1.4rem;\r\n    margin: 0.2rem auto; }\r\n  .mm-bg .rank {\r\n    width: 2.9rem;\r\n    height: 100%;\r\n    float: left; }\r\n  .mm-bg .playlist {\r\n    width: 2.9rem;\r\n    height: 100%;\r\n    float: left; }\r\n  .mm-bg .like {\r\n    width: 2.9rem;\r\n    height: 100%;\r\n    float: left;\r\n    background: rgba(221, 221, 221, 0.8); }\r\n  .mm-bg .download {\r\n    width: 2.9rem;\r\n    height: 100%;\r\n    float: right;\r\n    background: rgba(221, 221, 221, 0.8); }\r\n  .mm-bg .info {\r\n    width: 1.8rem;\r\n    color: #606060;\r\n    height: 100%;\r\n    float: left; }\r\n    .mm-bg .info .title {\r\n      font-size: 0.36rem;\r\n      margin: 0.3rem 0 0 0.2rem; }\r\n    .mm-bg .info .number {\r\n      font-size: 0.24rem;\r\n      margin: 0.1rem 0 0 0.2rem; }\r\n  .mm-bg .icon {\r\n    width: 0.8rem;\r\n    height: 0.8rem;\r\n    margin: 0.2rem 0.2rem 0 0;\r\n    float: right; }\r\n  .mm-bg .clear {\r\n    clear: both; }\r\n  .mm-bg .sprites {\r\n    height: 0.5rem;\r\n    width: 0.5rem;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n    background: transparent url(" + __webpack_require__(/*! ../../image/icon-list.png */ 160) + ") 0 0 no-repeat;\r\n    background-size: 7.2rem 7.2rem;\r\n    margin: 0.3rem auto 0.15rem auto; }\r\n  .mm-bg .icon1 {\r\n    width: 0.57rem;\r\n    margin: 0.14rem auto 0.1rem auto;\r\n    background-position: 0% 0%; }\r\n  .mm-bg .icon2 {\r\n    width: 0.57rem;\r\n    margin: 0.14rem auto 0.1rem auto;\r\n    background-position: 9.04977% 0%; }\r\n  .mm-bg .ic_like {\r\n    background: url(" + __webpack_require__(/*! ../../image/music_icon_like.png */ 181) + ");\r\n    background-size: 0.8rem 0.8rem; }\r\n  .mm-bg .ic_down {\r\n    background: url(" + __webpack_require__(/*! ../../image/music_icon_downlist.png */ 182) + ");\r\n    background-size: 0.8rem 0.8rem; }\r\n  .mm-bg .ic_rank {\r\n    background: url(" + __webpack_require__(/*! ../../image/music_icon_rank.png */ 183) + ");\r\n    background-size: 0.8rem 0.8rem; }\r\n  .mm-bg .ic_play {\r\n    background: url(" + __webpack_require__(/*! ../../image/music_icon_playlist.png */ 184) + ");\r\n    background-size: 0.8rem 0.8rem; }\r\n\r\n/*# sourceMappingURL=musicMain.css.map */\r\n", "", {"version":3,"sources":["/./src/views/css/musicMain.css"],"names":[],"mappings":"AAAA;EACE,qCAAqC;EACrC,YAAY;EACZ,+BAA+B,EAAE;;AAEnC;EACE,0BAA0B;EAC1B,eAAe;EACf,aAAa;EACb,YAAY;EACZ,mBAAmB,EAAE;EACrB;IACE,YAAY;IACZ,eAAe;IACf,qCAAqC;IACrC,qBAAqB,EAAE;EACzB;IACE,YAAY;IACZ,eAAe;IACf,oBAAoB,EAAE;EACxB;IACE,cAAc;IACd,aAAa;IACb,YAAY,EAAE;EAChB;IACE,cAAc;IACd,aAAa;IACb,YAAY,EAAE;EAChB;IACE,cAAc;IACd,aAAa;IACb,YAAY;IACZ,qCAAqC,EAAE;EACzC;IACE,cAAc;IACd,aAAa;IACb,aAAa;IACb,qCAAqC,EAAE;EACzC;IACE,cAAc;IACd,eAAe;IACf,aAAa;IACb,YAAY,EAAE;IACd;MACE,mBAAmB;MACnB,0BAA0B,EAAE;IAC9B;MACE,mBAAmB;MACnB,0BAA0B,EAAE;EAChC;IACE,cAAc;IACd,eAAe;IACf,0BAA0B;IAC1B,aAAa,EAAE;EACjB;IACE,YAAY,EAAE;EAChB;IACE,eAAe;IACf,cAAc;IACd,iBAAiB;IACjB,uBAAuB;IACvB,oEAAuE;IACvE,+BAA+B;IAC/B,iCAAiC,EAAE;EACrC;IACE,eAAe;IACf,iCAAiC;IACjC,2BAA2B,EAAE;EAC/B;IACE,eAAe;IACf,iCAAiC;IACjC,iCAAiC,EAAE;EACrC;IACE,0CAAmD;IACnD,+BAA+B,EAAE;EACnC;IACE,0CAAuD;IACvD,+BAA+B,EAAE;EACnC;IACE,0CAAmD;IACnD,+BAA+B,EAAE;EACnC;IACE,0CAAuD;IACvD,+BAA+B,EAAE;;AAErC,yCAAyC","file":"musicMain.css","sourcesContent":["input[type=search] {\r\n  background: rgba(221, 221, 221, 0.8);\r\n  width: 6rem;\r\n  margin: 0.2rem 0.2rem 0 0.2rem; }\r\n\r\n.mm-bg {\r\n  background-color: #3ac0b5;\r\n  color: #404040;\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative; }\r\n  .mm-bg .list-1 {\r\n    width: 6rem;\r\n    height: 1.8rem;\r\n    background: rgba(221, 221, 221, 0.8);\r\n    margin: 0.45rem auto; }\r\n  .mm-bg .list-2 {\r\n    width: 6rem;\r\n    height: 1.4rem;\r\n    margin: 0.2rem auto; }\r\n  .mm-bg .rank {\r\n    width: 2.9rem;\r\n    height: 100%;\r\n    float: left; }\r\n  .mm-bg .playlist {\r\n    width: 2.9rem;\r\n    height: 100%;\r\n    float: left; }\r\n  .mm-bg .like {\r\n    width: 2.9rem;\r\n    height: 100%;\r\n    float: left;\r\n    background: rgba(221, 221, 221, 0.8); }\r\n  .mm-bg .download {\r\n    width: 2.9rem;\r\n    height: 100%;\r\n    float: right;\r\n    background: rgba(221, 221, 221, 0.8); }\r\n  .mm-bg .info {\r\n    width: 1.8rem;\r\n    color: #606060;\r\n    height: 100%;\r\n    float: left; }\r\n    .mm-bg .info .title {\r\n      font-size: 0.36rem;\r\n      margin: 0.3rem 0 0 0.2rem; }\r\n    .mm-bg .info .number {\r\n      font-size: 0.24rem;\r\n      margin: 0.1rem 0 0 0.2rem; }\r\n  .mm-bg .icon {\r\n    width: 0.8rem;\r\n    height: 0.8rem;\r\n    margin: 0.2rem 0.2rem 0 0;\r\n    float: right; }\r\n  .mm-bg .clear {\r\n    clear: both; }\r\n  .mm-bg .sprites {\r\n    height: 0.5rem;\r\n    width: 0.5rem;\r\n    overflow: hidden;\r\n    box-sizing: border-box;\r\n    background: transparent url(\"../../image/icon-list.png\") 0 0 no-repeat;\r\n    background-size: 7.2rem 7.2rem;\r\n    margin: 0.3rem auto 0.15rem auto; }\r\n  .mm-bg .icon1 {\r\n    width: 0.57rem;\r\n    margin: 0.14rem auto 0.1rem auto;\r\n    background-position: 0% 0%; }\r\n  .mm-bg .icon2 {\r\n    width: 0.57rem;\r\n    margin: 0.14rem auto 0.1rem auto;\r\n    background-position: 9.04977% 0%; }\r\n  .mm-bg .ic_like {\r\n    background: url(\"../../image/music_icon_like.png\");\r\n    background-size: 0.8rem 0.8rem; }\r\n  .mm-bg .ic_down {\r\n    background: url(\"../../image/music_icon_downlist.png\");\r\n    background-size: 0.8rem 0.8rem; }\r\n  .mm-bg .ic_rank {\r\n    background: url(\"../../image/music_icon_rank.png\");\r\n    background-size: 0.8rem 0.8rem; }\r\n  .mm-bg .ic_play {\r\n    background: url(\"../../image/music_icon_playlist.png\");\r\n    background-size: 0.8rem 0.8rem; }\r\n\r\n/*# sourceMappingURL=musicMain.css.map */\r\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 181 */
/*!***************************************!*\
  !*** ./src/image/music_icon_like.png ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "image/music_icon_like.png";

/***/ },
/* 182 */
/*!*******************************************!*\
  !*** ./src/image/music_icon_downlist.png ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "image/music_icon_downlist.png";

/***/ },
/* 183 */
/*!***************************************!*\
  !*** ./src/image/music_icon_rank.png ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "image/music_icon_rank.png";

/***/ },
/* 184 */
/*!*******************************************!*\
  !*** ./src/image/music_icon_playlist.png ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "image/music_icon_playlist.png";

/***/ },
/* 185 */
/*!*****************************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/views/musicMain.vue ***!
  \*****************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _mui = __webpack_require__(/*! ../js/mui.min */ 49);
	
	var _mui2 = _interopRequireDefault(_mui);
	
	var _playBar = __webpack_require__(/*! ../components/playBar.vue */ 156);
	
	var _playBar2 = _interopRequireDefault(_playBar);
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	var _store = __webpack_require__(/*! ../vuex/store */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Common = __webpack_require__(/*! ../js/rock */ 2); // <template >
	//     <div class="mm-bg">
	//         <div class="search">
	//             <form onsubmit="{alert('sdsd')}">
	//                 <input class="search-music" type="search" placeholder="搜索">
	//             </form>
	//
	//         </div>
	//         <div class="list-1" v-link="'/music/rankList'">
	//             <div class="rank">
	//                 <div class="info">
	//                     <div class="title">排行榜</div>
	//                 </div>
	//                 <div class="ic_rank icon"></div>
	//             </div>
	//         </div>
	//         <div class="list-2">
	//             <div class="like" v-link="'/music/likeList'">
	//                 <div class="info">
	//                     <div class="title">最喜欢</div>
	//                     <div class="number">0 首</div>
	//                 </div>
	//                 <div class="ic_like icon"></div>
	//             </div>
	//             <div class="download" v-link="'/music/downList'">
	//                 <div class="info">
	//                     <div class="title">已下载</div>
	//                     <div class="number">0 首</div>
	//                 </div>
	//                 <div class="ic_down icon "></div>
	//             </div>
	//         </div>
	//         <div class="clear"></div>
	//         <div class="list-1" @click="toPop">
	//             <div class="playlist">
	//                 <div class="info">
	//                     <div class="title">播放列表</div>
	//                 </div>
	//                 <div class="ic_play icon"></div>
	//             </div>
	//         </div>
	//     </div>
	// </template>
	// <script>
	exports.default = {
	    data: function data() {
	        return {
	            name: "",
	            img: '',
	            info: ''
	        };
	    },
	
	    vuex: {
	        actions: {
	            updateTitle: _actions.updateTitle,
	            toggleSpinner: _actions.toggleSpinner,
	            togglePopList: _actions.togglePopList
	        }
	    },
	    components: {
	        play: _playBar2.default
	    },
	    methods: {
	        toPop: function toPop() {
	            this.togglePopList(true);
	        }
	    },
	    ready: function ready() {
	        var _this = this;
	        _this.updateTitle('主页', false, 'search');
	        Common.appView.action = function () {
	            _this.$route.router.go({ path: '/music/searchList' });
	        };
	    }
	};
	
	// </script>
	// <style scoped>
	//     @import 'css/musicMain.css';
	// </style>

	/* generated by vue-loader */

/***/ },
/* 186 */
/*!*****************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-7c5f2f20!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/musicMain.vue ***!
  \*****************************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n<div class=\"mm-bg\" _v-7c5f2f20=\"\">\n    <div class=\"search\" _v-7c5f2f20=\"\">\n        <form onsubmit=\"{alert('sdsd')}\" _v-7c5f2f20=\"\">\n            <input class=\"search-music\" type=\"search\" placeholder=\"搜索\" _v-7c5f2f20=\"\">\n        </form>\n\n    </div>\n    <div class=\"list-1\" v-link=\"'/music/rankList'\" _v-7c5f2f20=\"\">\n        <div class=\"rank\" _v-7c5f2f20=\"\">\n            <div class=\"info\" _v-7c5f2f20=\"\">\n                <div class=\"title\" _v-7c5f2f20=\"\">排行榜</div>\n            </div>\n            <div class=\"ic_rank icon\" _v-7c5f2f20=\"\"></div>\n        </div>\n    </div>\n    <div class=\"list-2\" _v-7c5f2f20=\"\">\n        <div class=\"like\" v-link=\"'/music/likeList'\" _v-7c5f2f20=\"\">\n            <div class=\"info\" _v-7c5f2f20=\"\">\n                <div class=\"title\" _v-7c5f2f20=\"\">最喜欢</div>\n                <div class=\"number\" _v-7c5f2f20=\"\">0 首</div>\n            </div>\n            <div class=\"ic_like icon\" _v-7c5f2f20=\"\"></div>\n        </div>\n        <div class=\"download\" v-link=\"'/music/downList'\" _v-7c5f2f20=\"\">\n            <div class=\"info\" _v-7c5f2f20=\"\">\n                <div class=\"title\" _v-7c5f2f20=\"\">已下载</div>\n                <div class=\"number\" _v-7c5f2f20=\"\">0 首</div>\n            </div>\n            <div class=\"ic_down icon \" _v-7c5f2f20=\"\"></div>\n        </div>\n    </div>\n    <div class=\"clear\" _v-7c5f2f20=\"\"></div>\n    <div class=\"list-1\" @click=\"toPop\" _v-7c5f2f20=\"\">\n        <div class=\"playlist\" _v-7c5f2f20=\"\">\n            <div class=\"info\" _v-7c5f2f20=\"\">\n                <div class=\"title\" _v-7c5f2f20=\"\">播放列表</div>\n            </div>\n            <div class=\"ic_play icon\" _v-7c5f2f20=\"\"></div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 187 */
/*!********************************!*\
  !*** ./src/views/mainView.vue ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/selector.js?type=template&index=0!./mainView.vue */ 188)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./mainView.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 188 */
/*!*********************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/mainView.vue ***!
  \*********************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n<div>\n    <router-view></router-view>\n</div>\n";

/***/ },
/* 189 */
/*!********************************!*\
  !*** ./src/views/rankList.vue ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-3cd02138&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./rankList.vue */ 190)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./rankList.vue */ 193)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\views\\rankList.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-3cd02138!./../../~/vue-loader/lib/selector.js?type=template&index=0!./rankList.vue */ 201)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./rankList.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 190 */
/*!************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-3cd02138&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/rankList.vue ***!
  \************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-3cd02138&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./rankList.vue */ 191);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-3cd02138&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./rankList.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-3cd02138&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./rankList.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 191 */
/*!***************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-3cd02138&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/rankList.vue ***!
  \***************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/list.css */ 192), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"rankList.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 192 */
/*!*********************************************************!*\
  !*** ./~/css-loader?sourceMap!./src/views/css/list.css ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, ".list-box .tab {\r\n  width: 100%;\r\n  height: 0.6rem;\r\n  position: fixed;\r\n  background: white;\r\n  top: 0.8rem;\r\n  z-index: 999994; }\r\n  .list-box .tab .bar {\r\n    height: 100%;\r\n    line-height: 0.6rem;\r\n    width: 1.06rem;\r\n    text-align: center;\r\n    font-size: 0.24rem;\r\n    float: left;\r\n    color: #404040;\r\n    border-bottom: 1px #d7d7d7 solid; }\r\n  .list-box .tab .bar:after {\r\n    content: '';\r\n    height: 4px;\r\n    width: 100%;\r\n    background-color: #d7d7d7;\r\n    display: block;\r\n    -webkit-transform-origin: 50% 100%;\r\n    transform-origin: 50% 100%;\r\n    background: -webkit-linear-gradient(#d7d7d7, white);\r\n    background: -moz-linear-gradient(#d7d7d7, white);\r\n    background: linear-gradient(#d7d7d7, white); }\r\n  .list-box .tab .active-bar {\r\n    color: #2fcdfe; }\r\n  .list-box .tab .active-bar:after {\r\n    content: '';\r\n    height: 4px;\r\n    width: 100%;\r\n    background: -webkit-linear-gradient(#2fcdfe, white);\r\n    background: -moz-linear-gradient(#2fcdfe, white);\r\n    background: linear-gradient(#2fcdfe, white);\r\n    display: block;\r\n    -webkit-transform-origin: 50% 100%;\r\n    transform-origin: 50% 100%; }\r\n.list-box .list {\r\n  width: 6.4rem;\r\n  margin-top: .6rem;\r\n  margin-bottom: 1.4rem; }\r\n.list-box .mar-t0 {\r\n  margin-top: 0; }\r\n\r\n/*# sourceMappingURL=list.css.map */\r\n", "", {"version":3,"sources":["/./src/views/css/list.css"],"names":[],"mappings":"AAAA;EACE,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,kBAAkB;EAClB,YAAY;EACZ,gBAAgB,EAAE;EAClB;IACE,aAAa;IACb,oBAAoB;IACpB,eAAe;IACf,mBAAmB;IACnB,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,iCAAiC,EAAE;EACrC;IACE,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,0BAA0B;IAC1B,eAAe;IACf,mCAAmC;IACnC,2BAA2B;IAC3B,oDAAoD;IACpD,iDAAiD;IACjD,4CAA4C,EAAE;EAChD;IACE,eAAe,EAAE;EACnB;IACE,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,oDAAoD;IACpD,iDAAiD;IACjD,4CAA4C;IAC5C,eAAe;IACf,mCAAmC;IACnC,2BAA2B,EAAE;AACjC;EACE,cAAc;EACd,kBAAkB;EAClB,sBAAsB,EAAE;AAC1B;EACE,cAAc,EAAE;;AAElB,oCAAoC","file":"list.css","sourcesContent":[".list-box .tab {\r\n  width: 100%;\r\n  height: 0.6rem;\r\n  position: fixed;\r\n  background: white;\r\n  top: 0.8rem;\r\n  z-index: 999994; }\r\n  .list-box .tab .bar {\r\n    height: 100%;\r\n    line-height: 0.6rem;\r\n    width: 1.06rem;\r\n    text-align: center;\r\n    font-size: 0.24rem;\r\n    float: left;\r\n    color: #404040;\r\n    border-bottom: 1px #d7d7d7 solid; }\r\n  .list-box .tab .bar:after {\r\n    content: '';\r\n    height: 4px;\r\n    width: 100%;\r\n    background-color: #d7d7d7;\r\n    display: block;\r\n    -webkit-transform-origin: 50% 100%;\r\n    transform-origin: 50% 100%;\r\n    background: -webkit-linear-gradient(#d7d7d7, white);\r\n    background: -moz-linear-gradient(#d7d7d7, white);\r\n    background: linear-gradient(#d7d7d7, white); }\r\n  .list-box .tab .active-bar {\r\n    color: #2fcdfe; }\r\n  .list-box .tab .active-bar:after {\r\n    content: '';\r\n    height: 4px;\r\n    width: 100%;\r\n    background: -webkit-linear-gradient(#2fcdfe, white);\r\n    background: -moz-linear-gradient(#2fcdfe, white);\r\n    background: linear-gradient(#2fcdfe, white);\r\n    display: block;\r\n    -webkit-transform-origin: 50% 100%;\r\n    transform-origin: 50% 100%; }\r\n.list-box .list {\r\n  width: 6.4rem;\r\n  margin-top: .6rem;\r\n  margin-bottom: 1.4rem; }\r\n.list-box .mar-t0 {\r\n  margin-top: 0; }\r\n\r\n/*# sourceMappingURL=list.css.map */\r\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 193 */
/*!****************************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/views/rankList.vue ***!
  \****************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _rankItem = __webpack_require__(/*! ../components/rankItem.vue */ 194);
	
	var _rankItem2 = _interopRequireDefault(_rankItem);
	
	var _playBar = __webpack_require__(/*! ../components/playBar.vue */ 156);
	
	var _playBar2 = _interopRequireDefault(_playBar);
	
	var _rock = __webpack_require__(/*! ../js/rock */ 2);
	
	var _rock2 = _interopRequireDefault(_rock);
	
	var _store = __webpack_require__(/*! ../vuex/store */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    data: function data() {
	        return {
	            list: []
	        };
	    },
	    vuex: {
	        actions: {
	            updateTitle: _actions.updateTitle,
	            toggleSpinner: _actions.toggleSpinner,
	            updateTopId: _actions.updateTopId
	        }
	    },
	    components: {
	        item: _rankItem2.default,
	        play: _playBar2.default
	    },
	    computed: {
	        rank: function rank() {
	            return _store2.default.state.rank;
	        }
	    },
	    methods: {
	        load: function load(topid) {
	            var _this = this;
	            _this.toggleSpinner();
	            _rock2.default.showApiData('https://route.showapi.com/213-4', { topid: topid }, function (data) {
	                _this.updateTopId(topid);
	                console.log(data);
	                _this.list = data.showapi_res_body.pagebean.songlist.slice(0, 50);
	                _this.toggleSpinner();
	            });
	        }
	    },
	    ready: function ready() {
	        var _this = this;
	        _this.updateTitle('排行榜', true, 'hide');
	        _this.load(_store2.default.state.rank.topid);
	    }
	};
	
	// </script>

	/* generated by vue-loader */
	// <style scoped>
	//     @import "css/list.css";
	// </style>
	//
	// <template>
	//     <div class="list-box">
	//         <div class="tab">
	//             <div class="bar" style="width: 1.08rem" :class="{'active-bar':rank.topid==26}" @click="load(26)">
	//                 热歌
	//             </div>
	//             <div class="bar" :class="{'active-bar':rank.topid==5}" @click="load(5)">内地</div>
	//             <div class="bar" :class="{'active-bar':rank.topid==6}" @click="load(6)">港台</div>
	//             <div class="bar" :class="{'active-bar':rank.topid==16}" @click="load(16)">韩国</div>
	//             <div class="bar" :class="{'active-bar':rank.topid==17}" @click="load(17)">日本</div>
	//             <div class="bar" style="width: 1.08rem" :class="{'active-bar':rank.topid==3}" @click="load(3)">
	//                 欧美
	//             </div>
	//             <span style="clear: both"></span>
	//         </div>
	//         <div class="list">
	//             <item :data="data" v-for="data in list"></item>
	//         </div>
	//     </div>
	// </template>
	// <script>

/***/ },
/* 194 */
/*!*************************************!*\
  !*** ./src/components/rankItem.vue ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-ad0c3b16&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./rankItem.vue */ 195)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./rankItem.vue */ 198)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\rankItem.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-ad0c3b16!./../../~/vue-loader/lib/selector.js?type=template&index=0!./rankItem.vue */ 199)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./rankItem.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 195 */
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-ad0c3b16&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/rankItem.vue ***!
  \*****************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-ad0c3b16&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./rankItem.vue */ 196);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-ad0c3b16&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./rankItem.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-ad0c3b16&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./rankItem.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 196 */
/*!********************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-ad0c3b16&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/components/rankItem.vue ***!
  \********************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/rankItem.css */ 197), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"rankItem.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 197 */
/*!******************************************************************!*\
  !*** ./~/css-loader?sourceMap!./src/components/css/rankItem.css ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	
	
	// module
	exports.push([module.id, ".rank-item {\r\n  height: 1rem;\r\n  background: #fff;\r\n  padding-left: 0.2rem;\r\n  padding-right: 0.2rem; }\r\n  .rank-item .line1 {\r\n    height: 100%;\r\n    width: 5.1rem;\r\n    float: left; }\r\n  .rank-item .songname {\r\n    font-size: 0.27rem;\r\n    color: #0e0e0e;\r\n    width: 100%;\r\n    height: 0.5rem;\r\n    padding-top: 0.14rem;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis; }\r\n  .rank-item .singername {\r\n    font-size: 0.23rem;\r\n    color: #808080;\r\n    width: 100%;\r\n    height: 0.5rem;\r\n    padding-top: 0.07rem;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis; }\r\n  .rank-item .line2 {\r\n    height: 100%;\r\n    width: .79rem;\r\n    float: right; }\r\n    .rank-item .line2 .more {\r\n      width: 0.4rem;\r\n      height: 0.4rem;\r\n      display: inline-block;\r\n      margin-top: 0.3rem;\r\n      margin-left: 0.25rem; }\r\n  .rank-item .more {\r\n    font-family: Muiicons;\r\n    font-size: 0.4rem;\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    line-height: 1;\r\n    display: inline-block;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    -webkit-font-smoothing: antialiased;\r\n    color: #888;\r\n    margin-top: 0.3rem;\r\n    margin-left: 0.1rem;\r\n    margin-right: 0.1rem;\r\n    border-radius: 0.06rem;\r\n    width: 0.5rem; }\r\n\r\n.rank-item:active {\r\n  background: #eee; }\r\n\r\n.rank-item:after {\r\n  content: '';\r\n  height: 1px;\r\n  width: 100%;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%; }\r\n\r\n.rank-item:first-child:after {\r\n  content: '';\r\n  height: 0;\r\n  width: 0; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .rank-item:after {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .rank-item:after {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); } }\r\n\r\n/*# sourceMappingURL=rankItem.css.map */\r\n", "", {"version":3,"sources":["/./src/components/css/rankItem.css"],"names":[],"mappings":"AAAA;EACE,aAAa;EACb,iBAAiB;EACjB,qBAAqB;EACrB,sBAAsB,EAAE;EACxB;IACE,aAAa;IACb,cAAc;IACd,YAAY,EAAE;EAChB;IACE,mBAAmB;IACnB,eAAe;IACf,YAAY;IACZ,eAAe;IACf,qBAAqB;IACrB,iBAAiB;IACjB,oBAAoB;IACpB,wBAAwB,EAAE;EAC5B;IACE,mBAAmB;IACnB,eAAe;IACf,YAAY;IACZ,eAAe;IACf,qBAAqB;IACrB,iBAAiB;IACjB,oBAAoB;IACpB,wBAAwB,EAAE;EAC5B;IACE,aAAa;IACb,cAAc;IACd,aAAa,EAAE;IACf;MACE,cAAc;MACd,eAAe;MACf,sBAAsB;MACtB,mBAAmB;MACnB,qBAAqB,EAAE;EAC3B;IACE,sBAAsB;IACtB,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;IACnB,eAAe;IACf,sBAAsB;IACtB,sBAAsB;IACtB,mBAAmB;IACnB,oCAAoC;IACpC,YAAY;IACZ,mBAAmB;IACnB,oBAAoB;IACpB,qBAAqB;IACrB,uBAAuB;IACvB,cAAc,EAAE;;AAEpB;EACE,iBAAiB,EAAE;;AAErB;EACE,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,0BAA0B;EAC1B,eAAe;EACf,mCAAmC;EACnC,2BAA2B,EAAE;;AAE/B;EACE,YAAY;EACZ,UAAU;EACV,SAAS,EAAE;;AAEb;EACE;IACE,gCAAgC;IAChC,wBAAwB,EAAE,EAAE;AAChC;EACE;IACE,+BAA+B;IAC/B,uBAAuB,EAAE,EAAE;;AAE/B,wCAAwC","file":"rankItem.css","sourcesContent":[".rank-item {\r\n  height: 1rem;\r\n  background: #fff;\r\n  padding-left: 0.2rem;\r\n  padding-right: 0.2rem; }\r\n  .rank-item .line1 {\r\n    height: 100%;\r\n    width: 5.1rem;\r\n    float: left; }\r\n  .rank-item .songname {\r\n    font-size: 0.27rem;\r\n    color: #0e0e0e;\r\n    width: 100%;\r\n    height: 0.5rem;\r\n    padding-top: 0.14rem;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis; }\r\n  .rank-item .singername {\r\n    font-size: 0.23rem;\r\n    color: #808080;\r\n    width: 100%;\r\n    height: 0.5rem;\r\n    padding-top: 0.07rem;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis; }\r\n  .rank-item .line2 {\r\n    height: 100%;\r\n    width: .79rem;\r\n    float: right; }\r\n    .rank-item .line2 .more {\r\n      width: 0.4rem;\r\n      height: 0.4rem;\r\n      display: inline-block;\r\n      margin-top: 0.3rem;\r\n      margin-left: 0.25rem; }\r\n  .rank-item .more {\r\n    font-family: Muiicons;\r\n    font-size: 0.4rem;\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    line-height: 1;\r\n    display: inline-block;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    -webkit-font-smoothing: antialiased;\r\n    color: #888;\r\n    margin-top: 0.3rem;\r\n    margin-left: 0.1rem;\r\n    margin-right: 0.1rem;\r\n    border-radius: 0.06rem;\r\n    width: 0.5rem; }\r\n\r\n.rank-item:active {\r\n  background: #eee; }\r\n\r\n.rank-item:after {\r\n  content: '';\r\n  height: 1px;\r\n  width: 100%;\r\n  background-color: #d7d7d7;\r\n  display: block;\r\n  -webkit-transform-origin: 50% 100%;\r\n  transform-origin: 50% 100%; }\r\n\r\n.rank-item:first-child:after {\r\n  content: '';\r\n  height: 0;\r\n  width: 0; }\r\n\r\n@media only screen and (-webkit-min-device-pixel-ratio: 3) {\r\n  .rank-item:after {\r\n    -webkit-transform: scaleY(0.33);\r\n    transform: scaleY(0.33); } }\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\r\n  .rank-item:after {\r\n    -webkit-transform: scaleY(0.5);\r\n    transform: scaleY(0.5); } }\r\n\r\n/*# sourceMappingURL=rankItem.css.map */\r\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 198 */
/*!*********************************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/components/rankItem.vue ***!
  \*********************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	var _store = __webpack_require__(/*! ../vuex/store.js */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// <style scoped>
	//     @import "css/rankItem.css";
	// </style>
	//
	// <template>
	//     <div class='rank-item' @click="clickItem()">
	//         <div class='line1'>
	//             <div id='songname' class='songname left'>{{data.songname}}</div>
	//             <div id='singername' class='singername right'>{{data.singername}}</div>
	//         </div>
	//         <div class='line2'>
	//             <img src="../image/more.png" class="more">
	//         </div>
	//     </div>
	// </template>
	// <script>
	exports.default = {
	    props: {
	        data: {
	            type: Object,
	            required: true
	        }
	    },
	    vuex: {
	        actions: {
	            switchSong: _actions.switchSong,
	            addPlayList: _actions.addPlayList,
	            playerStatus: _actions.playerStatus
	        }
	    },
	    methods: {
	        clickItem: function clickItem() {
	            var _this = this;
	            _this.switchSong(_this.data, _store2.default.state.play.list, _store2.default.state.play.current);
	            //                _this.playerStatus();
	        },
	        showMore: function showMore(event) {
	            event.stopPropagation(); //阻止点击事件向上冒泡
	        }
	    }
	};
	// </script>

	/* generated by vue-loader */

/***/ },
/* 199 */
/*!*********************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-ad0c3b16!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/rankItem.vue ***!
  \*********************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = "\n\n\n\n\n<div class=\"rank-item\" @click=\"clickItem()\" _v-ad0c3b16=\"\">\n    <div class=\"line1\" _v-ad0c3b16=\"\">\n        <div id=\"songname\" class=\"songname left\" _v-ad0c3b16=\"\">{{data.songname}}</div>\n        <div id=\"singername\" class=\"singername right\" _v-ad0c3b16=\"\">{{data.singername}}</div>\n    </div>\n    <div class=\"line2\" _v-ad0c3b16=\"\">\n        <img src=\"" + __webpack_require__(/*! ../image/more.png */ 200) + "\" class=\"more\" _v-ad0c3b16=\"\">\n    </div>\n</div>\n";

/***/ },
/* 200 */
/*!****************************!*\
  !*** ./src/image/more.png ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "image/more.png";

/***/ },
/* 201 */
/*!****************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-3cd02138!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/rankList.vue ***!
  \****************************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n\n\n\n<div class=\"list-box\" _v-3cd02138=\"\">\n    <div class=\"tab\" _v-3cd02138=\"\">\n        <div class=\"bar\" style=\"width: 1.08rem\" :class=\"{'active-bar':rank.topid==26}\" @click=\"load(26)\" _v-3cd02138=\"\">\n            热歌\n        </div>\n        <div class=\"bar\" :class=\"{'active-bar':rank.topid==5}\" @click=\"load(5)\" _v-3cd02138=\"\">内地</div>\n        <div class=\"bar\" :class=\"{'active-bar':rank.topid==6}\" @click=\"load(6)\" _v-3cd02138=\"\">港台</div>\n        <div class=\"bar\" :class=\"{'active-bar':rank.topid==16}\" @click=\"load(16)\" _v-3cd02138=\"\">韩国</div>\n        <div class=\"bar\" :class=\"{'active-bar':rank.topid==17}\" @click=\"load(17)\" _v-3cd02138=\"\">日本</div>\n        <div class=\"bar\" style=\"width: 1.08rem\" :class=\"{'active-bar':rank.topid==3}\" @click=\"load(3)\" _v-3cd02138=\"\">\n            欧美\n        </div>\n        <span style=\"clear: both\" _v-3cd02138=\"\"></span>\n    </div>\n    <div class=\"list\" _v-3cd02138=\"\">\n        <item :data=\"data\" v-for=\"data in list\" _v-3cd02138=\"\"></item>\n    </div>\n</div>\n";

/***/ },
/* 202 */
/*!**********************************!*\
  !*** ./src/views/searchList.vue ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-4e16a934&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./searchList.vue */ 203)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./searchList.vue */ 205)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\views\\searchList.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-4e16a934!./../../~/vue-loader/lib/selector.js?type=template&index=0!./searchList.vue */ 206)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./searchList.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 203 */
/*!**************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-4e16a934&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/searchList.vue ***!
  \**************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-4e16a934&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./searchList.vue */ 204);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4e16a934&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./searchList.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-4e16a934&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./searchList.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 204 */
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-4e16a934&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/searchList.vue ***!
  \*****************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/list.css */ 192), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"searchList.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 205 */
/*!******************************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/views/searchList.vue ***!
  \******************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _rankItem = __webpack_require__(/*! ../components/rankItem.vue */ 194);
	
	var _rankItem2 = _interopRequireDefault(_rankItem);
	
	var _playBar = __webpack_require__(/*! ../components/playBar.vue */ 156);
	
	var _playBar2 = _interopRequireDefault(_playBar);
	
	var _rock = __webpack_require__(/*! ../js/rock */ 2);
	
	var _rock2 = _interopRequireDefault(_rock);
	
	var _store = __webpack_require__(/*! ../vuex/store */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var recordIndex = 0; // <style scoped>
	//     @import "css/list.css";
	// </style>
	//
	// <template>
	//     <div class="list-box" rel="{{keyWord}}">
	//         <div class="list mar-t0">
	//             <item :data="data" v-for="data in list"></item>
	//         </div>
	//     </div>
	// </template>
	// <script>
	
	var todayCount = 0;
	var todayMoney = 0;
	exports.default = {
	    data: function data() {
	        return {
	            list: []
	        };
	    },
	    vuex: {
	        actions: {
	            updateTitle: _actions.updateTitle,
	            toggleSpinner: _actions.toggleSpinner,
	            updateTopId: _actions.updateTopId
	        }
	    },
	    components: {
	        item: _rankItem2.default,
	        play: _playBar2.default
	    },
	    computed: {
	        keyWord: function keyWord() {
	            return _store2.default.state.search.keyword;
	        }
	    },
	    methods: {
	        searchSong: function searchSong() {
	            var _this = this;
	            if (_store2.default.state.search.keyword && _store2.default.state.search.keyword.length != 0) {
	                _this.toggleSpinner();
	                _rock2.default.showApiData('https://route.showapi.com/213-1', {
	                    keyword: _store2.default.state.search.keyword,
	                    page: 1
	                }, function (data) {
	                    console.log(data);
	                    _this.list = data.showapi_res_body.pagebean.contentlist.slice(0, 50);
	                    _this.toggleSpinner();
	                });
	            }
	        }
	    },
	    ready: function ready() {
	        var _this = this;
	        _this.updateTitle('搜索', true, 'sBar');
	        _rock2.default.appView.action = function () {
	            _this.searchSong();
	        };
	    }
	};
	
	// </script>

	/* generated by vue-loader */

/***/ },
/* 206 */
/*!******************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-4e16a934!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/searchList.vue ***!
  \******************************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n\n\n\n<div class=\"list-box\" rel=\"{{keyWord}}\" _v-4e16a934=\"\">\n    <div class=\"list mar-t0\" _v-4e16a934=\"\">\n        <item :data=\"data\" v-for=\"data in list\" _v-4e16a934=\"\"></item>\n    </div>\n</div>\n";

/***/ },
/* 207 */
/*!********************************!*\
  !*** ./src/views/likeList.vue ***!
  \********************************/
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(/*! !vue-style-loader!css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-5f54e9a3&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./likeList.vue */ 208)
	__vue_script__ = __webpack_require__(/*! !babel-loader!./../../~/vue-loader/lib/selector.js?type=script&index=0!./likeList.vue */ 210)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\views\\likeList.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(/*! !vue-html-loader!./../../~/vue-loader/lib/template-rewriter.js?id=_v-5f54e9a3!./../../~/vue-loader/lib/selector.js?type=template&index=0!./likeList.vue */ 211)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}
	if (false) {(function () {  module.hot.accept()
	  var hotAPI = require("vue-hot-reload-api")
	  hotAPI.install(require("vue"), false)
	  if (!hotAPI.compatible) return
	  var id = "./likeList.vue"
	  if (!module.hot.data) {
	    hotAPI.createRecord(id, module.exports)
	  } else {
	    hotAPI.update(id, module.exports, __vue_template__)
	  }
	})()}

/***/ },
/* 208 */
/*!************************************************************************************************************************************************************************************************!*\
  !*** ./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-5f54e9a3&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/likeList.vue ***!
  \************************************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../~/css-loader?sourceMap!./../../~/vue-loader/lib/style-rewriter.js?id=_v-5f54e9a3&scoped=true!./../../~/vue-loader/lib/selector.js?type=style&index=0!./likeList.vue */ 209);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../~/vue-style-loader/addStyles.js */ 139)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-5f54e9a3&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./likeList.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?sourceMap!./../../node_modules/vue-loader/lib/style-rewriter.js?id=_v-5f54e9a3&scoped=true!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./likeList.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 209 */
/*!***************************************************************************************************************************************************************************!*\
  !*** ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=_v-5f54e9a3&scoped=true!./~/vue-loader/lib/selector.js?type=style&index=0!./src/views/likeList.vue ***!
  \***************************************************************************************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../~/css-loader/lib/css-base.js */ 137)();
	// imports
	exports.i(__webpack_require__(/*! -!./../../~/css-loader?sourceMap!./css/list.css */ 192), "");
	
	// module
	exports.push([module.id, "\n", "", {"version":3,"sources":[],"names":[],"mappings":"","file":"likeList.vue","sourceRoot":"webpack://"}]);
	
	// exports


/***/ },
/* 210 */
/*!****************************************************************************************************!*\
  !*** ./~/babel-loader!./~/vue-loader/lib/selector.js?type=script&index=0!./src/views/likeList.vue ***!
  \****************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _rankItem = __webpack_require__(/*! ../components/rankItem.vue */ 194);
	
	var _rankItem2 = _interopRequireDefault(_rankItem);
	
	var _playBar = __webpack_require__(/*! ../components/playBar.vue */ 156);
	
	var _playBar2 = _interopRequireDefault(_playBar);
	
	var _rock = __webpack_require__(/*! ../js/rock */ 2);
	
	var _rock2 = _interopRequireDefault(_rock);
	
	var _store = __webpack_require__(/*! ../vuex/store */ 148);
	
	var _store2 = _interopRequireDefault(_store);
	
	var _actions = __webpack_require__(/*! ../vuex/actions */ 150);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var recordIndex = 0; // <style scoped>
	//     @import "css/list.css";
	// </style>
	//
	// <template>
	//     <div class="list-box">
	//         <div class="list">
	//             <item :data="data" v-for="data in list"></item>
	//         </div>
	//     </div>
	//     <div class="play">
	//         <play></play>
	//     </div>
	// </template>
	// <script>
	
	var todayCount = 0;
	var todayMoney = 0;
	exports.default = {
	    data: function data() {
	        return {
	            list: []
	        };
	    },
	    vuex: {
	        actions: {
	            updateTitle: _actions.updateTitle,
	            toggleSpinner: _actions.toggleSpinner,
	            updateTopId: _actions.updateTopId
	        }
	    },
	    components: {
	        item: _rankItem2.default,
	        play: _playBar2.default
	    },
	    computed: {
	        rank: function rank() {
	            return _store2.default.state.rank;
	        }
	    },
	    methods: {
	        load: function load(topid) {
	            var _this = this;
	            _this.toggleSpinner();
	            _rock2.default.showApiData('https://route.showapi.com/213-4', { topid: topid }, function (data) {
	                _this.updateTopId(topid);
	                console.log(data);
	                _this.list = data.showapi_res_body.pagebean.songlist.slice(0, 50);
	                _this.toggleSpinner();
	            });
	        }
	    },
	    ready: function ready() {
	        var _this = this;
	        _this.updateTitle('排行榜', true, 'hide');
	        _this.load(_store2.default.state.rank.topid);
	    }
	};
	
	// </script>

	/* generated by vue-loader */

/***/ },
/* 211 */
/*!****************************************************************************************************************************************************************!*\
  !*** ./~/vue-html-loader!./~/vue-loader/lib/template-rewriter.js?id=_v-5f54e9a3!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/likeList.vue ***!
  \****************************************************************************************************************************************************************/
/***/ function(module, exports) {

	module.exports = "\n\n\n\n\n<div class=\"list-box\" _v-5f54e9a3=\"\">\n    <div class=\"list\" _v-5f54e9a3=\"\">\n        <item :data=\"data\" v-for=\"data in list\" _v-5f54e9a3=\"\"></item>\n    </div>\n</div>\n<div class=\"play\" _v-5f54e9a3=\"\">\n    <play _v-5f54e9a3=\"\"></play>\n</div>\n";

/***/ }
]);
//# sourceMappingURL=main.js.map